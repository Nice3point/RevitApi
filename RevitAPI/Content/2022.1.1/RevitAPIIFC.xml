<?xml version="1.0"?>
<doc>
    <assembly>
        "RevitAPIIFC"
    </assembly>
    <members>
        <member name="P:Autodesk.Revit.DB.IFC.IFCAggregate.Item(System.Int32)">
            <summary>
         Get the IFCData for this aggregate.
      </summary>
            <param name="index">
         The index.
      </param>
            <returns>
         The IFCData.
      </returns>
        </member>
        <member name="M:XYZUtils.vecsAreParallelExact(XYZUtils.XYZ!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,XYZUtils.XYZ!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Determines whether vectors are parallel within DOUBLE_EPS 
Returns: if parallel =&gt; 1
         if not or if either is {0,0,0}. =&gt; 0
         if antiparallel =&gt; -1
</member>
        <member name="M:XYZUtils.vecsAreParallelApprox(XYZUtils.XYZ!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,XYZUtils.XYZ!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Determines whether vectors are parallel within ANGLE_EPS 
Returns: if parallel =&gt; 1
         if not or if either is {0,0,0}. =&gt; 0
         if antiparallel =&gt; -1
</member>
        <member name="M:XYZUtils.almostEqual(XYZUtils.XYZ!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,XYZUtils.XYZ!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns true when the two vectors are almost equal.
NOTE that the applied tolerance scales with the length of the 
vectors.
USE WITH CAUTION
In 3D modeling, a tolerance such as Revit's vertex tolerance
(TessEpsCntrl::getVertexEps) should be used.
Use this only in special cases."
</member>
        <member name="M:XYZUtils.tripleProduct(XYZUtils.XYZ!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,XYZUtils.XYZ!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,XYZUtils.XYZ!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
The triple product of of three vectors vec0, vec1, vec2 is defined as
   dot(cross(vec0, vec1), vec2).

It is equal to the signed volume of the parallelepiped spanned by the three vectors.
It is zero if and only if the vectors are linearly dependent. This function is equivalent
to the Vec3d function vecVolume.
</member>
        <member name="M:XYZUtils.asUnitOrZero(XYZUtils.XYZ!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert the input xyz into a unit vector.
IF the input vector cannot be normalized
THEN the function will return a zero vector.
</member>
        <member name="M:XYZUtils.asUnit(XYZUtils.XYZ!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert the input xyz into a unit vector.
IF the vector cannot be normalized
THEN the function will return std::nullopt.
</member>
        <member name="M:XYZUtils.cross(XYZUtils.XYZ!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,XYZUtils.XYZ!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Treats lhs and rhs as vectors and returns their cross product.
</member>
        <member name="M:XYZUtils.dot(XYZUtils.XYZ!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,XYZUtils.XYZ!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Treats lhs and rhs as vectors and returns their dot product.
</member>
        <member name="M:XYZUtils.XYZ.normalized">
returns a parallel unit vector or zero vector
</member>
        <member name="M:XYZUtils.XYZ.unit">
Make this a unit vector or return ERR_NULL_VECTOR
</member>
        <member name="M:XYZUtils.XYZ.#ctor(System.Double,System.Double,System.Double)">
construct XYZ from components
</member>
        <member name="M:XYZUtils.XYZ.basis(System.Int32)">
returns a unit vector in the X, Y or Z direction for dim values of 0, 1 or 2 respectively
</member>
        <member name="M:XYZUtils.XYZ.basisZ">
returns a unit vector in the Z-direction (0, 0, 1)
</member>
        <member name="M:XYZUtils.XYZ.basisY">
returns a unit vector in the Y-direction (0, 1, 0)
</member>
        <member name="M:XYZUtils.XYZ.basisX">
returns a unit vector in the X-direction (1, 0, 0)
</member>
        <member name="M:XYZUtils.XYZ.zero">
returns (0, 0, 0)
</member>
        <member name="T:XYZUtils.XYZ">
            <summary>
'XYZUtils::XYZ' is a class that represents a 3d vector or a 3d point.
</summary>
            <remarks>
By default XYZUtils::XYZ is initialized to {0.0, 0.0, 0.0}.
</remarks>
        </member>
        <member name="F:CBitmapRenderTarget.m_pBitmapRenderTarget">
            <summary>
A pointer to an ID2D1BitmapRenderTarget object.
</summary>
        </member>
        <member name="M:CBitmapRenderTarget.GetBitmap(CD2DBitmap*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Retrieves the bitmap for this render target. The returned bitmap can be used for drawing operations. </summary>
            <returns>If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="bitmap">When this method returns, contains the valid bitmap for this render target. This bitmap can be used for drawing operations.</param>
        </member>
        <member name="M:CBitmapRenderTarget.op_Implicit~ID2D1BitmapRenderTarget*">
            <summary>
Returns ID2D1BitmapRenderTarget interface</summary>
            <returns> 
Pointer to an ID2D1BitmapRenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CBitmapRenderTarget.GetBitmapRenderTarget">
            <summary>
Returns ID2D1BitmapRenderTarget interface</summary>
            <returns> 
Pointer to an ID2D1BitmapRenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CBitmapRenderTarget.Detach">
            <summary>
Detaches render target interface from the object</summary>
            <returns> 
Pointer to detached render target interface.</returns>
        </member>
        <member name="M:CBitmapRenderTarget.Attach(ID2D1BitmapRenderTarget*)">
            <summary>
Attaches existing render target interface to the object</summary>
            <param name="pTarget">Existing render target interface. Cannot be NULL</param>
        </member>
        <member name="M:CBitmapRenderTarget.#ctor">
            <summary>
Constructs a CBitmapRenderTarget object.</summary>
        </member>
        <member name="F:CDCRenderTarget.m_pDCRenderTarget">
            <summary>
A pointer to an ID2D1DCRenderTarget object.
</summary>
        </member>
        <member name="M:CDCRenderTarget.op_Implicit~ID2D1DCRenderTarget*">
            <summary>
Returns ID2D1DCRenderTarget interface</summary>
            <returns> 
Pointer to an ID2D1DCRenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CDCRenderTarget.GetDCRenderTarget">
            <summary>
Returns ID2D1DCRenderTarget interface</summary>
            <returns> 
Pointer to an ID2D1DCRenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CDCRenderTarget.BindDC(CDC!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Binds the render target to the device context to which it issues drawing commands</summary>
            <returns>If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="dc">The device context to which the render target issues drawing commands</param>
            <param name="rect">The dimensions of the handle to a device context (HDC) to which the render target is bound</param>
        </member>
        <member name="M:CDCRenderTarget.Create(D2D1_RENDER_TARGET_PROPERTIES!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Creates a CDCRenderTarget.</summary>
            <returns>
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="props">The rendering mode, pixel format, remoting options, DPI information, and the minimum DirectX support required for hardware rendering.</param>
        </member>
        <member name="M:CDCRenderTarget.Detach">
            <summary>
Detaches render target interface from the object</summary>
            <returns> 
Pointer to detached render target interface.</returns>
        </member>
        <member name="M:CDCRenderTarget.Attach(ID2D1DCRenderTarget*)">
            <summary>
Attaches existing render target interface to the object</summary>
            <param name="pTarget">Existing render target interface. Cannot be NULL</param>
        </member>
        <member name="M:CDCRenderTarget.#ctor">
            <summary>
Constructs a CDCRenderTarget object.</summary>
        </member>
        <member name="T:CDCRenderTarget">
            <summary>
ID2D1DCRenderTarget wrapper.
</summary>
        </member>
        <member name="F:CHwndRenderTarget.m_pHwndRenderTarget">
            <summary>
A pointer to an ID2D1HwndRenderTarget object.
</summary>
        </member>
        <member name="M:CHwndRenderTarget.Resize(CD2DSizeU!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Changes the size of the render target to the specified pixel size</summary>
            <returns>If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="size">The new size of the render target in device pixels</param>
        </member>
        <member name="M:CHwndRenderTarget.CheckWindowState">
            <summary>
Indicates whether the HWND associated with this render target is occluded.</summary>
            <returns>
A value that indicates whether the HWND associated with this render target is occluded.</returns>
        </member>
        <member name="M:CHwndRenderTarget.GetHwnd">
            <summary>
Returns the HWND associated with this render target.</summary>
            <returns>
The HWND associated with this render target.</returns>
        </member>
        <member name="M:CHwndRenderTarget.op_Implicit~ID2D1HwndRenderTarget*">
            <summary>
Returns ID2D1HwndRenderTarget interface.</summary>
            <returns>
Pointer to an ID2D1HwndRenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CHwndRenderTarget.GetHwndRenderTarget">
            <summary>
Returns ID2D1HwndRenderTarget interface.</summary>
            <returns>
Pointer to an ID2D1HwndRenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CHwndRenderTarget.ReCreate(HWND__*)">
            <summary>
Re-creates a render target associated with the window</summary>
            <returns>If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="hWnd">The HWND associated with this render target</param>
        </member>
        <member name="M:CHwndRenderTarget.Create(HWND__*)">
            <summary>
Creates a render target associated with the window </summary>
            <returns>If the method succeeds, it returns TRUE. Otherwise, it returns FALSE</returns>
            <param name="hWnd">The HWND associated with this render target</param>
        </member>
        <member name="M:CHwndRenderTarget.Detach">
            <summary>
Detaches render target interface from the object</summary>
            <returns> 
Pointer to detached render target interface.</returns>
        </member>
        <member name="M:CHwndRenderTarget.Attach(ID2D1HwndRenderTarget*)">
            <summary>
Attaches existing render target interface to the object</summary>
            <param name="pTarget">Existing render target interface. Cannot be NULL</param>
        </member>
        <member name="M:CHwndRenderTarget.#ctor(HWND__*)">
            <summary>
Constructs a CHwndRenderTarget object from HWND.</summary>
            <param name="hwnd">The HWND associated with this render target</param>
        </member>
        <member name="T:CHwndRenderTarget">
            <summary>
ID2D1HwndRenderTarget wrapper.
</summary>
        </member>
        <member name="F:CRenderTarget.m_pTextFormatDefault">
            <summary>
A pointer to CD2DTextFormat object that contains a default text format.
</summary>
        </member>
        <member name="F:CRenderTarget.m_lstResources">
            <summary>
A list of pointers to CD2DResource objects.
</summary>
        </member>
        <member name="F:CRenderTarget.m_pRenderTarget">
            <summary>
A pointer to an ID2D1RenderTarget object.
</summary>
        </member>
        <member name="M:CRenderTarget.VerifyResource(CD2DResource*)">
            <summary>
Verifies CD2DResource object validity; creates the object if it didn't already exist.</summary>
            <param name="pResource">Pointer to CD2DResource object.</param>
            <returns> 
TRUE is object if valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CRenderTarget.PopAxisAlignedClip">
            <summary>
Removes the last axis-aligned clip from the render target. After this method is called, the clip is no longer applied to subsequent drawing operations.</summary>
        </member>
        <member name="M:CRenderTarget.PushAxisAlignedClip(CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,D2D1_ANTIALIAS_MODE)">
            <summary>
Removes the last axis-aligned clip from the render target. After this method is called, the clip is no longer applied to subsequent drawing operations.</summary>
            <param name="rectClip">The size and position of the clipping area, in device-independent pixels.</param>
            <param name="mode">The antialiasing mode that is used to draw the edges of clip rects that have subpixel boundaries, and to blend the clip with the scene contents. The blending is performed once when the PopAxisAlignedClip method is called, and does not apply to each primitive within the layer.</param>
        </member>
        <member name="M:CRenderTarget.RestoreDrawingState(ID2D1DrawingStateBlock*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets the render target's drawing state to that of the specified ID2D1DrawingStateBlock.</summary>
            <param name="drawingStateBlock">The new drawing state of the render target.</param>
        </member>
        <member name="M:CRenderTarget.SaveDrawingState(ID2D1DrawingStateBlock*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Saves the current drawing state to the specified ID2D1DrawingStateBlock.</summary>
            <param name="drawingStateBlock">When this method returns, contains the current drawing state of the render target. This parameter must be initialized before passing it to the method.</param>
        </member>
        <member name="M:CRenderTarget.Flush(System.UInt64*,System.UInt64*)">
            <summary>
Executes all pending drawing commands.</summary>
            <param name="tag1">Contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</param>
            <param name="tag2">Contains the tag for drawing operations that caused errors or 0 if there were no errors. This parameter is passed uninitialized.</param>
        </member>
        <member name="M:CRenderTarget.PopLayer">
            <summary>
Stops redirecting drawing operations to the layer that is specified by the last PushLayer call.</summary>
        </member>
        <member name="M:CRenderTarget.PushLayer(D2D1_LAYER_PARAMETERS!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DLayer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Adds the specified layer to the render target so that it receives all subsequent drawing operations until PopLayer is called.</summary>
            <param name="layerParameters">The content bounds, geometric mask, opacity, opacity mask, and antialiasing options for the layer.</param>
            <param name="layer">The layer that receives subsequent drawing operations.</param>
        </member>
        <member name="M:CRenderTarget.CreateCompatibleRenderTarget(CBitmapRenderTarget*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DSizeF,CD2DSizeU,D2D1_PIXEL_FORMAT*,D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS)">
            <summary>
Creates a new bitmap render target for use during intermediate offscreen drawing that is compatible with the current render target .</summary>
            <returns>If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="bitmapTarget">When this method returns, contains the address of a pointer to a new bitmap render target. This parameter is passed uninitialized.</param>
            <param name="sizeDesired">The desired size of the new render target in device-independent pixels if it should be different from the original render target, or NULL. For more information, see the Remarks section.</param>
            <param name="sizePixelDesired">The desired size of the new render target in pixels if it should be different from the original render target, or NULL. For more information, see the Remarks section.</param>
            <param name="desiredFormat">The desired pixel format and alpha mode of the new render target, or NULL. If the pixel format is set to DXGI_FORMAT_UNKNOWN or if this parameter is null, the new render target uses the same pixel format as the original render target. If the alpha mode is D2D1_ALPHA_MODE_UNKNOWN or this parameter is NULL, the alpha mode of the new render target defaults to D2D1_ALPHA_MODE_PREMULTIPLIED. For information about supported pixel formats, see Supported Pixel Formats and Alpha Modes.</param>
            <param name="options">A value that specifies whether the new render target must be compatible with GDI.</param>
        </member>
        <member name="M:CRenderTarget.GetTransform(D2D_MATRIX_3X2_F*)">
            <summary>
Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space.</summary>
            <param name="transform">The transform to apply to the render target.</param>
        </member>
        <member name="M:CRenderTarget.SetTransform(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space.</summary>
            <param name="transform">The transform to apply to the render target.</param>
        </member>
        <member name="M:CRenderTarget.SetTransform(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space.</summary>
            <param name="transform">The transform to apply to the render target.</param>
        </member>
        <member name="M:CRenderTarget.GetTextRenderingParams(IDWriteRenderingParams**)">
            <summary>
Retrieves the render target's current text rendering options.</summary>
            <param name="textRenderingParams">When this method returns, textRenderingParamscontains the address of a pointer to the render target's current text rendering options.</param>
        </member>
        <member name="M:CRenderTarget.SetTextRenderingParams(IDWriteRenderingParams*)">
            <summary>
Specifies text rendering options to be applied to all subsequent text and glyph drawing operations.</summary>
            <param name="textRenderingParams">The text rendering options to be applied to all subsequent text and glyph drawing operations; NULL to clear current text rendering options.</param>
        </member>
        <member name="M:CRenderTarget.GetTextAntialiasMode">
            <summary>
Gets the current antialiasing mode for text and glyph drawing operations.</summary>
            <returns>
Current antialiasing mode for text and glyph drawing operations.</returns>
        </member>
        <member name="M:CRenderTarget.SetTextAntialiasMode(D2D1_TEXT_ANTIALIAS_MODE)">
            <summary>
Specifies the antialiasing mode to use for subsequent text and glyph drawing operations.</summary>
            <param name="textAntialiasMode">The antialiasing mode to use for subsequent text and glyph drawing operations.</param>
        </member>
        <member name="M:CRenderTarget.GetAntialiasMode">
            <summary>
Retrieves the current antialiasing mode for nontext drawing operations.</summary>
            <returns>
Current antialiasing mode for nontext drawing operations.</returns>
        </member>
        <member name="M:CRenderTarget.SetAntialiasMode(D2D1_ANTIALIAS_MODE)">
            <summary>
Sets the antialiasing mode of the render target. The antialiasing mode applies to all subsequent drawing operations, excluding text and glyph drawing operations.</summary>
            <param name="antialiasMode">The antialiasing mode for future drawing operations.</param>
        </member>
        <member name="M:CRenderTarget.FillMesh(CD2DMesh*,CD2DBrush*)">
            <summary>
Paints the interior of the specified mesh.</summary>
            <param name="pMesh">The mesh to paint.</param>
            <param name="pBrush">The brush used to paint the mesh.</param>
        </member>
        <member name="M:CRenderTarget.DrawGlyphRun(CD2DPointF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,DWRITE_GLYPH_RUN!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*,DWRITE_MEASURING_MODE)">
            <summary>
Draws the specified glyphs.</summary>
            <param name="ptBaseLineOrigin">The origin, in device-independent pixels, of the glyphs' baseline.</param>
            <param name="glyphRun">The glyphs to render.</param>
            <param name="pForegroundBrush">The brush used to paint the specified glyphs.</param>
            <param name="measuringMode">A value that indicates how glyph metrics are used to measure text when it is formatted. The default value is DWRITE_MEASURING_MODE_NATURAL.</param>
        </member>
        <member name="M:CRenderTarget.FillGeometry(CD2DGeometry*,CD2DBrush*,CD2DBrush*)">
            <summary>
Paints the interior of the specified geometry.</summary>
            <param name="pGeometry">The geometry to paint.</param>
            <param name="pBrush">The brush used to paint the geometry's interior.</param>
            <param name="pOpacityBrush">The opacity mask to apply to the geometry;NULL for no opacity mask. If an opacity mask (the opacityBrush parameter) is specified, brush must be an ID2D1BitmapBrush that has its x- and y-extend modes set to D2D1_EXTEND_MODE_CLAMP. For more information, see the Remarks section.</param>
        </member>
        <member name="M:CRenderTarget.DrawGeometry(CD2DGeometry*,CD2DBrush*,System.Single,ID2D1StrokeStyle*)">
            <summary>
Draws the outline of the specified geometry using the specified stroke style.</summary>
            <param name="pGeometry">The geometry to draw.</param>
            <param name="pBrush">The brush used to paint the geometry's stroke.</param>
            <param name="fStrokeWidth">The thickness of the geometry's stroke. The stroke is centered on the geometry's outline.</param>
            <param name="strokeStyle">The style of stroke to apply to the geometry's outline, or NULL to paint a solid stroke.</param>
        </member>
        <member name="M:CRenderTarget.DrawBitmap(CD2DBitmap*,CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,D2D1_BITMAP_INTERPOLATION_MODE,CD2DRectF!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Draws the formatted text described by the specified IDWriteTextLayout object.</summary>
            <param name="pBitmap">The bitmap to render.</param>
            <param name="rectDest">The size and position, in device-independent pixels in the render target's coordinate space, of the area to which the bitmap is drawn. If the rectangle is not well-ordered, nothing is drawn, but the render target does not enter an error state.</param>
            <param name="fOpacity">A value between 0.0f and 1.0f, inclusive, that specifies an opacity value to apply to the bitmap; this value is multiplied against the alpha values of the bitmap's contents.</param>
            <param name="interpolationMode">The interpolation mode to use if the bitmap is scaled or rotated by the drawing operation.</param>
            <param name="pRectSrc">The size and position, in device-independent pixels in the bitmap's coordinate space, of the area within the bitmap to draw.</param>
        </member>
        <member name="M:CRenderTarget.DrawTextLayout(CD2DPointF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DTextLayout*,CD2DBrush*,D2D1_DRAW_TEXT_OPTIONS)">
            <summary>
Draws the formatted text described by the specified IDWriteTextLayout object.</summary>
            <param name="ptOrigin">The point, described in device-independent pixels, at which the upper-left corner of the text described by textLayout is drawn.</param>
            <param name="textLayout">The formatted text to draw. Any drawing effects that do not inherit from ID2D1Resource are ignored. If there are drawing effects that inherit from ID2D1Resource that are not brushes, this method fails and the render target is put in an error state.</param>
            <param name="pBrushForeground">The brush used to paint any text in textLayout that does not already have a brush associated with it as a drawing effect (specified by the IDWriteTextLayout::SetDrawingEffect method).</param>
            <param name="options">A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is D2D1_DRAW_TEXT_OPTIONS_NONE, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle.</param>
        </member>
        <member name="M:CRenderTarget.DrawText(ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*,CD2DTextFormat*,D2D1_DRAW_TEXT_OPTIONS,DWRITE_MEASURING_MODE)">
            <summary>
Draws the specified text using the format information provided by an IDWriteTextFormat object.</summary>
            <param name="strText">A pointer to an array of Unicode characters to draw.</param>
            <param name="rect">The size and position of the area in which the text is drawn.</param>
            <param name="pForegroundBrush">The brush used to paint the text.</param>
            <param name="textFormat">An object that describes formatting details of the text to draw, such as the font, the font size, and flow direction.</param>
            <param name="options">A value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is D2D1_DRAW_TEXT_OPTIONS_NONE, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle.</param>
            <param name="measuringMode">A value that indicates how glyph metrics are used to measure text when it is formatted. The default value is DWRITE_MEASURING_MODE_NATURAL.</param>
        </member>
        <member name="M:CRenderTarget.FillOpacityMask(CD2DBitmap*,CD2DBrush*,D2D1_OPACITY_MASK_CONTENT,CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Applies the opacity mask described by the specified bitmap to a brush and uses that brush to paint a region of the render target.</summary>
            <param name="pOpacityMask">The position and radius, in device-independent pixels, of the ellipse to paint.</param>
            <param name="pBrush">The brush used to paint the region of the render target specified by destinationRectangle.</param>
            <param name="content">The type of content the opacity mask contains. The value is used to determine the color space in which the opacity mask is blended.</param>
            <param name="rectDest">The region of the render target to paint, in device-independent pixels.</param>
            <param name="rectSrc">The region of the bitmap to use as the opacity mask, in device-independent pixels.</param>
        </member>
        <member name="M:CRenderTarget.DrawLine(CD2DPointF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DPointF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*,System.Single,ID2D1StrokeStyle*)">
            <summary>
Draws a line between the specified points using the specified stroke style.</summary>
            <param name="ptFrom">The start point of the line, in device-independent pixels.</param>
            <param name="ptTo">The end point of the line, in device-independent pixels.</param>
            <param name="pBrush">The brush used to paint the line's stroke.</param>
            <param name="fStrokeWidth">A value greater than or equal to 0.0f that specifies the width of the stroke. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.</param>
            <param name="strokeStyle">The style of stroke to paint, or NULL to paint a solid line.</param>
        </member>
        <member name="M:CRenderTarget.FillEllipse(CD2DEllipse!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*)">
            <summary>
Paints the interior of the specified ellipse.</summary>
            <param name="ellipse">The position and radius, in device-independent pixels, of the ellipse to paint.</param>
            <param name="pBrush">The brush used to paint the interior of the ellipse.</param>
        </member>
        <member name="M:CRenderTarget.DrawEllipse(CD2DEllipse!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*,System.Single,ID2D1StrokeStyle*)">
            <summary>
Draws the outline of the specified ellipse using the specified stroke style.</summary>
            <param name="ellipse">The position and radius of the ellipse to draw, in device-independent pixels.</param>
            <param name="pBrush">The brush used to paint the ellipse's outline.</param>
            <param name="fStrokeWidth">The thickness of the ellipse's stroke. The stroke is centered on the ellipse's outline.</param>
            <param name="strokeStyle">The style of stroke to apply to the ellipse's outline, or NULL to paint a solid stroke.</param>
        </member>
        <member name="M:CRenderTarget.FillRoundedRectangle(CD2DRoundedRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*)">
            <summary>
Paints the interior of the specified rounded rectangle.</summary>
            <param name="rectRounded">The dimensions of the rounded rectangle to paint, in device independent pixels.</param>
            <param name="pBrush">The brush used to paint the interior of the rounded rectangle.</param>
        </member>
        <member name="M:CRenderTarget.DrawRoundedRectangle(CD2DRoundedRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*,System.Single,ID2D1StrokeStyle*)">
            <summary>
Draws the outline of the specified rounded rectangle using the specified stroke style.</summary>
            <param name="rectRounded">The dimensions of the rounded rectangle to draw, in device-independent pixels.</param>
            <param name="pBrush">The brush used to paint the rounded rectangle's outline.</param>
            <param name="fStrokeWidth">The width of the rounded rectangle's stroke. The stroke is centered on the rounded rectangle's outline. The default value is 1.0f.</param>
            <param name="strokeStyle">The style of the rounded rectangle's stroke, or NULL to paint a solid stroke. The default value is NULL.</param>
        </member>
        <member name="M:CRenderTarget.FillRectangle(CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*)">
            <summary>
Paints the interior of the specified rectangle.</summary>
            <param name="rect">The dimension of the rectangle to paint, in device-independent pixels.</param>
            <param name="pBrush">The brush used to paint the rectangle's interior.</param>
        </member>
        <member name="M:CRenderTarget.DrawRectangle(CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DBrush*,System.Single,ID2D1StrokeStyle*)">
            <summary>
Draws the outline of a rectangle that has the specified dimensions and stroke style.</summary>
            <param name="rect">The dimensions of the rectangle to draw, in device-independent pixels</param>
            <param name="pBrush">The brush used to paint the rectangle's stroke</param>
            <param name="fStrokeWidth">A value greater than or equal to 0.0f that specifies the width of the rectangle's stroke. The stroke is centered on the rectangle's outline.</param>
            <param name="strokeStyle">The style of stroke to paint, or NULL to paint a solid stroke.</param>
        </member>
        <member name="M:CRenderTarget.Clear(_D3DCOLORVALUE)">
            <summary>
Clears the drawing area to the specified color.</summary>
            <param name="color">The color to which the drawing area is cleared.</param>
        </member>
        <member name="M:CRenderTarget.COLORREF_TO_D2DCOLOR(System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int32)">
            <summary>
Converts GDI color and alpha values to the D2D1_COLOR_F object.</summary>
            <param name="color">RGB value.</param>
            <param name="nAlpha">Alpha value.</param>
            <returns>
D2D1_COLOR_F value.</returns>
        </member>
        <member name="M:CRenderTarget.EndDraw">
            <summary>
Ends drawing operations on the render target and indicates the current error state and associated tags.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:CRenderTarget.BeginDraw">
            <summary>
Initiates drawing on this render target.</summary>
        </member>
        <member name="M:CRenderTarget.Detach">
            <summary>
Detaches render target interface from the object</summary>
            <returns> 
Pointer to detached render target interface.</returns>
        </member>
        <member name="M:CRenderTarget.Attach(ID2D1RenderTarget*)">
            <summary>
Attaches existing render target interface to the object</summary>
            <param name="pRenderTarget">Existing render target interface. Cannot be NULL</param>
        </member>
        <member name="M:CRenderTarget.GetMaximumBitmapSize">
            <summary>
Gets the maximum size, in device-dependent units (pixels), of any one bitmap dimension supported by the render target</summary>
            <returns> 
The maximum size, in pixels, of any one bitmap dimension supported by the render target</returns>
        </member>
        <member name="M:CRenderTarget.IsSupported(D2D1_RENDER_TARGET_PROPERTIES!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Indicates whether the render target supports the specified properties</summary>
            <returns> 
TRUE if the specified render target properties are supported by this render target; otherwise, FALSE</returns>
            <param name="renderTargetProperties">The render target properties to test</param>
        </member>
        <member name="M:CRenderTarget.SetTags(System.UInt64,System.UInt64)">
            <summary>
Specifies a label for subsequent drawing operations.</summary>
            <param name="tag1">A label to apply to subsequent drawing operations.</param>
            <param name="tag2">A label to apply to subsequent drawing operations.</param>
        </member>
        <member name="M:CRenderTarget.GetTags(System.UInt64*,System.UInt64*)">
            <summary>
Gets the label for subsequent drawing operations.</summary>
            <param name="tag1">Contains the first label for subsequent drawing operations. This parameter is passed uninitialized. If NULL is specified, no value is retrieved for this parameter.</param>
            <param name="tag2">Contains the second label for subsequent drawing operations. This parameter is passed uninitialized. If NULL is specified, no value is retrieved for this parameter.</param>
        </member>
        <member name="M:CRenderTarget.GetPixelSize">
            <summary>
Returns the size of the render target in device pixels</summary>
            <returns> 
The size of the render target in device pixels</returns>
        </member>
        <member name="M:CRenderTarget.GetPixelFormat">
            <summary>
Retrieves the pixel format and alpha mode of the render target</summary>
            <returns> 
The pixel format and alpha mode of the render target</returns>
        </member>
        <member name="M:CRenderTarget.GetDpi">
            <summary>
Returns the render target's dots per inch (DPI)</summary>
            <returns> 
The render target's dots per inch (DPI).</returns>
        </member>
        <member name="M:CRenderTarget.SetDpi(CD2DSizeF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets the dots per inch (DPI) of the render target.</summary>
            <param name="sizeDPI">A value greater than or equal to zero that specifies the horizontal/verticalDPI of the render target.</param>
        </member>
        <member name="M:CRenderTarget.GetSize">
            <summary>
Returns the size of the render target in device-independent pixels</summary>
            <returns> 
The current size of the render target in device-independent pixels</returns>
        </member>
        <member name="M:CRenderTarget.op_Implicit~ID2D1RenderTarget*">
            <summary>
Returns ID2D1RenderTarget interface</summary>
            <returns> 
Pointer to an ID2D1RenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CRenderTarget.GetRenderTarget">
            <summary>
Returns ID2D1RenderTarget interface</summary>
            <returns> 
Pointer to an ID2D1RenderTarget interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CRenderTarget.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CRenderTarget.Destroy(System.Int32)">
            <summary>
Deletes one or more resources</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE</returns>
            <param name="bDeleteResources">If bDeleteResources is TRUE, all resources located in m_lstResources will be automatically destroyed.</param>
        </member>
        <member name="M:CRenderTarget.Dispose">
            <summary>
The destructor. Called when a render target object is being destroyed.
</summary>
        </member>
        <member name="M:CRenderTarget.#ctor">
            <summary>
Constructs a CRenderTarget object.</summary>
        </member>
        <member name="T:CRenderTarget">
            <summary>
ID2D1RenderTarget wrapper.
</summary>
        </member>
        <member name="F:CD2DMesh.m_pMesh">
            <summary>
A pointer to an ID2D1Mesh.
</summary>
        </member>
        <member name="M:CD2DMesh.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DMesh.Destroy">
            <summary>
Destroys a CD2DMesh object.</summary>
        </member>
        <member name="M:CD2DMesh.Create(CRenderTarget*)">
            <summary>
Creates a CD2DMesh.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DMesh.Open">
            <summary>
Opens the mesh for population.</summary>
            <returns>
A pointer to an ID2D1TessellationSink that is used to populate the mesh.</returns>
        </member>
        <member name="M:CD2DMesh.op_Implicit~ID2D1Mesh*">
            <summary>
Returns ID2D1Mesh interface</summary>
            <returns> 
Pointer to an ID2D1Mesh interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DMesh.Get">
            <summary>
Returns ID2D1Mesh interface</summary>
            <returns> 
Pointer to an ID2D1Mesh interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DMesh.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DMesh.Attach(ID2D1Mesh*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DMesh.Dispose">
            <summary>
The destructor. Called when a D2D mesh object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DMesh.#ctor(CRenderTarget*,System.Int32)">
            <summary>
Constructs a CD2DMesh object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DMesh">
            <summary>
ID2D1Mesh wrapper.
</summary>
        </member>
        <member name="F:CD2DGeometrySink.m_pSink">
            <summary>
A pointer to an ID2D1GeometrySink.
</summary>
        </member>
        <member name="M:CD2DGeometrySink.SetSegmentFlags(D2D1_PATH_SEGMENT)">
            <summary>
Specifies stroke and join options to be applied to new segments added to the geometry sink.</summary>
            <param name="vertexFlags">Stroke and join options to be applied to new segments added to the geometry sink.</param>
        </member>
        <member name="M:CD2DGeometrySink.SetFillMode(D2D1_FILL_MODE)">
            <summary>
Specifies the method used to determine which points are inside the geometry described by this geometry sink and which points are outside.</summary>
            <param name="fillMode">The method used to determine whether a given point is part of the geometry.</param>
        </member>
        <member name="M:CD2DGeometrySink.Close">
            <summary>
Closes the geometry sink</summary>
            <returns> 
Nonzero if successful; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DGeometrySink.AddLines(CArray&lt;CD2DPointF,CD2DPointF&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Creates a sequence of lines using the specified points and adds them to the geometry sink.</summary>
            <param name="points">An array of one or more points that describe the lines to draw. A line is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by BeginFigure) to the first point in the array. if the array contains additional points, a line is drawn from the first point to the second point in the array, from the second point to the third point, and so on. An array of a sequence of the end points of the lines to draw.</param>
        </member>
        <member name="M:CD2DGeometrySink.AddLine(CD2DPointF)">
            <summary>
Creates a line segment between the current point and the specified end point and adds it to the geometry sink.</summary>
            <param name="point">The end point of the line to draw.</param>
        </member>
        <member name="M:CD2DGeometrySink.AddQuadraticBeziers(CArray&lt;D2D1_QUADRATIC_BEZIER_SEGMENT,D2D1_QUADRATIC_BEZIER_SEGMENT&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Adds a sequence of quadratic Bezier segments as an array in a single call.</summary>
            <param name="beziers">An array of a sequence of quadratic Bezier segments.</param>
        </member>
        <member name="M:CD2DGeometrySink.AddQuadraticBezier(D2D1_QUADRATIC_BEZIER_SEGMENT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Creates a quadratic Bezier curve between the current point and the specified end point.</summary>
            <param name="bezier">A structure that describes the control point and the end point of the quadratic Bezier curve to add.</param>
        </member>
        <member name="M:CD2DGeometrySink.AddBeziers(CArray&lt;D2D1_BEZIER_SEGMENT,D2D1_BEZIER_SEGMENT&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Creates a sequence of cubic Bezier curves and adds them to the geometry sink.</summary>
            <param name="beziers">An array of Bezier segments that describes the Bezier curves to create. A curve is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by BeginFigure) to the end point of the first Bezier segment in the array. if the array contains additional Bezier segments, each subsequent Bezier segment uses the end point of the preceding Bezier segment as its start point.</param>
        </member>
        <member name="M:CD2DGeometrySink.AddBezier(D2D1_BEZIER_SEGMENT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Creates a cubic Bezier curve between the current point and the specified end point.</summary>
            <param name="bezier">A structure that describes the control points and end point of the Bezier curve to add.</param>
        </member>
        <member name="M:CD2DGeometrySink.AddArc(D2D1_ARC_SEGMENT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Adds a single arc to the path geometry</summary>
            <param name="arc">The arc segment to add to the figure</param>
        </member>
        <member name="M:CD2DGeometrySink.EndFigure(D2D1_FIGURE_END)">
            <summary>
Ends the current figure; optionally, closes it.</summary>
            <param name="figureEnd">A value that indicates whether the current figure is closed. If the figure is closed, a line is drawn between the current point and the start point specified by BeginFigure.</param>
        </member>
        <member name="M:CD2DGeometrySink.BeginFigure(CD2DPointF,D2D1_FIGURE_BEGIN)">
            <summary>
Starts a new figure at the specified point.</summary>
            <param name="startPoint">The point at which to begin the new figure.</param>
            <param name="figureBegin">Whether the new figure should be hollow or filled.</param>
        </member>
        <member name="M:CD2DGeometrySink.op_Implicit~ID2D1GeometrySink*">
            <summary>
Returns ID2D1GeometrySink interface</summary>
            <returns> 
Pointer to an ID2D1GeometrySink interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DGeometrySink.Get">
            <summary>
Returns ID2D1GeometrySink interface</summary>
            <returns> 
Pointer to an ID2D1GeometrySink interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DGeometrySink.IsValid">
            <summary>
Checks geometry sink validity</summary>
            <returns> 
TRUE if geometry sink is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DGeometrySink.Dispose">
            <summary>
The destructor. Called when a D2D geometry sink object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DGeometrySink.#ctor(CD2DPathGeometry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DGeometrySink object from CD2DPathGeometry object.</summary>
            <param name="pathGeometry">An existing CD2DPathGeometry object.</param>
        </member>
        <member name="T:CD2DGeometrySink">
            <summary>
ID2D1GeometrySink wrapper.
</summary>
        </member>
        <member name="F:CD2DPathGeometry.m_pPathGeometry">
            <summary>
A pointer to an ID2D1PathGeometry.
</summary>
        </member>
        <member name="M:CD2DPathGeometry.GetFigureCount">
            <summary>
Retrieves tthe number of figures in the path geometry.</summary>
            <returns> 
Returns the number of figures in the path geometry.</returns>
        </member>
        <member name="M:CD2DPathGeometry.GetSegmentCount">
            <summary>
Retrieves the number of segments in the path geometry.</summary>
            <returns> 
Returns the number of segments in the path geometry.</returns>
        </member>
        <member name="M:CD2DPathGeometry.Stream(ID2D1GeometrySink*)">
            <summary>
Copies the contents of the path geometry to the specified ID2D1GeometrySink.</summary>
            <returns>
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="geometrySink">The sink to which the path geometry's contents are copied. Modifying this sink does not change the contents of this path geometry.</param>
        </member>
        <member name="M:CD2DPathGeometry.Open">
            <summary>
Retrieves the geometry sink that is used to populate the path geometry with figures and segments.</summary>
            <returns>
A pointer to the ID2D1GeometrySink that is used to populate the path geometry with figures and segments.</returns>
        </member>
        <member name="M:CD2DPathGeometry.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DPathGeometry.Attach(ID2D1PathGeometry*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DPathGeometry.Destroy">
            <summary>
Destroys a CD2DPathGeometry object.</summary>
        </member>
        <member name="M:CD2DPathGeometry.Create(CRenderTarget*)">
            <summary>
Creates a CD2DPathGeometry.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DPathGeometry.#ctor(CRenderTarget*,System.Int32)">
            <summary>
Constructs a CD2DPathGeometry object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DPathGeometry">
            <summary>
ID2D1PathGeometry wrapper.
</summary>
        </member>
        <member name="F:CD2DGeometry.m_pGeometry">
            <summary>
A pointer to an ID2D1Geometry.
</summary>
        </member>
        <member name="M:CD2DGeometry.Widen(System.Single,ID2D1StrokeStyle*,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ID2D1SimplifiedGeometrySink*,System.Single)">
            <summary>
Widens the geometry by the specified stroke and writes the result to an ID2D1SimplifiedGeometrySink after it has been transformed by the specified matrix and flattened using the specified tolerance.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="strokeWidth">The amount by which to widen the geometry.</param>
            <param name="strokeStyle">The style of stroke to apply to the geometry, or NULL.</param>
            <param name="worldTransform">The transform to apply to the geometry after widening it.</param>
            <param name="geometrySink">The ID2D1SimplifiedGeometrySink to which the widened geometry is appended.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.Tessellate(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ID2D1TessellationSink*,System.Single)">
            <summary>
Creates a set of clockwise-wound triangles that cover the geometry after it has been transformed using the specified matrix and flattened using the specified tolerance.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="worldTransform">The transform to apply to this geometry, or NULL.</param>
            <param name="tessellationSink">The ID2D1TessellationSink to which the tessellated is appended.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.Simplify(D2D1_GEOMETRY_SIMPLIFICATION_OPTION,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ID2D1SimplifiedGeometrySink*,System.Single)">
            <summary>
Creates a simplified version of the geometry that contains only lines and (optionally) cubic Bezier curves and writes the result to an ID2D1SimplifiedGeometrySink.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="simplificationOption">A value that specifies whether the simplified geometry should contain curves.</param>
            <param name="worldTransform">The transform to apply to the simplified geometry.</param>
            <param name="geometrySink">The ID2D1SimplifiedGeometrySink to which the simplified geometry is appended.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.Outline(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ID2D1SimplifiedGeometrySink*,System.Single)">
            <summary>
Computes the outline of the geometry and writes the result to an ID2D1SimplifiedGeometrySink.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="worldTransform">The transform to apply to the geometry outline.</param>
            <param name="geometrySink">The ID2D1SimplifiedGeometrySink to which the geometry transformed outline is appended.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.StrokeContainsPoint(CD2DPointF,System.Single,ID2D1StrokeStyle*,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*,System.Single)">
            <summary>
Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="point">The point to test for containment.</param>
            <param name="strokeWidth">The thickness of the stroke to apply.</param>
            <param name="strokeStyle">The style of the stroke to apply.</param>
            <param name="worldTransform">The transform to apply to the stroked geometry.</param>
            <param name="contains">When this method returns, contains a boolean value set to TRUE if the geometry's stroke contains the specified point; otherwise, FALSE. You must allocate storage for this parameter.</param>
            <param name="flatteningTolerance">The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the stroke by less than the tolerance are still considered inside. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.FillContainsPoint(CD2DPointF,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*,System.Single)">
            <summary>
Indicates whether the area filled by the geometry would contain the specified point given the specified flattening tolerance.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="point">The point to test.</param>
            <param name="worldTransform">The transform to apply to the geometry prior to testing for containment.</param>
            <param name="contains">When this method returns, contains a bool value that is TRUE if the area filled by the geometry contains point; otherwise, FALSE. You must allocate storage for this parameter.</param>
            <param name="flatteningTolerance">The numeric accuracy with which the precise geometric path and path intersection is calculated. Points missing the fill by less than the tolerance are still considered inside. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.GetWidenedBounds(System.Single,ID2D1StrokeStyle*,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DRectF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
            <summary>
Gets the bounds of the geometry after it has been widened by the specified stroke width and style and transformed by the specified matrix.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="strokeWidth">The amount by which to widen the geometry by stroking its outline.</param>
            <param name="strokeStyle">The style of the stroke that widens the geometry.</param>
            <param name="worldTransform">A transform to apply to the geometry after the geometry is transformed and after the geometry has been stroked.</param>
            <param name="bounds">When this method returns, contains the bounds of the widened geometry. You must allocate storage for this parameter.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.GetBounds(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DRectF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Retrieves the bounds of the geometry.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="worldTransform">The transform to apply to this geometry before calculating its bounds.</param>
            <param name="bounds">When this method returns, contains the bounds of this geometry. If the bounds are empty, this will be a rect where bounds.left is greater than bounds.right. You must allocate storage for this parameter.</param>
        </member>
        <member name="M:CD2DGeometry.ComputePointAtLength(System.Single,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DPointF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DPointF*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
            <summary>
Calculates the point and tangent vector at the specified distance along the geometry after it has been transformed by the specified matrix and flattened using the specified tolerance.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="length">The distance along the geometry of the point and tangent to find. If this distance is less then 0, this method calculates the first point in the geometry. If this distance is greater than the length of the geometry, this method calculates the last point in the geometry.</param>
            <param name="worldTransform">The transform to apply to the geometry before calculating the specified point and tangent.</param>
            <param name="point">The location at the specified distance along the geometry. If the geometry is empty, this point contains NaN as its x and y values.</param>
            <param name="unitTangentVector">When this method returns, contains a pointer to the tangent vector at the specified distance along the geometry. If the geometry is empty, this vector contains NaN as its x and y values. You must allocate storage for this parameter.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.ComputeLength(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
            <summary>
Calculates the length of the geometry as though each segment were unrolled into a line.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="worldTransform">The transform to apply to the geometry before calculating its length.</param>
            <param name="length">When this method returns, contains a pointer to the length of the geometry. For closed geometries, the length includes an implicit closing segment. You must allocate storage for this parameter.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.ComputeArea(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
            <summary>
Computes the area of the geometry after it has been transformed by the specified matrix and flattened using the specified tolerance.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="worldTransform">The transform to apply to this geometry before computing its area.</param>
            <param name="area">When this method returns, contains a pointer to the area of the transformed, flattened version of this geometry. You must allocate storage for this parameter.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometry. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.CompareWithGeometry(CD2DGeometry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single)">
            <summary>
Describes the intersection between this geometry and the specified geometry. The comparison is performed using the specified flattening tolerance.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="inputGeometry">The geometry to test.</param>
            <param name="inputGeometryTransform">The transform to apply to inputGeometry.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution. </param>
        </member>
        <member name="M:CD2DGeometry.CombineWithGeometry(CD2DGeometry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,D2D1_COMBINE_MODE,D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,ID2D1SimplifiedGeometrySink*,System.Single)">
            <summary>
Combines this geometry with the specified geometry and stores the result in an ID2D1SimplifiedGeometrySink.</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE.</returns>
            <param name="inputGeometry">The geometry to combine with this instance.</param>
            <param name="combineMode">The type of combine operation to perform.</param>
            <param name="inputGeometryTransform">The transform to apply to inputGeometry before combining.</param>
            <param name="geometrySink">The result of the combine operation.</param>
            <param name="flatteningTolerance">The maximum bounds on the distance between points in the polygonal approximation of the geometries. Smaller values produce more accurate results but cause slower execution.</param>
        </member>
        <member name="M:CD2DGeometry.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DGeometry.Destroy">
            <summary>
Destroys a CD2DGeometry object.</summary>
        </member>
        <member name="M:CD2DGeometry.op_Implicit~ID2D1Geometry*">
            <summary>
Returns ID2D1Geometry interface</summary>
            <returns> 
Pointer to an ID2D1Geometry interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DGeometry.Get">
            <summary>
Returns ID2D1Geometry interface</summary>
            <returns> 
Pointer to an ID2D1Geometry interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DGeometry.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DGeometry.Attach(ID2D1Geometry*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DGeometry.Dispose">
            <summary>
The destructor. Called when a D2D geometry object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DGeometry.#ctor(CRenderTarget*,System.Int32)">
            <summary>
Constructs a CD2DGeometry object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DGeometry">
            <summary>
ID2D1Geometry wrapper.
</summary>
        </member>
        <member name="F:CD2DTextLayout.m_pTextLayout">
            <summary>
A pointer to an IDWriteTextLayout.
</summary>
        </member>
        <member name="M:CD2DTextLayout.GetLocaleName(System.UInt32,DWRITE_TEXT_RANGE*)">
            <summary>
Gets the locale name of the text at the specified position.</summary>
            <returns>
CString object that contains the current locale name.</returns>
            <param name="currentPosition">The position of the text to inspect.</param>
            <param name="textRange">The range of text that has the same formatting as the text at the position specified by currentPosition. This means the run has the exact formatting as the position specified, including but not limited to the locale name.</param>
        </member>
        <member name="M:CD2DTextLayout.GetFontFamilyName(System.UInt32,DWRITE_TEXT_RANGE*)">
            <summary>
Copies the font family name of the text at the specified position.</summary>
            <returns>
CString object that contains the current font family name.</returns>
            <param name="currentPosition">The position of the text to examine.</param>
            <param name="textRange">The range of text that has the same formatting as the text at the position specified by currentPosition. This means the run has the exact formatting as the position specified, including but not limited to the font family name.</param>
        </member>
        <member name="M:CD2DTextLayout.SetLocaleName(System.Char!System.Runtime.CompilerServices.IsConst*,DWRITE_TEXT_RANGE)">
            <summary>
Sets the locale name for text within a specified text range</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE</returns>
            <param name="pwzLocaleName">A null-terminated locale name string</param>
            <param name="textRange">Text range to which this change applies</param>
        </member>
        <member name="M:CD2DTextLayout.SetFontFamilyName(System.Char!System.Runtime.CompilerServices.IsConst*,DWRITE_TEXT_RANGE)">
            <summary>
Sets null-terminated font family name for text within a specified text range</summary>
            <returns> 
If the method succeeds, it returns TRUE. Otherwise, it returns FALSE</returns>
            <param name="pwzFontFamilyName">The font family name that applies to the entire text string within the range specified by textRange</param>
            <param name="textRange">Text range to which this change applies</param>
        </member>
        <member name="M:CD2DTextLayout.op_Implicit~IDWriteTextLayout*">
            <summary>
Returns IDWriteTextLayout interface</summary>
            <returns>
Pointer to an IDWriteTextLayout interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DTextLayout.Get">
            <summary>
Returns IDWriteTextLayout interface</summary>
            <returns>
Pointer to an IDWriteTextLayout interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DTextLayout.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DTextLayout.Destroy">
            <summary>
Destroys a CD2DTextLayout object.</summary>
        </member>
        <member name="M:CD2DTextLayout.Create(CRenderTarget*)">
            <summary>
Creates a CD2DTextLayout.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DTextLayout.ReCreate(CRenderTarget*)">
            <summary>
Re-creates a CD2DTextLayout.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DTextLayout.Dispose">
            <summary>
The destructor. Called when a D2D text layout object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DTextLayout.#ctor(CRenderTarget*,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DTextFormat*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DSizeF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary>
Constructs a CD2DTextLayout object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="strText">A CString object that contains the string to create a new CD2DTextLayout object from.</param>
            <param name="textFormat">A CString object that contains the format to apply to the string.</param>
            <param name="sizeMax">The size of the layout box.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DTextLayout">
            <summary>
IDWriteTextLayout wrapper.
</summary>
        </member>
        <member name="F:CD2DTextFormat.m_pTextFormat">
            <summary>
A pointer to an IDWriteTextFormat.
</summary>
        </member>
        <member name="M:CD2DTextFormat.GetLocaleName">
            <summary>
Gets a copy of the locale name.</summary>
            <returns>
CString object that contains the current locale name.</returns>
        </member>
        <member name="M:CD2DTextFormat.GetFontFamilyName">
            <summary>
Gets a copy of the font family name.</summary>
            <returns>
CString object that contains the current font family name.</returns>
        </member>
        <member name="M:CD2DTextFormat.op_Implicit~IDWriteTextFormat*">
            <summary>
Returns IDWriteTextFormat interface</summary>
            <returns>
Pointer to an IDWriteTextFormat interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DTextFormat.Get">
            <summary>
Returns IDWriteTextFormat interface</summary>
            <returns> 
Pointer to an IDWriteTextFormat interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DTextFormat.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DTextFormat.Destroy">
            <summary>
Destroys a CD2DTextFormat object.</summary>
        </member>
        <member name="M:CD2DTextFormat.Create(CRenderTarget*)">
            <summary>
Creates a CD2DTextFormat.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DTextFormat.ReCreate(CRenderTarget*)">
            <summary>
Re-creates a CD2DTextFormat.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DTextFormat.Dispose">
            <summary>
The destructor. Called when a D2D text format object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DTextFormat.#ctor(CRenderTarget*,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Single,DWRITE_FONT_WEIGHT,DWRITE_FONT_STYLE,DWRITE_FONT_STRETCH,ATL.CStringT&lt;System.Char,StrTraitMFC_DLL&lt;System.Char,ATL.ChTraitsCRT{System.Char}&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IDWriteFontCollection*,System.Int32)">
            <summary>
Constructs a CD2DTextFormat object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="strFontFamilyName">A CString object that contains the name of the font family.</param>
            <param name="fontSize">The logical size of the font in DIP ("device-independent pixel") units. A DIPequals 1/96 inch.</param>
            <param name="fontWeight">A value that indicates the font weight for the text object.</param>
            <param name="fontStyle">A value that indicates the font style for the text object.</param>
            <param name="fontStretch">A value that indicates the font stretch for the text object.</param>
            <param name="strFontLocale">A CString object that contains the locale name.</param>
            <param name="pFontCollection">A pointer to a font collection object. When this is NULL, indicates the system font collection.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DTextFormat">
            <summary>
IDWriteTextFormat wrapper.
</summary>
        </member>
        <member name="F:CD2DRadialGradientBrush.m_pRadialGradientBrush">
            <summary>
A pointer to an ID2D1RadialGradientBrush.
</summary>
        </member>
        <member name="F:CD2DRadialGradientBrush.m_RadialGradientBrushProperties">
            <summary>
The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.
</summary>
        </member>
        <member name="M:CD2DRadialGradientBrush.GetRadiusY">
            <summary>
Retrieves the y-radius of the gradient ellipse</summary>
            <returns> 
The y-radius of the gradient ellipse. This value is expressed in the brush's coordinate space</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.GetRadiusX">
            <summary>
Retrieves the x-radius of the gradient ellipse</summary>
            <returns> 
The x-radius of the gradient ellipse. This value is expressed in the brush's coordinate space</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.GetGradientOriginOffset">
            <summary>
Retrieves the offset of the gradient origin relative to the gradient ellipse's center</summary>
            <returns> 
The offset of the gradient origin from the center of the gradient ellipse. This value is expressed in the brush's coordinate space</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.GetCenter">
            <summary>
Retrieves the center of the gradient ellipse</summary>
            <returns> 
The center of the gradient ellipse. This value is expressed in the brush's coordinate space</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.SetRadiusY(System.Single)">
            <summary>
Specifies the y-radius of the gradient ellipse, in the brush's coordinate space</summary>
            <param name="radiusY">The y-radius of the gradient ellipse. This value is in the brush's coordinate space</param>
        </member>
        <member name="M:CD2DRadialGradientBrush.SetRadiusX(System.Single)">
            <summary>
Specifies the x-radius of the gradient ellipse, in the brush's coordinate space</summary>
            <param name="radiusX">The x-radius of the gradient ellipse. This value is in the brush's coordinate space</param>
        </member>
        <member name="M:CD2DRadialGradientBrush.SetGradientOriginOffset(CD2DPointF)">
            <summary>
Specifies the offset of the gradient origin relative to the gradient ellipse's center</summary>
            <param name="gradientOriginOffset">The offset of the gradient origin from the center of the gradient ellipse</param>
        </member>
        <member name="M:CD2DRadialGradientBrush.SetCenter(CD2DPointF)">
            <summary>
Specifies the center of the gradient ellipse in the brush's coordinate space</summary>
            <param name="point">The center of the gradient ellipse, in the brush's coordinate space</param>
        </member>
        <member name="M:CD2DRadialGradientBrush.op_Implicit~ID2D1RadialGradientBrush*">
            <summary>
Returns ID2D1RadialGradientBrush interface</summary>
            <returns> 
Pointer to an ID2D1RadialGradientBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.Get">
            <summary>
Returns ID2D1RadialGradientBrush interface</summary>
            <returns> 
Pointer to an ID2D1RadialGradientBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DRadialGradientBrush.Attach(ID2D1RadialGradientBrush*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DRadialGradientBrush.Destroy">
            <summary>
Destroys a CD2DRadialGradientBrush object.</summary>
        </member>
        <member name="M:CD2DRadialGradientBrush.Create(CRenderTarget*)">
            <summary>
Creates a CD2DRadialGradientBrush.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DRadialGradientBrush.Dispose">
            <summary>
The destructor. Called when a D2D radial gradient brush object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DRadialGradientBrush.#ctor(CRenderTarget*,D2D1_GRADIENT_STOP!System.Runtime.CompilerServices.IsConst*,System.UInt32,D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES,D2D1_GAMMA,D2D1_EXTEND_MODE,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DLinearGradientBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="gradientStops">A pointer to an array of D2D1_GRADIENT_STOP structures.</param>
            <param name="gradientStopsCount">A value greater than or equal to 1 that specifies the number of gradient stops in the gradientStops array.</param>
            <param name="RadialGradientBrushProperties">The center, gradient origin offset, and x-radius and y-radius of the brush's gradient.</param>
            <param name="colorInterpolationGamma">The space in which color interpolation between the gradient stops is performed.</param>
            <param name="extendMode">The behavior of the gradient outside the [0,1] normalized range.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DRadialGradientBrush">
            <summary>
ID2D1RadialGradientBrush wrapper.
</summary>
        </member>
        <member name="F:CD2DLinearGradientBrush.m_pLinearGradientBrush">
            <summary>
A pointer to an ID2D1LinearGradientBrush.
</summary>
        </member>
        <member name="F:CD2DLinearGradientBrush.m_LinearGradientBrushProperties">
            <summary>
The start and end points of the gradient.
</summary>
        </member>
        <member name="M:CD2DLinearGradientBrush.GetEndPoint">
            <summary>
Retrieves the ending coordinates of the linear gradient</summary>
            <returns> 
The ending two-dimensional coordinates of the linear gradient, in the brush's coordinate space</returns>
        </member>
        <member name="M:CD2DLinearGradientBrush.GetStartPoint">
            <summary>
Retrieves the starting coordinates of the linear gradient</summary>
            <returns> 
The starting two-dimensional coordinates of the linear gradient, in the brush's coordinate space</returns>
        </member>
        <member name="M:CD2DLinearGradientBrush.SetEndPoint(CD2DPointF)">
            <summary>
Sets the ending coordinates of the linear gradient in the brush's coordinate space</summary>
            <param name="point">The ending two-dimensional coordinates of the linear gradient, in the brush's coordinate space</param>
        </member>
        <member name="M:CD2DLinearGradientBrush.SetStartPoint(CD2DPointF)">
            <summary>
Sets the starting coordinates of the linear gradient in the brush's coordinate space</summary>
            <param name="point">The starting two-dimensional coordinates of the linear gradient, in the brush's coordinate space</param>
        </member>
        <member name="M:CD2DLinearGradientBrush.op_Implicit~ID2D1LinearGradientBrush*">
            <summary>
Returns ID2D1LinearGradientBrush interface</summary>
            <returns> 
Pointer to an ID2D1LinearGradientBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DLinearGradientBrush.Get">
            <summary>
Returns ID2D1LinearGradientBrush interface</summary>
            <returns> 
Pointer to an ID2D1LinearGradientBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DLinearGradientBrush.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DLinearGradientBrush.Attach(ID2D1LinearGradientBrush*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DLinearGradientBrush.Destroy">
            <summary>
Destroys a CD2DLinearGradientBrush object.</summary>
        </member>
        <member name="M:CD2DLinearGradientBrush.Create(CRenderTarget*)">
            <summary>
Creates a CD2DLinearGradientBrush.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DLinearGradientBrush.Dispose">
            <summary>
The destructor. Called when a D2D linear gradient brush object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DLinearGradientBrush.#ctor(CRenderTarget*,D2D1_GRADIENT_STOP!System.Runtime.CompilerServices.IsConst*,System.UInt32,D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES,D2D1_GAMMA,D2D1_EXTEND_MODE,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DLinearGradientBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="gradientStops">A pointer to an array of D2D1_GRADIENT_STOP structures.</param>
            <param name="gradientStopsCount">A value greater than or equal to 1 that specifies the number of gradient stops in the gradientStops array.</param>
            <param name="LinearGradientBrushProperties">The start and end points of the gradient.</param>
            <param name="colorInterpolationGamma">The space in which color interpolation between the gradient stops is performed.</param>
            <param name="extendMode">The behavior of the gradient outside the [0,1] normalized range.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DLinearGradientBrush">
            <summary>
ID2D1LinearGradientBrush wrapper.
</summary>
        </member>
        <member name="F:CD2DGradientBrush.m_pGradientStops">
            <summary>
A pointer to an array of D2D1_GRADIENT_STOP structures.
</summary>
        </member>
        <member name="F:CD2DGradientBrush.m_extendMode">
            <summary>
The behavior of the gradient outside the [0,1] normalized range.
</summary>
        </member>
        <member name="F:CD2DGradientBrush.m_colorInterpolationGamma">
            <summary>
The space in which color interpolation between the gradient stops is performed.
</summary>
        </member>
        <member name="F:CD2DGradientBrush.m_arGradientStops">
            <summary>
Array of the D2D1_GRADIENT_STOP structures.
</summary>
        </member>
        <member name="M:CD2DGradientBrush.Destroy">
            <summary>
Destroys a CD2DGradientBrush object.</summary>
        </member>
        <member name="M:CD2DGradientBrush.Dispose">
            <summary>
The destructor. Called when a D2D gradient brush object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DGradientBrush.#ctor(CRenderTarget*,D2D1_GRADIENT_STOP!System.Runtime.CompilerServices.IsConst*,System.UInt32,D2D1_GAMMA,D2D1_EXTEND_MODE,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DGradientBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="gradientStops">A pointer to an array of D2D1_GRADIENT_STOP structures.</param>
            <param name="gradientStopsCount">A value greater than or equal to 1 that specifies the number of gradient stops in the gradientStops array.</param>
            <param name="colorInterpolationGamma">The space in which color interpolation between the gradient stops is performed.</param>
            <param name="extendMode">The behavior of the gradient outside the [0,1] normalized range.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DGradientBrush">
            <summary>
The base class of CD2DLinearGradientBrush and CD2DRadialGradientBrush classes.
</summary>
        </member>
        <member name="F:CD2DBitmapBrush.m_pBitmapBrushProperties">
            <summary>
Bitmap brush properties.
</summary>
        </member>
        <member name="F:CD2DBitmapBrush.m_pBitmapBrush">
            <summary>
Stores a pointer to an ID2D1BitmapBrush object.
</summary>
        </member>
        <member name="F:CD2DBitmapBrush.m_pBitmap">
            <summary>
Stores a pointer to a CD2DBitmap object.
</summary>
        </member>
        <member name="M:CD2DBitmapBrush.CommonInit(D2D1_BITMAP_BRUSH_PROPERTIES*)">
            <summary>
Initializes the object</summary>
            <param name="pBitmapBrushProperties">A pointer to the bitmap brush properties.</param>
        </member>
        <member name="M:CD2DBitmapBrush.Destroy">
            <summary>
Destroys a CD2DBitmapBrush object.</summary>
        </member>
        <member name="M:CD2DBitmapBrush.Create(CRenderTarget*)">
            <summary>
Creates a CD2DBitmapBrush.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DBitmapBrush.GetInterpolationMode">
            <summary>
Gets the interpolation method used when the brush bitmap is scaled or rotated</summary>
            <returns> 
The interpolation method used when the brush bitmap is scaled or rotated</returns>
        </member>
        <member name="M:CD2DBitmapBrush.GetExtendModeY">
            <summary>
Gets the method by which the brush vertically tiles those areas that extend past its bitmap</summary>
            <returns> 
A value that specifies how the brush vertically tiles those areas that extend past its bitmap</returns>
        </member>
        <member name="M:CD2DBitmapBrush.GetExtendModeX">
            <summary>
Gets the method by which the brush horizontally tiles those areas that extend past its bitmap</summary>
            <returns> 
A value that specifies how the brush horizontally tiles those areas that extend past its bitmap</returns>
        </member>
        <member name="M:CD2DBitmapBrush.SetBitmap(CD2DBitmap*)">
            <summary>
Specifies the bitmap source that this brush uses to paint</summary>
            <param name="pBitmap">The bitmap source used by the brush</param>
        </member>
        <member name="M:CD2DBitmapBrush.SetInterpolationMode(D2D1_BITMAP_INTERPOLATION_MODE)">
            <summary>
Specifies the interpolation mode used when the brush bitmap is scaled or rotated</summary>
            <param name="interpolationMode">The interpolation mode used when the brush bitmap is scaled or rotated</param>
        </member>
        <member name="M:CD2DBitmapBrush.SetExtendModeY(D2D1_EXTEND_MODE)">
            <summary>
Specifies how the brush vertically tiles those areas that extend past its bitmap</summary>
            <param name="extendModeY">A value that specifies how the brush vertically tiles those areas that extend past its bitmap</param>
        </member>
        <member name="M:CD2DBitmapBrush.SetExtendModeX(D2D1_EXTEND_MODE)">
            <summary>
Specifies how the brush horizontally tiles those areas that extend past its bitmap</summary>
            <param name="extendModeX">A value that specifies how the brush horizontally tiles those areas that extend past its bitmap</param>
        </member>
        <member name="M:CD2DBitmapBrush.GetBitmap">
            <summary>
Gets the bitmap source that this brush uses to paint</summary>
            <returns> 
Pointer to an CD2DBitmap object or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBitmapBrush.op_Implicit~ID2D1BitmapBrush*">
            <summary>
Returns ID2D1BitmapBrush interface</summary>
            <returns> 
Pointer to an ID2D1BitmapBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBitmapBrush.Get">
            <summary>
Returns ID2D1BitmapBrush interface</summary>
            <returns> 
Pointer to an ID2D1BitmapBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBitmapBrush.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DBitmapBrush.Attach(ID2D1BitmapBrush*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DBitmapBrush.Dispose">
            <summary>
The destructor. Called when a D2D bitmap brush object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DBitmapBrush.#ctor(CRenderTarget*,System.Char!System.Runtime.CompilerServices.IsConst*,CD2DSizeU,D2D1_BITMAP_BRUSH_PROPERTIES*,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DBitmapBrush object from file.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="lpszImagePath">Pointer to a null-terminated string that contains the name of file.</param>
            <param name="sizeDest">Destination size of the bitmap.</param>
            <param name="pBitmapBrushProperties">A pointer to the extend modes and the interpolation mode of a bitmap brush.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="M:CD2DBitmapBrush.#ctor(CRenderTarget*,System.UInt32,System.Char!System.Runtime.CompilerServices.IsConst*,CD2DSizeU,D2D1_BITMAP_BRUSH_PROPERTIES*,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DBitmapBrush object from resource.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="uiResID">The resource ID number of the resource.</param>
            <param name="lpszType">Pointer to a null-terminated string that contains the resource type.</param>
            <param name="sizeDest">Destination size of the bitmap.</param>
            <param name="pBitmapBrushProperties">A pointer to the extend modes and the interpolation mode of a bitmap brush.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="M:CD2DBitmapBrush.#ctor(CRenderTarget*,D2D1_BITMAP_BRUSH_PROPERTIES*,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DBitmapBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="pBitmapBrushProperties">A pointer to the extend modes and the interpolation mode of a bitmap brush.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DBitmapBrush">
            <summary>
ID2D1BitmapBrush wrapper.
</summary>
        </member>
        <member name="F:CD2DSolidColorBrush.m_colorSolid">
            <summary>
Brush solid color.
</summary>
        </member>
        <member name="F:CD2DSolidColorBrush.m_pSolidColorBrush">
            <summary>
Stores a pointer to an ID2D1SolidColorBrush object.
</summary>
        </member>
        <member name="M:CD2DSolidColorBrush.Destroy">
            <summary>
Destroys a CD2DSolidColorBrush object.</summary>
        </member>
        <member name="M:CD2DSolidColorBrush.Create(CRenderTarget*)">
            <summary>
Creates a CD2DSolidColorBrush.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DSolidColorBrush.GetColor">
            <summary>
Retrieves the color of the solid color brush</summary>
            <returns> 
The color of this solid color brush</returns>
        </member>
        <member name="M:CD2DSolidColorBrush.SetColor(_D3DCOLORVALUE)">
            <summary>
Specifies the color of this solid color brush</summary>
            <param name="color">The color of this solid color brush</param>
        </member>
        <member name="M:CD2DSolidColorBrush.op_Implicit~ID2D1SolidColorBrush*">
            <summary>
Returns ID2D1SolidColorBrush interface</summary>
            <returns> 
Pointer to an ID2D1SolidColorBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DSolidColorBrush.Get">
            <summary>
Returns ID2D1SolidColorBrush interface</summary>
            <returns> 
Pointer to an ID2D1SolidColorBrush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DSolidColorBrush.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DSolidColorBrush.Attach(ID2D1SolidColorBrush*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DSolidColorBrush.Dispose">
            <summary>
The destructor. Called when a D2D solid brush object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DSolidColorBrush.#ctor(CRenderTarget*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int32,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DSolidColorBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="color">The red, green, and blue values of the brush's color.</param>
            <param name="nAlpha">The opacity of the brush's color.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="M:CD2DSolidColorBrush.#ctor(CRenderTarget*,_D3DCOLORVALUE,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DSolidColorBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="color">The red, green, blue, and alpha values of the brush's color.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DSolidColorBrush">
            <summary>
ID2D1SolidColorBrush wrapper.
</summary>
        </member>
        <member name="F:CD2DBrush.m_pBrushProperties">
            <summary>
Brush properties.
</summary>
        </member>
        <member name="F:CD2DBrush.m_pBrush">
            <summary>
Stores a pointer to an ID2D1Brush object.
</summary>
        </member>
        <member name="M:CD2DBrush.GetTransform(D2D_MATRIX_3X2_F*)">
            <summary>
Gets the current transform of the render target</summary>
            <param name="transform">When this returns, contains the current transform of the render target. This parameter is passed uninitialized</param>
        </member>
        <member name="M:CD2DBrush.SetTransform(D2D_MATRIX_3X2_F!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Applies the specified transform to the render target, replacing the existing transformation. All subsequent drawing operations occur in the transformed space</summary>
            <param name="transform">The transform to apply to the render target</param>
        </member>
        <member name="M:CD2DBrush.GetOpacity">
            <summary>
Gets the degree of opacity of this brush</summary>
            <returns> 
A value between zero and 1 that indicates the opacity of the brush. This value is a constant multiplier that linearly scales the alpha value of all pixels filled by the brush. The opacity values are clamped in the range 0 to 1 before they are multiplied together</returns>
        </member>
        <member name="M:CD2DBrush.SetOpacity(System.Single)">
            <summary>
Sets the degree of opacity of this brush</summary>
            <param name="opacity">A value between zero and 1 that indicates the opacity of the brush. This value is a constant multiplier that linearly scales the alpha value of all pixels filled by the brush. The opacity values are clamped in the range 0 to 1 before they are multiplied together</param>
        </member>
        <member name="M:CD2DBrush.Destroy">
            <summary>
Destroys a CD2DBrush object.</summary>
        </member>
        <member name="M:CD2DBrush.op_Implicit~ID2D1Brush*">
            <summary>
Returns ID2D1Brush interface</summary>
            <returns> 
Pointer to an ID2D1Brush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBrush.Get">
            <summary>
Returns ID2D1Brush interface</summary>
            <returns> 
Pointer to an ID2D1Brush interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBrush.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DBrush.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DBrush.Attach(ID2D1Brush*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DBrush.Dispose">
            <summary>
The destructor. Called when a D2D brush object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DBrush.#ctor(CRenderTarget*,CD2DBrushProperties*,System.Int32)">
            <summary>
Constructs a CD2DBrush object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="pBrushProperties">A pointer to the opacity and transformation of a brush.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DBrush">
            <summary>
ID2D1Brush wrapper.
</summary>
        </member>
        <member name="M:CD2DBrushProperties.CommonInit">
            <summary>
Initializes the object</summary>
        </member>
        <member name="M:CD2DBrushProperties.#ctor(D2D_MATRIX_3X2_F,System.Single)">
            <summary>
Creates a CD2D_BRUSH_PROPERTIES structure</summary>
            <param name="_transform">The transformation to apply to the brush</param>
            <param name="_opacity">The base opacity of the brush. The default value is 1.0.</param>
        </member>
        <member name="M:CD2DBrushProperties.#ctor(System.Single)">
            <summary>
Creates a CD2D_BRUSH_PROPERTIES structure</summary>
            <param name="_opacity">The base opacity of the brush. The default value is 1.0.</param>
        </member>
        <member name="M:CD2DBrushProperties.#ctor">
            <summary>
Creates a CD2D_BRUSH_PROPERTIES structure</summary>
        </member>
        <member name="T:CD2DBrushProperties">
            <summary>
D2D1_BRUSH_PROPERTIES wrapper.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_bAutoDestroyHBMP">
            <summary>
TRUE if m_hBmpSrc should be destroyed; otherwise FALSE.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_hBmpSrc">
            <summary>
Source bitmap handle.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_sizeDest">
            <summary>
Bitmap destination size.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_strPath">
            <summary>
Botmap file path.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_lpszType">
            <summary>
Resource type.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_uiResID">
            <summary>
Bitmap resource ID.
</summary>
        </member>
        <member name="F:CD2DBitmap.m_pBitmap">
            <summary>
Stores a pointer to an ID2D1Bitmap object.
</summary>
        </member>
        <member name="M:CD2DBitmap.Destroy">
            <summary>
Destroys a CD2DBitmap object.</summary>
        </member>
        <member name="M:CD2DBitmap.Create(CRenderTarget*)">
            <summary>
Creates a CD2DBitmap.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DBitmap.CommonInit">
            <summary>
Initializes the object</summary>
        </member>
        <member name="M:CD2DBitmap.op_Implicit~ID2D1Bitmap*">
            <summary>
Returns ID2D1Bitmap interface</summary>
            <returns> 
Pointer to an ID2D1Bitmap interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBitmap.Get">
            <summary>
Returns ID2D1Bitmap interface</summary>
            <returns> 
Pointer to an ID2D1Bitmap interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DBitmap.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DBitmap.CopyFromMemory(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32,CD2DRectU!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Copies the specified region from memory into the current bitmap</summary>
            <returns> 
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="srcData">The data to copy</param>
            <param name="pitch">The stride, or pitch, of the source bitmap stored in srcData. The stride is the byte count of a scanline (one row of pixels in memory). The stride can be computed from the following formula: pixel width * bytes per pixel + memory padding</param>
            <param name="destRect">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied</param>
        </member>
        <member name="M:CD2DBitmap.CopyFromRenderTarget(CRenderTarget!System.Runtime.CompilerServices.IsConst*,CD2DPointU!System.Runtime.CompilerServices.IsConst*,CD2DRectU!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Copies the specified region from the specified render target into the current bitmap</summary>
            <returns> 
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">The render target that contains the region to copy</param>
            <param name="destPoint">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied</param>
            <param name="srcRect">The area of renderTarget to copy</param>
        </member>
        <member name="M:CD2DBitmap.CopyFromBitmap(CD2DBitmap!System.Runtime.CompilerServices.IsConst*,CD2DPointU!System.Runtime.CompilerServices.IsConst*,CD2DRectU!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Copies the specified region from the specified bitmap into the current bitmap</summary>
            <returns> 
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pBitmap">The bitmap to copy from</param>
            <param name="destPoint">In the current bitmap, the upper-left corner of the area to which the region specified by srcRect is copied</param>
            <param name="srcRect">The area of bitmap to copy</param>
        </member>
        <member name="M:CD2DBitmap.GetDPI">
            <summary>
Return the dots per inch (DPI) of the bitmap</summary>
            <returns> 
The horizontal and vertical DPI of the bitmap.</returns>
        </member>
        <member name="M:CD2DBitmap.GetPixelFormat">
            <summary>
Retrieves the pixel format and alpha mode of the bitmap</summary>
            <returns> 
The pixel format and alpha mode of the bitmap.</returns>
        </member>
        <member name="M:CD2DBitmap.GetPixelSize">
            <summary>
Returns the size, in device-dependent units (pixels), of the bitmap</summary>
            <returns> 
The size, in pixels, of the bitmap..</returns>
        </member>
        <member name="M:CD2DBitmap.GetSize">
            <summary>
Returns the size, in device-independent pixels (DIPs), of the bitmap</summary>
            <returns> 
The size, in DIPs, of the bitmap.</returns>
        </member>
        <member name="M:CD2DBitmap.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DBitmap.Attach(ID2D1Bitmap*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DBitmap.Dispose">
            <summary>
The destructor. Called when a D2D bitmap object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DBitmap.#ctor(CRenderTarget*,System.Int32)">
            <summary>
Constructs a CD2DBitmap object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="M:CD2DBitmap.#ctor(CRenderTarget*,HBITMAP__*,CD2DSizeU,System.Int32)">
            <summary>
Constructs a CD2DBitmap object from HBITMAP.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="hbmpSrc">Handle to the bitmap.</param>
            <param name="sizeDest">Destination size of the bitmap.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="M:CD2DBitmap.#ctor(CRenderTarget*,System.Char!System.Runtime.CompilerServices.IsConst*,CD2DSizeU,System.Int32)">
            <summary>
Constructs a CD2DBitmap object from file.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="lpszPath">Pointer to a null-terminated string that contains the name of file.</param>
            <param name="sizeDest">Destination size of the bitmap.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="M:CD2DBitmap.#ctor(CRenderTarget*,System.UInt32,System.Char!System.Runtime.CompilerServices.IsConst*,CD2DSizeU,System.Int32)">
            <summary>
Constructs a CD2DBitmap object from resource.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="uiResID">The resource ID number of the resource.</param>
            <param name="lpszType">Pointer to a null-terminated string that contains the resource type.</param>
            <param name="sizeDest">Destination size of the bitmap.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DBitmap">
            <summary>
ID2D1Bitmap wrapper.
</summary>
        </member>
        <member name="F:CD2DLayer.m_pLayer">
            <summary>
Stores a pointer to an ID2D1Layer object.
</summary>
        </member>
        <member name="M:CD2DLayer.Destroy">
            <summary>
Destroys a CD2DLayer object.</summary>
        </member>
        <member name="M:CD2DLayer.Create(CRenderTarget*)">
            <summary>
Creates a CD2DLayer.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DLayer.Detach">
            <summary>
Detaches resource interface from the object</summary>
            <returns> 
Pointer to detached resource interface.</returns>
        </member>
        <member name="M:CD2DLayer.Attach(ID2D1Layer*)">
            <summary>
Attaches existing resource interface to the object</summary>
            <param name="pResource">Existing resource interface. Cannot be NULL</param>
        </member>
        <member name="M:CD2DLayer.op_Implicit~ID2D1Layer*">
            <summary>
Returns ID2D1Layer interface</summary>
            <returns> 
Pointer to an ID2D1Layer interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DLayer.Get">
            <summary>
Returns ID2D1Layer interface</summary>
            <returns> 
Pointer to an ID2D1Layer interface or NULL if object is not initialized yet.</returns>
        </member>
        <member name="M:CD2DLayer.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DLayer.GetSize">
            <summary>
Returns the size of the render target in device-independent pixels</summary>
            <returns> 
The current size of the render target in device-independent pixels</returns>
        </member>
        <member name="M:CD2DLayer.Dispose">
            <summary>
The destructor. Called when a D2D layer object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DLayer.#ctor(CRenderTarget*,System.Int32)">
            <summary>
Constructs a CD2DLayer object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DLayer">
            <summary>
ID2D1Layer wrapper.
</summary>
        </member>
        <member name="F:CD2DResource.m_pParentTarget">
            <summary>
Pointer to the parent CRenderTarget)</summary>
        </member>
        <member name="F:CD2DResource.m_bIsAutoDestroy">
            <summary>
Resource will be destoyed by owner (CRenderTarget)</summary>
        </member>
        <member name="M:CD2DResource.IsValid">
            <summary>
Checks resource validity</summary>
            <returns> 
TRUE if resource is valid; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DResource.Destroy">
            <summary>
Destroys a CD2DResource object.</summary>
        </member>
        <member name="M:CD2DResource.Create(CRenderTarget*)">
            <summary>
Creates a CD2DResource.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DResource.ReCreate(CRenderTarget*)">
            <summary>
Re-creates a CD2DResource.</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
            <param name="pRenderTarget">A pointer to the render target.</param>
        </member>
        <member name="M:CD2DResource.IsAutoDestroy">
            <summary>
Check auto destroy flag.</summary>
            <returns>
TRUE if the object will be destroyed by its owner; otherwise FALSE.</returns>
        </member>
        <member name="M:CD2DResource.Dispose">
            <summary>
The destructor. Called when a D2D resource object is being destroyed.
</summary>
        </member>
        <member name="M:CD2DResource.#ctor(CRenderTarget*,System.Int32)">
            <summary>
Constructs a CD2DResource object.</summary>
            <param name="pParentTarget">A pointer to the render target.</param>
            <param name="bAutoDestroy">Indicates that the object will be destroyed by owner (pParentTarget).</param>
        </member>
        <member name="T:CD2DResource">
            <summary>
An abstract class, which provides a interface for creating and managing D2D resources such as brushes, layers and texts.
</summary>
        </member>
        <member name="M:CD2DEllipse.#ctor(CD2DPointF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DSizeF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DEllipse from CD2DPointF and CD2DSizeF objects.</summary>
            <param name="ptCenter">The center point of the ellipse.</param>
            <param name="sizeRadius">The X-radius and Y-radius of the ellipse.</param>
        </member>
        <member name="M:CD2DEllipse.#ctor(D2D1_ELLIPSE!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DEllipse object from D2D1_ELLIPSE object.</summary>
            <param name="ellipse">source ellipse</param>
        </member>
        <member name="M:CD2DEllipse.#ctor(D2D1_ELLIPSE!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DEllipse object from D2D1_ELLIPSE object.</summary>
            <param name="ellipse">source ellipse</param>
        </member>
        <member name="M:CD2DEllipse.#ctor(CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DEllipse object from CD2DRectF object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="T:CD2DEllipse">
            <summary>
D2D1_ELLIPSE wrapper
</summary>
        </member>
        <member name="M:CD2DRoundedRect.#ctor(D2D1_ROUNDED_RECT!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DRoundedRect object from D2D1_ROUNDED_RECT object.</summary>
            <param name="rectIn">source rectangle</param>
        </member>
        <member name="M:CD2DRoundedRect.#ctor(D2D1_ROUNDED_RECT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DRoundedRect object from D2D1_ROUNDED_RECT object.</summary>
            <param name="rectIn">source rectangle</param>
        </member>
        <member name="M:CD2DRoundedRect.#ctor(CD2DRectF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CD2DSizeF!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DRoundedRect object from CD2DRectF object.</summary>
            <param name="rectIn">source rectangle</param>
            <param name="sizeRadius">radius size</param>
        </member>
        <member name="T:CD2DRoundedRect">
            <summary>
D2D1_ROUNDED_RECT wrapper
</summary>
        </member>
        <member name="M:CD2DRectU.op_Implicit~CRect">
            <summary>
Converts CD2DRectU to CRect object.</summary>
            <returns>
Current value of D2D rectangle.
</returns>
        </member>
        <member name="M:CD2DRectU.IsNull">
            <summary>
Returns a Boolean value that indicates whether an expression contains no valid data (Null).</summary>
            <returns>
TRUE if rectangle's top, left, bottom, and right values are all equal to 0; otherwise FALSE.
</returns>
        </member>
        <member name="M:CD2DRectU.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
Constructs a CD2DRectU object from four UINT32 values.</summary>
            <param name="uLeft">source left coordinate</param>
            <param name="uTop">source top coordinate</param>
            <param name="uRight">source right coordinate</param>
            <param name="uBottom">source bottom coordinate</param>
        </member>
        <member name="M:CD2DRectU.#ctor(D2D_RECT_U!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DRectU object from D2D1_RECT_U object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="M:CD2DRectU.#ctor(D2D_RECT_U!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DRectU object from D2D1_RECT_U object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="M:CD2DRectU.#ctor(CRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DRectU object from CRect object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="T:CD2DRectU">
            <summary>
D2D1_RECT_U wrapper
</summary>
        </member>
        <member name="M:CD2DRectF.op_Implicit~CRect">
            <summary>
Converts CD2DRectF to CRect object.</summary>
            <returns>
Current value of D2D rectangle.
</returns>
        </member>
        <member name="M:CD2DRectF.IsNull">
            <summary>
Returns a Boolean value that indicates whether an expression contains no valid data (Null).</summary>
            <returns>
TRUE if rectangle's top, left, bottom, and right values are all equal to 0; otherwise FALSE.
</returns>
        </member>
        <member name="M:CD2DRectF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
Constructs a CD2DRectF object from four FLOAT values.</summary>
            <param name="fLeft">source left coordinate</param>
            <param name="fTop">source top coordinate</param>
            <param name="fRight">source right coordinate</param>
            <param name="fBottom">source bottom coordinate</param>
        </member>
        <member name="M:CD2DRectF.#ctor(D2D_RECT_F!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DRectF object from D2D1_RECT_F object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="M:CD2DRectF.#ctor(D2D_RECT_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DRectF object from D2D1_RECT_F object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="M:CD2DRectF.#ctor(CRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DRectF object from CRect object.</summary>
            <param name="rect">source rectangle</param>
        </member>
        <member name="T:CD2DRectF">
            <summary>
D2D1_RECT_F wrapper
</summary>
        </member>
        <member name="M:CD2DSizeU.op_Implicit~CSize">
            <summary>
Converts CD2DSizeU to CSize object.</summary>
            <returns>
Current value of D2D size.
</returns>
        </member>
        <member name="M:CD2DSizeU.IsNull">
            <summary>
Returns a Boolean value that indicates whether an expression contains no valid data (Null).</summary>
            <returns>
TRUE if width and height are empty; otherwise FALSE.
</returns>
        </member>
        <member name="M:CD2DSizeU.#ctor(System.UInt32,System.UInt32)">
            <summary>
Constructs a CD2DSizeU object from two UINT32 values.</summary>
            <param name="cx">source width</param>
            <param name="cy">source height</param>
        </member>
        <member name="M:CD2DSizeU.#ctor(D2D_SIZE_U!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DSizeU object from D2D1_SIZE_U object.</summary>
            <param name="size">source size</param>
        </member>
        <member name="M:CD2DSizeU.#ctor(D2D_SIZE_U!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DSizeU object from D2D1_SIZE_U object.</summary>
            <param name="size">source size</param>
        </member>
        <member name="M:CD2DSizeU.#ctor(CSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DSizeU object from CSize object.</summary>
            <param name="size">source size</param>
        </member>
        <member name="T:CD2DSizeU">
            <summary>
D2D1_SIZE_U wrapper
</summary>
        </member>
        <member name="M:CD2DSizeF.op_Implicit~CSize">
            <summary>
Converts CD2DSizeF to CSize object.</summary>
            <returns>
Current value of D2D size.
</returns>
        </member>
        <member name="M:CD2DSizeF.IsNull">
            <summary>
Returns a Boolean value that indicates whether an expression contains no valid data (Null).</summary>
            <returns>
TRUE if width and height are empty; otherwise FALSE.
</returns>
        </member>
        <member name="M:CD2DSizeF.#ctor(System.Single,System.Single)">
            <summary>
Constructs a CD2DSizeF object from two FLOAT values.</summary>
            <param name="cx">source width</param>
            <param name="cy">source height</param>
        </member>
        <member name="M:CD2DSizeF.#ctor(D2D_SIZE_F!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DSizeF object from D2D1_SIZE_F object.</summary>
            <param name="size">source size</param>
        </member>
        <member name="M:CD2DSizeF.#ctor(D2D_SIZE_F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DSizeF object from D2D1_SIZE_F object.</summary>
            <param name="size">source size</param>
        </member>
        <member name="M:CD2DSizeF.#ctor(CSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DSizeF object from CSize object.</summary>
            <param name="size">source size</param>
        </member>
        <member name="T:CD2DSizeF">
            <summary>
D2D1_SIZE_F wrapper
</summary>
        </member>
        <member name="M:CD2DPointU.op_Implicit~CPoint">
            <summary>
Converts CD2DPointU to CPoint object.</summary>
            <returns>
Current value of D2D point.
</returns>
        </member>
        <member name="M:CD2DPointU.#ctor(System.UInt32,System.UInt32)">
            <summary>
Constructs a CD2DPointU object from two UINT32 values.</summary>
            <param name="uX">source X</param>
            <param name="uY">source Y</param>
        </member>
        <member name="M:CD2DPointU.#ctor(D2D_POINT_2U!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DPointU from object D2D1_POINT_2U object.</summary>
            <param name="pt">source point</param>
        </member>
        <member name="M:CD2DPointU.#ctor(D2D_POINT_2U!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DPointU from object D2D1_POINT_2U object.</summary>
            <param name="pt">source point</param>
        </member>
        <member name="M:CD2DPointU.#ctor(CPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DPointU object from CPoint object.</summary>
            <param name="pt">source point</param>
        </member>
        <member name="T:CD2DPointU">
            <summary>
D2D1_POINT_2U wrapper
</summary>
        </member>
        <member name="M:CD2DPointF.op_Implicit~CPoint">
            <summary>
Converts CD2DPointF to CPoint object.</summary>
            <returns>
Current value of D2D point.
</returns>
        </member>
        <member name="M:CD2DPointF.#ctor(System.Single,System.Single)">
            <summary>
Constructs a CD2DPointF object from two FLOAT values.</summary>
            <param name="fX">source X</param>
            <param name="fY">source Y</param>
        </member>
        <member name="M:CD2DPointF.#ctor(D2D_POINT_2F!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Constructs a CD2DPointF object from D2D1_POINT_2F object.</summary>
            <param name="pt">source point</param>
        </member>
        <member name="M:CD2DPointF.#ctor(D2D_POINT_2F!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DPointF object from D2D1_POINT_2F object.</summary>
            <param name="pt">source point</param>
        </member>
        <member name="M:CD2DPointF.#ctor(CPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Constructs a CD2DPointF object from CPoint object.</summary>
            <param name="pt">source point</param>
        </member>
        <member name="T:CD2DPointF">
            <summary>
D2D1_POINT_2F wrapper
</summary>
        </member>
        <member name="M:CCustomTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <remarks>
This method also can set initial value and initial velocity to be applied to an animation variable, which is
associated with this transition. For this purpose you have to call SetInitialValue and SetInitialVelocity before
the framework creates the encapsulated transition COM object (it happens when you call CAnimationController::AnimateGroup).
</remarks>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="M:CCustomTransition.SetInitialVelocity(System.Double)">
            <summary>
Sets an initial velocity, which will be applied to an animation variable associated with this transition.
</summary>
        </member>
        <member name="M:CCustomTransition.SetInitialValue(System.Double)">
            <summary>
Sets an initial value, which will be applied to an animation variable associated with this transition.
</summary>
        </member>
        <member name="M:CCustomTransition.#ctor(CCustomInterpolator*)">
            <summary>
Constructs a custom transition object.
</summary>
            <param name="pInterpolator">A pointer to custom interpolator.</param>
        </member>
        <member name="F:CCustomTransition.m_initialVelocity">
            <summary>
Stores the initial velocity.
</summary>
        </member>
        <member name="F:CCustomTransition.m_initialValue">
            <summary>
Stores the initial value.
</summary>
        </member>
        <member name="F:CCustomTransition.m_bInitialVelocitySpecified">
            <summary>
Specifies whether the initial velocity was specified with SetInitialVelocity.
</summary>
        </member>
        <member name="F:CCustomTransition.m_bInitialValueSpecified">
            <summary>
Specifies whether the initial value was specified with SetInitialValue.
</summary>
        </member>
        <member name="F:CCustomTransition.m_pInterpolator">
            <summary>
Stores a pointer to a custom interpolator.
</summary>
        </member>
        <member name="T:CCustomTransition">
            <summary>
Implements custom transition.
</summary>
            <remarks>
The CCustomTransitions class allows developers to implement custom transitions. It's created and used
as a standard transition, but its constructor accepts as parameter a pointer to a custom interpolator.
Perform the following steps to use custom transitions:
1. Derive a class from CCustomInterpolator and implement at least InterpolateValue method.
2. Ensure that the lifetime of custom interpolator object must be longer than duration of animation where it's used.
3. Instantiate (using operator new) a CCustomTransition object and pass a pointer to custom interpolator in the constructor.
4. Call CCustomTransition::SetInitialValue and CCustomTransition::SetInitialVelocity if these parameters are required for custom interpolation.
5. Pass the pointer to custom transition to AddTransition method of animation object, whose value should be animated with the custom algorithm.
6. When the value of animation object should change Windows Animation API will call InterpolateValue (and other relevant methods) in CCustomInterpolator.
</remarks>
        </member>
        <member name="M:CInterpolatorBase.GetDependencies(__MIDL___MIDL_itf_UIAnimation_0000_0010_0001*,__MIDL___MIDL_itf_UIAnimation_0000_0010_0001*,__MIDL___MIDL_itf_UIAnimation_0000_0010_0001*)">
            <summary>
Gets the interpolator's dependencies.
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the GetDependencies method.
</returns>
            <param name="initialValueDependencies">Output. Aspects of the interpolator that depend on the initial value passed to SetInitialValueAndVelocity.</param>
            <param name="initialVelocityDependencies">Output. Aspects of the interpolator that depend on the initial velocity passed to SetInitialValueAndVelocity.</param>
            <param name="durationDependencies">Output. Aspects of the interpolator that depend on the duration passed to SetDuration.</param>
        </member>
        <member name="M:CInterpolatorBase.InterpolateVelocity(System.Double,System.Double*)">
            <summary>
Interpolates the velocity at a given offset
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the InterpolateVelocity method.
</returns>
            <param name="offset">The offset from the start of the transition.
The offset is always greater than or equal to zero and less than or equal to the duration of the transition.
This method is not called if the duration of the transition is zero. </param>
            <param name="velocity">Output. The velocity of the variable at the offset.</param>
        </member>
        <member name="M:CInterpolatorBase.InterpolateValue(System.Double,System.Double*)">
            <summary>
Interpolates the value at a given offset
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the InterpolateValue method.
</returns>
            <param name="offset">The offset from the start of the transition.
The offset is always greater than or equal to zero and less than the duration of the transition.
This method is not called if the duration of the transition is zero.</param>
            <param name="value">Output. The interpolated value.</param>
        </member>
        <member name="M:CInterpolatorBase.GetFinalValue(System.Double*)">
            <summary>
Gets the final value to which the interpolator leads.
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the GetFinalValue method.
</returns>
            <param name="value">Output. The final value of a variable at the end of the transition.</param>
        </member>
        <member name="M:CInterpolatorBase.GetDuration(System.Double*)">
            <summary>
Gets the interpolator's duration.
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the GetDuration method.
</returns>
            <param name="duration">Output. The duration of the transition, in seconds.</param>
        </member>
        <member name="M:CInterpolatorBase.SetDuration(System.Double)">
            <summary>
Sets the interpolator's duration
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the SetDuration method.
</returns>
            <param name="duration">The duration of the transition.</param>
        </member>
        <member name="M:CInterpolatorBase.SetInitialValueAndVelocity(System.Double,System.Double)">
            <summary>
Sets the interpolator's initial value and velocity.
</summary>
            <returns>
If the method succeeds, it returns S_OK. It returns E_FAIL if CCustomInterpolator is not
set, or custom implementation returns FALSE from the SetInitialValueAndVelocity method.
</returns>
            <param name="initialValue">The value of the variable at the start of the transition.</param>
            <param name="initialVelocity">The velocity of the variable at the start of the transition.</param>
        </member>
        <member name="M:CInterpolatorBase.CreateInstance(CCustomInterpolator*,IUIAnimationInterpolator**)">
            <summary>
Creates an instance of CInterpolatorBase and stores a pointer to custom interpolator, which will be handling events.
</summary>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
<param name="pInterpolator">A pointer to custom interpolator.</param><param name="ppHandler">Output. Contains a pointer to instance of CInterpolatorBase when the function returns.</param></member>
        <member name="M:CInterpolatorBase.SetCustomInterpolator(CCustomInterpolator*)">
            <summary>
Stores  a pointer to custom interpolator, which will be handling events.
</summary>
            <param name="pInterpolator">A pointer to custom interpolator.</param>
        </member>
        <member name="M:CInterpolatorBase.#ctor">
            <summary>
Constructs the CInterpolatorBase object.
</summary>
        </member>
        <member name="T:CInterpolatorBase">
            <summary>
Implements a callback, which is called by Animation API when it needs to calculate a new value of animation variable.
</summary>
            <remarks>
This handler is created and passed to IUIAnimationTransitionFactory::CreateTransition when a CCustomTransition
object is being created as a part of animation initialization process (started by CAnimationController::AnimateGroup).
Usually you don't need to use this class directly, it just routs all events to a CCustomInterpolator-derived class, whose
pointer is passed to constructor of CCustomTransition.
</remarks>
        </member>
        <member name="M:CCustomInterpolator.GetDependencies(__MIDL___MIDL_itf_UIAnimation_0000_0010_0001*,__MIDL___MIDL_itf_UIAnimation_0000_0010_0001*,__MIDL___MIDL_itf_UIAnimation_0000_0010_0001*)">
            <summary>
Gets the interpolator's dependencies.
</summary>
            <returns>
Basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="initialValueDependencies">Output. Aspects of the interpolator that depend on the initial value passed to SetInitialValueAndVelocity.</param>
            <param name="initialVelocityDependencies">Output. Aspects of the interpolator that depend on the initial velocity passed to SetInitialValueAndVelocity.</param>
            <param name="durationDependencies">Output. Aspects of the interpolator that depend on the duration passed to SetDuration.</param>
        </member>
        <member name="M:CCustomInterpolator.InterpolateVelocity(System.Double,System.Double*)">
            <summary>
Interpolates the velocity at a given offset
</summary>
            <returns>
Basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="offset">The offset from the start of the transition.
The offset is always greater than or equal to zero and less than or equal to the duration of the transition.
This method is not called if the duration of the transition is zero. </param>
            <param name="velocity">Output. The velocity of the variable at the offset.</param>
        </member>
        <member name="M:CCustomInterpolator.InterpolateValue(System.Double,System.Double*)">
            <summary>
Interpolates the value at a given offset.
</summary>
            <returns>
Basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="offset">The offset from the start of the transition.
The offset is always greater than or equal to zero and less than the duration of the transition.
This method is not called if the duration of the transition is zero.</param>
            <param name="value">Output. The interpolated value.</param>
        </member>
        <member name="M:CCustomInterpolator.GetFinalValue(System.Double*)">
            <summary>
Gets the final value to which the interpolator leads.
</summary>
            <returns>
Basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="value">Output. The final value of a variable at the end of the transition.</param>
        </member>
        <member name="M:CCustomInterpolator.GetDuration(System.Double*)">
            <summary>
Gets the interpolator's duration.
</summary>
            <returns>
Basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="duration">Output. The duration of the transition, in seconds.</param>
        </member>
        <member name="M:CCustomInterpolator.SetDuration(System.Double)">
            <summary>
Sets the interpolator's duration.
</summary>
            <returns>
Basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="duration">The duration of the transition.</param>
        </member>
        <member name="M:CCustomInterpolator.SetInitialValueAndVelocity(System.Double,System.Double)">
            <summary>
Sets the interpolator's initial value and velocity.
</summary>
            <returns>
The basic implementation always returns TRUE. Return FALSE from overridden implementation if you wish to fail the event.
</returns>
            <param name="initialValue">The value of the variable at the start of the transition.</param>
            <param name="initialVelocity">The velocity of the variable at the start of the transition.</param>
        </member>
        <member name="M:CCustomInterpolator.Init(System.Double,System.Double)">
            <summary>
Initializes duration and final value.
</summary>
            <param name="duration">The duration of the transition.</param>
            <param name="finalValue">The final value of a variable at the end of the transition.</param>
        </member>
        <member name="M:CCustomInterpolator.#ctor(System.Double,System.Double)">
            <summary>
Constructs a custom interpolator object and initializes duration and velocity to specified values.
</summary>
            <param name="duration">The duration of the transition.</param>
            <param name="finalValue" />
        </member>
        <member name="M:CCustomInterpolator.#ctor">
            <summary>
Constructs a custom interpolator object and sets all values to default 0.
</summary>
            <remarks>
Use CCustomInterpolator::Init to initialize duration and final value later in the code.
</remarks>
        </member>
        <member name="F:CCustomInterpolator.m_currentVelocity">
            <summary>
The interpolated velocity.
</summary>
        </member>
        <member name="F:CCustomInterpolator.m_currentValue">
            <summary>
The interpolated value.
</summary>
        </member>
        <member name="F:CCustomInterpolator.m_initialVelocity">
            <summary>
The velocity of the variable at the start of the transition.
</summary>
        </member>
        <member name="F:CCustomInterpolator.m_initialValue">
            <summary>
The value of the variable at the start of the transition.
</summary>
        </member>
        <member name="F:CCustomInterpolator.m_finalValue">
            <summary>
The final value of a variable at the end of the transition.
</summary>
        </member>
        <member name="F:CCustomInterpolator.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="T:CCustomInterpolator">
            <summary>
Implements a basic interpolator.
</summary>
            <remarks>
Derive a class from CCustomInterpolator and override all necessary methods in order to implement a custom
interpolation algorithm. A pointer to this class should be passed as a parameter to CCustomTransition.
</remarks>
        </member>
        <member name="M:CSinusoidalTransitionFromVelocity.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CSinusoidalTransitionFromVelocity.m_period">
            <summary>
The period of oscillation of the sinusoidal wave in seconds.
</summary>
        </member>
        <member name="F:CSinusoidalTransitionFromVelocity.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CSinusoidalTransitionFromVelocity.#ctor(System.Double,System.Double)">
            <summary>
Constructs a transition object.
</summary>
            <param name="duration">The duration of the transition.</param>
            <param name="period">The period of oscillation of the sinusoidal wave in seconds. </param>
        </member>
        <member name="T:CSinusoidalTransitionFromVelocity">
            <summary>
Encapsulates a sinusoidal-velocity transition, with an amplitude determined by the animation variable's initial velocity..
</summary>
            <remarks>
The value of the animation variable oscillates around the initial value over the entire duration of a
sinusoidal-range transition. The amplitude of the oscillation is determined by the animation variable's velocity
when the transition begins.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CSinusoidalTransitionFromRange.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CSinusoidalTransitionFromRange.m_slope">
            <summary>
The slope at the start of the transition.
</summary>
        </member>
        <member name="F:CSinusoidalTransitionFromRange.m_period">
            <summary>
The period of oscillation of the sinusoidal wave in seconds.
</summary>
        </member>
        <member name="F:CSinusoidalTransitionFromRange.m_dblMaximumValue">
            <summary>
The value of the animation variable at a peak of the sinusoidal wave.
</summary>
        </member>
        <member name="F:CSinusoidalTransitionFromRange.m_dblMinimumValue">
            <summary>
The value of the animation variable at a trough of the sinusoidal wave.
</summary>
        </member>
        <member name="F:CSinusoidalTransitionFromRange.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CSinusoidalTransitionFromRange.#ctor(System.Double,System.Double,System.Double,System.Double,__MIDL___MIDL_itf_UIAnimation_0000_0009_0001)">
            <summary>
Constructs a transition object.
</summary>
            <param name="duration">The duration of the transition.</param>
            <param name="dblMinimumValue">The value of the animation variable at a trough of the sinusoidal wave.</param>
            <param name="dblMaximumValue">The value of the animation variable at a peak of the sinusoidal wave.</param>
            <param name="period">The period of oscillation of the sinusoidal wave in seconds. </param>
            <param name="slope">The slope at the start of the transition. </param>
        </member>
        <member name="T:CSinusoidalTransitionFromRange">
            <summary>
Encapsulates a sinusoidal-range transition, with a given range of oscillation.
</summary>
            <remarks>
The value of the animation variable fluctuates between the specified minimum and maximum values over the entire
duration of a sinusoidal-range transition. The slope parameter is used to disambiguate between the two possible
sine waves specified by the other parameters.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CReversalTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CReversalTransition.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CReversalTransition.#ctor(System.Double)">
            <summary>
Constructs a reversal transition object and initializes its duration.
</summary>
            <param name="duration">The duration of the transition. </param>
        </member>
        <member name="T:CReversalTransition">
            <summary>
Encapsulates a reversal transition.
</summary>
            <remarks>
A reversal transition smoothly changes direction over a given duration.
The final value will be the same as the initial value and the final velocity will be the negative of the initial velocity.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CParabolicTransitionFromAcceleration.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CParabolicTransitionFromAcceleration.m_dblAcceleration">
            <summary>
The acceleration of the animation variable during the transition.
</summary>
        </member>
        <member name="F:CParabolicTransitionFromAcceleration.m_dblFinalVelocity">
            <summary>
The velocity of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CParabolicTransitionFromAcceleration.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="M:CParabolicTransitionFromAcceleration.#ctor(System.Double,System.Double,System.Double)">
            <summary>
Constructs a parabolic-acceleration transition and initializes it with specified parameters.
</summary>
            <param name="dblFinalValue">The value of the animation variable at the end of the transition. </param>
            <param name="dblFinalVelocity">The velocity of the animation variable at the end of the transition. </param>
            <param name="dblAcceleration">The acceleration of the animation variable during the transition.</param>
        </member>
        <member name="T:CParabolicTransitionFromAcceleration">
            <summary>
Encapsulates a parabolic-acceleration transition.
</summary>
            <remarks>
During a parabolic-acceleration transition, the value of the animation variable changes from the initial value
to the final value ending at a specified velocity. You can control how quickly the variable reaches the final
value by specifying the rate of acceleration.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CSmoothStopTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CSmoothStopTransition.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CSmoothStopTransition.m_maximumDuration">
            <summary>
The maximum duration of the transition.
</summary>
        </member>
        <member name="M:CSmoothStopTransition.#ctor(System.Double,System.Double)">
            <summary>
Constructs a smooth-stop transition and initializes its maximum duration and final value.
</summary>
            <param name="maximumDuration">The maximum duration of the transition.</param>
            <param name="dblFinalValue">The value of the animation variable at the end of the transition.</param>
        </member>
        <member name="T:CSmoothStopTransition">
            <summary>
Encapsulates a smooth-stop transition.
</summary>
            <remarks>
A smooth-stop transition slows down as it approaches a given final value, and reaches it with a velocity of zero.
The duration of the transition is determined by the initial velocity, the difference between the initial and final values,
and the specified maximum duration. If there is no solution consisting of a single parabolic arc,
this method creates a cubic transition.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CLinearTransitionFromSpeed.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CLinearTransitionFromSpeed.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CLinearTransitionFromSpeed.m_dblSpeed">
            <summary>
The absolute value of the variable's velocity.
</summary>
        </member>
        <member name="M:CLinearTransitionFromSpeed.#ctor(System.Double,System.Double)">
            <summary>
Constructs a linear-speed transition object and initializes it with speed and final value.
</summary>
            <param name="dblSpeed">The absolute value of the variable's velocity.</param>
            <param name="dblFinalValue">The value of the animation variable at the end of the transition.</param>
        </member>
        <member name="T:CLinearTransitionFromSpeed">
            <summary>
Encapsulates a linear-speed transition.
</summary>
            <remarks>
During a linear-speed transition, the value of the animation variable changes at a specified rate.
The duration of the transition is determined by the difference between the initial value and the specified final value.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CLinearTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CLinearTransition.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CLinearTransition.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CLinearTransition.#ctor(System.Double,System.Double)">
            <summary>
Constructs a linear transition object and initializes it with duration and final value.
</summary>
            <param name="duration">The duration of the transition.</param>
            <param name="dblFinalValue">The value of the animation variable at the end of the transition.</param>
        </member>
        <member name="T:CLinearTransition">
            <summary>
Encapsulates a linear transition.
</summary>
            <remarks>
During a linear transition, the value of the animation variable transitions linearly from its initial value to a specified final value.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CInstantaneousTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CInstantaneousTransition.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="M:CInstantaneousTransition.#ctor(System.Double)">
            <summary>
Constructs a transition object and initializes its final value.
</summary>
            <param name="dblFinalValue">The value of the animation variable at the end of the transition.</param>
        </member>
        <member name="T:CInstantaneousTransition">
            <summary>
Encapsulates an instantaneous transition.
</summary>
            <remarks>
During an instantaneous transition, the value of the animation variable changes instantly from its current
value to a specified final value. The duration of this transition is always zero.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CDiscreteTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CDiscreteTransition.m_hold">
            <summary>
The amount of time by which to hold the variable at its final value.
</summary>
        </member>
        <member name="F:CDiscreteTransition.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CDiscreteTransition.m_delay">
            <summary>
The amount of time by which to delay the instantaneous switch to the final value.
</summary>
        </member>
        <member name="M:CDiscreteTransition.#ctor(System.Double,System.Double,System.Double)">
            <summary>
Constructs a discrete transition object and initializes its parameters.
</summary>
            <param name="delay">The amount of time by which to delay the instantaneous switch to the final value.</param>
            <param name="dblFinalValue">The value of the animation variable at the end of the transition. </param>
            <param name="hold">The amount of time by which to hold the variable at its final value.</param>
        </member>
        <member name="T:CDiscreteTransition">
            <summary>
Encapsulates a discrete transition.
</summary>
            <remarks>
During a discrete transition, the animation variable remains at the initial value for a specified delay time,
then switches instantaneously to a specified final value and remains at that value for a given hold time.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CCubicTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CCubicTransition.m_dblFinalVelocity">
            <summary>
The velocity of the variable at the end of the transition.
</summary>
        </member>
        <member name="F:CCubicTransition.m_dblFinalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CCubicTransition.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CCubicTransition.#ctor(System.Double,System.Double,System.Double)">
            <summary>
Constructs a transition object and initializes its parameters.
</summary>
            <param name="duration">The duration of the transition.</param>
            <param name="finalValue">The value of the animation variable at the end of the transition.</param>
            <param name="finalVelocity">The velocity of the variable at the end of the transition.</param>
        </member>
        <member name="T:CCubicTransition">
            <summary>
Encapsulates a cubic transition.
</summary>
            <remarks>
During a cubic transition, the value of the animation variable changes from its initial value to a specified
final value over the duration of the transition, ending at a specified velocity.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CConstantTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CConstantTransition.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CConstantTransition.#ctor(System.Double)">
            <summary>
Constructs a transition object and initializes its duration.
</summary>
            <param name="duration">The duration of the transition. </param>
        </member>
        <member name="T:CConstantTransition">
            <summary>
Encapsulates a constant transition.
</summary>
            <remarks>
During a constant transition, the value of an animation variable remains at the initial value over the duration
of the transition.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CAccelerateDecelerateTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Calls the transition library to create encapsulated transition COM object.
</summary>
            <returns>
TRUE if transition is created successfully; otherwise FALSE.
</returns>
            <param name="pLibrary">A pointer to transition library, which is responsible for creation of standard transitions.</param>
            <param name="pFactory">A pointer to transition factory, which is responsible for creation of custom transitions.</param>
        </member>
        <member name="F:CAccelerateDecelerateTransition.m_decelerationRatio">
            <summary>
The ratio of the time spent decelerating to the duration.
</summary>
        </member>
        <member name="F:CAccelerateDecelerateTransition.m_accelerationRatio">
            <summary>
The ratio of the time spent accelerating to the duration.
</summary>
        </member>
        <member name="F:CAccelerateDecelerateTransition.m_finalValue">
            <summary>
The value of the animation variable at the end of the transition.
</summary>
        </member>
        <member name="F:CAccelerateDecelerateTransition.m_duration">
            <summary>
The duration of the transition.
</summary>
        </member>
        <member name="M:CAccelerateDecelerateTransition.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
Constructs a transition object.
</summary>
            <param name="duration">The duration of the transition. </param>
            <param name="finalValue">The value of the animation variable at the end of the transition. </param>
            <param name="accelerationRatio">The ratio of the time spent accelerating to the duration.</param>
            <param name="decelerationRatio">The ratio of the time spent decelerating to the duration. </param>
        </member>
        <member name="T:CAccelerateDecelerateTransition">
            <summary>
Implements an accelerate-decelerate transition.
</summary>
            <remarks>
During an accelerate-decelerate transition, the animation variable speeds up and then slows down over the
duration of the transition, ending at a specified value. You can control how quickly the variable accelerates and
decelerates independently, by specifying different acceleration and deceleration ratios.
When the initial velocity is zero, the acceleration ratio is the fraction of the duration that the variable will
spend accelerating; likewise with the deceleration ratio. If the initial velocity is non-zero, it is the
fraction of the time between the velocity reaching zero and the end of transition. The acceleration ratio and
the deceleration ratio should sum to a maximum of 1.0.
Because all transitions are cleared automatically, it's recommended to allocated them using operator new.
The encapsulated IUIAnimationTransition COM object is created by CAnimationController::AnimateGroup, until then
it's NULL. Changing member variables after creation of this COM object has no effect.
</remarks>
        </member>
        <member name="M:CAnimationTimerEventHandler.OnRenderingTooSlow(System.UInt32)">
            <summary>
Handles events that occur when the rendering frame rate for an animation falls below the minimum desirable frame rate.
</summary>
            <returns>
S_OK if the method succeeds; otherwise E_FAIL.
</returns>
        </member>
        <member name="M:CAnimationTimerEventHandler.OnPostUpdate">
            <summary>
Handles events that occur after an animation update is finished.
</summary>
            <returns>
S_OK if the method succeeds; otherwise E_FAIL.
</returns>
        </member>
        <member name="M:CAnimationTimerEventHandler.OnPreUpdate">
            <summary>
Handles events that occur before an animation update begins.
</summary>
            <returns>
S_OK if the method succeeds; otherwise E_FAIL.
</returns>
        </member>
        <member name="M:CAnimationTimerEventHandler.SetAnimationController(CAnimationController*)">
            <summary>
Stores a pointer to animation controller to route events.
</summary>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
        </member>
        <member name="M:CAnimationTimerEventHandler.CreateInstance(CAnimationController*,IUIAnimationTimerEventHandler**)">
            <summary>
Creates an instance of CAnimationTimerEventHandler callback.
</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
</returns>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
            <param name="ppTimerEventHandler">Output. If the method succeeds it contains a pointer to COM object that will handle
animation timer events.</param>
        </member>
        <member name="T:CAnimationTimerEventHandler">
            <summary>
Implements a call back, which is called by Animation API when timing events occur.
</summary>
            <remarks>
This event handler is created and passed to IUIAnimationTimer::SetTimerEventHandler when you call
CAnimationController::EnableAnimationTimerEventHandler.
</remarks>
        </member>
        <member name="M:CAnimationStoryboardEventHandler.OnStoryboardUpdated(IUIAnimationStoryboard*)">
            <summary>
Handles OnStoryboardUpdated events, which occur when a storyboard is updated
</summary>
            <returns>
S_OK if the method succeeds; otherwise E_FAIL.
</returns>
            <param name="storyboard">A pointer to storyboard, which was updated.</param>
        </member>
        <member name="M:CAnimationStoryboardEventHandler.OnStoryboardStatusChanged(IUIAnimationStoryboard*,__MIDL___MIDL_itf_UIAnimation_0000_0002_0001,__MIDL___MIDL_itf_UIAnimation_0000_0002_0001)">
            <summary>
Handles OnStoryboardStatusChanged events, which occur when a storyboard's status changes
</summary>
            <returns>
S_OK if the method succeeds; otherwise E_FAIL.
</returns>
            <param name="storyboard">A pointer to storyboard whose status has changed.</param>
            <param name="newStatus">Specifies new storyboard status.</param>
            <param name="previousStatus">Specifies previous storyboard status.</param>
        </member>
        <member name="M:CAnimationStoryboardEventHandler.SetAnimationController(CAnimationController*)">
            <summary>
Stores a pointer to animation controller to route events.
</summary>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
        </member>
        <member name="M:CAnimationStoryboardEventHandler.CreateInstance(CAnimationController*,IUIAnimationStoryboardEventHandler**)">
            <summary>
Creates an instance of CAnimationStoryboardEventHandler callback.
</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
</returns>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
            <param name="ppHandler">Output. If the method succeeds it contains a pointer to COM object that will handle
storyboard events.</param>
        </member>
        <member name="M:CAnimationStoryboardEventHandler.#ctor">
            <summary>
Constructs a CAnimationStoryboardEventHandler object.
</summary>
        </member>
        <member name="T:CAnimationStoryboardEventHandler">
            <summary>
Implements a callback, which is called by Animation API when storyboard's status is changed or storyboard is updated.
</summary>
            <remarks>
This event handler is created and passed to IUIAnimationStoryboard::SetStoryboardEventHandler method,
when you call CAnimationController::EnableStoryboardEventHandler.
</remarks>
        </member>
        <member name="M:CAnimationVariableIntegerChangeHandler.OnIntegerValueChanged(IUIAnimationStoryboard*,IUIAnimationVariable*,System.Int32,System.Int32)">
            <summary>
Called when a value of an animation variable has changed.
</summary>
            <returns>
S_OK if the method succeeds; otherwise E_FAIL.
</returns>
            <param name="storyboard">The storyboard that is animating the variable.</param>
            <param name="variable">The animation variable that was updated.</param>
            <param name="newValue">The new rounded value.</param>
            <param name="previousValue">The previous rounded value.</param>
        </member>
        <member name="M:CAnimationVariableIntegerChangeHandler.SetAnimationController(CAnimationController*)">
            <summary>
Stores a pointer to animation controller to route events.
</summary>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
        </member>
        <member name="M:CAnimationVariableIntegerChangeHandler.CreateInstance(CAnimationController*,IUIAnimationVariableIntegerChangeHandler**)">
            <summary>
Creates an instance of CAnimationVariableIntegerChangeHandler callback.
</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
</returns>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
            <param name="ppHandler">Output. If the method succeeds it contains a pointer to COM object that will handle
variable integer change events.</param>
        </member>
        <member name="M:CAnimationVariableIntegerChangeHandler.#ctor">
            <summary>
Constructs a CAnimationVariableIntegerChangeHandler object.
</summary>
        </member>
        <member name="T:CAnimationVariableIntegerChangeHandler">
            <summary>
Implements a call back, which is called by Animation API when the value of an animation variable changes.
</summary>
            <remarks>
This event handler is created and passed to IUIAnimationVariable::SetVariableIntegerChangeHandler method,
when you call CAnimationVariable::EnableIntegerValueChangedEvent or CAnimationBaseObject::EnableIntegerValueChangedEvent
(which enables this event for all animation variables encapsulated in an animation object).
</remarks>
        </member>
        <member name="M:CAnimationVariableChangeHandler.OnValueChanged(IUIAnimationStoryboard*,IUIAnimationVariable*,System.Double,System.Double)">
            <summary>
Called when a value of an animation variable has changed.
</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
</returns>
            <param name="storyboard">The storyboard that is animating the variable.</param>
            <param name="variable">The animation variable that was updated.</param>
            <param name="newValue">The new value.</param>
            <param name="previousValue">The previous value.</param>
        </member>
        <member name="M:CAnimationVariableChangeHandler.SetAnimationController(CAnimationController*)">
            <summary>
Stores a pointer to animation controller to route events.
</summary>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
        </member>
        <member name="M:CAnimationVariableChangeHandler.CreateInstance(CAnimationController*,IUIAnimationVariableChangeHandler**)">
            <summary>
Creates an instance of CAnimationVariableChangeHandler object.
</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
</returns>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
            <param name="ppHandler">Output. If the method succeeds it contains a pointer to COM object that will handle
variable change events.</param>
        </member>
        <member name="M:CAnimationVariableChangeHandler.#ctor">
            <summary>
Constructs a CAnimationVariableChangeHandler object.
</summary>
        </member>
        <member name="T:CAnimationVariableChangeHandler">
            <summary>
Implements a call back, which is called by Animation API when the value of an animation variable changes.
</summary>
            <remarks>
This event handler is created and passed to IUIAnimationVariable::SetVariableChangeHandler method,
when you call CAnimationVariable::EnableValueChangedEvent or CAnimationBaseObject::EnableValueChangedEvent
(which enables this event for all animation variables encapsulated in an animation object).
</remarks>
        </member>
        <member name="M:CAnimationManagerEventHandler.OnManagerStatusChanged(__MIDL___MIDL_itf_UIAnimation_0000_0000_0002,__MIDL___MIDL_itf_UIAnimation_0000_0000_0002)">
            <summary>
Called when a status of animation manager has changed.
</summary>
            <returns>
Current implementation always returns S_OK;
</returns>
            <param name="newStatus">New status.</param>
            <param name="previousStatus">Previous status.</param>
        </member>
        <member name="M:CAnimationManagerEventHandler.SetAnimationController(CAnimationController*)">
            <summary>
Stores a pointer to animation controller to route events.
</summary>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
        </member>
        <member name="M:CAnimationManagerEventHandler.CreateInstance(CAnimationController*,IUIAnimationManagerEventHandler**)">
            <summary>
Creates an instance of CAnimationManagerEventHandler object.
</summary>
            <returns>
If the method succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.
</returns>
            <param name="pAnimationController">A pointer to animation controller, which will receive events.</param>
            <param name="ppManagerEventHandler">Output. If the method succeeds it contains a pointer to COM object that will handle
status updates to an animation manager.</param>
        </member>
        <member name="M:CAnimationManagerEventHandler.#ctor">
            <summary>
Constructs a CAnimationManagerEventHandler object.
</summary>
        </member>
        <member name="T:CAnimationManagerEventHandler">
            <summary>
Implements a callback, which is called by Animation API when a status of animation manager changed.
</summary>
            <remarks>
This event handler is created and passed to IUIAnimationManager::SetManagerEventHandler method,
when you call CAnimationController::EnableAnimationManagerEvent.
</remarks>
        </member>
        <member name="M:CAnimationController.CleanUpGroup(CAnimationGroup*)">
            <summary>
A helper that cleans up the group.
</summary>
            <remarks>
This method removes all transitions and keyframes from the specified group.
</remarks>
            <param name="pGroup">A pointer to animation group to clean.</param>
        </member>
        <member name="M:CAnimationController.OnAfterSchedule(CAnimationGroup*)">
            <summary>
Called by the framework when an animation for the specified group has just been scheduled.
</summary>
            <remarks>
The default implementation removes keyframes from the specified group and transitions from animation variables that
belong to the specified group. Can be overridden in a derived class to take any additional actions upon animation schedule.
</remarks>
            <param name="pGroup">A pointer to an animation group, which has been scheduled.</param>
        </member>
        <member name="M:CAnimationController.OnAnimationTimerRenderingTooSlow(System.UInt32)">
            <summary>
Called by the framework when the rendering frame rate for an animation falls below a minimum desirable frame rate.
</summary>
            <remarks>
This method is called if you enable timer event handlers using EnableAnimationTimerEventHandler.
It can be overridden in a derived class to take application-specific actions.
The minimum desirable frame rate is specified by calling IUIAnimationTimer::SetFrameRateThreshold.
</remarks>
            <param name="fps">The current frame rate in frames per second. </param>
        </member>
        <member name="M:CAnimationController.OnAnimationTimerPostUpdate">
            <summary>
Called by the framework after an animation update is finished.
</summary>
            <remarks>
This method is called if you enable timer event handlers using EnableAnimationTimerEventHandler.
It can be overridden in a derived class to take application-specific actions.
</remarks>
        </member>
        <member name="M:CAnimationController.OnAnimationTimerPreUpdate">
            <summary>
Called by the framework before an animation update begins.
</summary>
            <remarks>
This method is called if you enable timer event handlers using EnableAnimationTimerEventHandler.
It can be overridden in a derived class to take application-specific actions.
</remarks>
        </member>
        <member name="M:CAnimationController.OnHasPriorityCompress(CAnimationGroup*,CAnimationGroup*,__MIDL___MIDL_itf_UIAnimation_0000_0008_0001)">
            <summary>
Called by the framework to resolve scheduling conflicts.
</summary>
            <returns>
Should return TRUE if storyboard owned by pGroupNew has priority. Should return FALSE if storyboard owned by
pGroupScheduled has priority.
</returns>
            <remarks>
This method is called if you enable priority comparison events using CAnimationController::EnablePriorityComparisonHandler
and specify UI_ANIMATION_PHT_COMPRESS.
It can be overridden in a derived class to take application-specific actions.
Read Windows Animation API documentation for more information about Conflict Management (http://msdn.microsoft.com/en-us/library/dd371759(VS.85).aspx).
</remarks>
            <param name="pGroupScheduled">The group that owns the currently scheduled storyboard.</param>
            <param name="pGroupNew">The group that owns the new storyboard that is in scheduling conflict with the scheduled storyboard owned by pGroupScheduled.</param>
            <param name="priorityEffect">The potential effect on pGroupNew if pGroupScheduled has a higher priority.</param>
        </member>
        <member name="M:CAnimationController.OnHasPriorityTrim(CAnimationGroup*,CAnimationGroup*,__MIDL___MIDL_itf_UIAnimation_0000_0008_0001)">
            <summary>
Called by the framework to resolve scheduling conflicts.
</summary>
            <returns>
Should return TRUE if storyboard owned by pGroupNew has priority. Should return FALSE if storyboard owned by
pGroupScheduled has priority.
</returns>
            <remarks>
This method is called if you enable priority comparison events using CAnimationController::EnablePriorityComparisonHandler
and specify UI_ANIMATION_PHT_TRIM.
It can be overridden in a derived class to take application-specific actions.
Read Windows Animation API documentation for more information about Conflict Management (http://msdn.microsoft.com/en-us/library/dd371759(VS.85).aspx).
</remarks>
            <param name="pGroupScheduled">The group that owns the currently scheduled storyboard.</param>
            <param name="pGroupNew">The group that owns the new storyboard that is in scheduling conflict with the scheduled storyboard owned by pGroupScheduled.</param>
            <param name="priorityEffect">The potential effect on pGroupNew if pGroupScheduled has a higher priority.</param>
        </member>
        <member name="M:CAnimationController.OnHasPriorityConclude(CAnimationGroup*,CAnimationGroup*,__MIDL___MIDL_itf_UIAnimation_0000_0008_0001)">
            <summary>
Called by the framework to resolve scheduling conflicts.
</summary>
            <returns>
Should return TRUE if storyboard owned by pGroupNew has priority. Should return FALSE if storyboard owned by
pGroupScheduled has priority.
</returns>
            <remarks>
This method is called if you enable priority comparison events using CAnimationController::EnablePriorityComparisonHandler
and specify UI_ANIMATION_PHT_CONCLUDE.
It can be overridden in a derived class to take application-specific actions.
Read Windows Animation API documentation for more information about Conflict Management (http://msdn.microsoft.com/en-us/library/dd371759(VS.85).aspx).
</remarks>
            <param name="pGroupScheduled">The group that owns the currently scheduled storyboard.</param>
            <param name="pGroupNew">The group that owns the new storyboard that is in scheduling conflict with the scheduled storyboard owned by pGroupScheduled.</param>
            <param name="priorityEffect">The potential effect on pGroupNew if pGroupScheduled has a higher priority.</param>
        </member>
        <member name="M:CAnimationController.OnHasPriorityCancel(CAnimationGroup*,CAnimationGroup*,__MIDL___MIDL_itf_UIAnimation_0000_0008_0001)">
            <summary>
Called by the framework to resolve scheduling conflicts.
</summary>
            <returns>
Should return TRUE if storyboard owned by pGroupNew has priority. Should return FALSE if storyboard owned by
pGroupScheduled has priority.
</returns>
            <remarks>
This method is called if you enable priority comparison events using CAnimationController::EnablePriorityComparisonHandler
and specify UI_ANIMATION_PHT_CANCEL.
It can be overridden in a derived class to take application-specific actions.
Read Windows Animation API documentation for more information about Conflict Management (http://msdn.microsoft.com/en-us/library/dd371759(VS.85).aspx).
</remarks>
            <param name="pGroupScheduled">The group that owns the currently scheduled storyboard.</param>
            <param name="pGroupNew">The group that owns the new storyboard that is in scheduling conflict with the scheduled storyboard owned by pGroupScheduled.</param>
            <param name="priorityEffect">The potential effect on pGroupNew if pGroupScheduled has a higher priority.</param>
        </member>
        <member name="M:CAnimationController.OnStoryboardUpdated(CAnimationGroup*)">
            <summary>
Called by the framework when storyboard has been updated.
</summary>
            <remarks>
This method is called if you enable storyboard events using CAnimationController::EnableStoryboardEventHandler.
It can be overridden in a derived class to take application-specific actions.
</remarks>
            <param name="pGroup">A pointer to a group that owns the storyboard.</param>
        </member>
        <member name="M:CAnimationController.OnStoryboardStatusChanged(CAnimationGroup*,__MIDL___MIDL_itf_UIAnimation_0000_0002_0001,__MIDL___MIDL_itf_UIAnimation_0000_0002_0001)">
            <summary>
Called by the framework when storyboard status has changed.
</summary>
            <remarks>
This method is called if you enable storyboard events using CAnimationController::EnableStoryboardEventHandler.
It can be overridden in a derived class to take application-specific actions.
</remarks>
            <param name="pGroup">A pointer to an animation group that owns the storyboard whose status has changed.</param>
            <param name="newStatus">Specifies the new status.</param>
            <param name="previousStatus">Specifies the previous status.</param>
        </member>
        <member name="M:CAnimationController.OnAnimationIntegerValueChanged(CAnimationGroup*,CAnimationBaseObject*,IUIAnimationVariable*,System.Int32,System.Int32)">
            <summary>
Called by the framework when integer value of animation variable has changed.
</summary>
            <remarks>
This method is called if you enable animation variable events with EnableIntegerValueChangedEvent called for a specific
animation variable or animation object.
It can be overridden in a derived class to take application-specific actions.
</remarks>
            <param name="pGroup">A pointer to an animation group that holds an animation object whose value has changed.</param>
            <param name="pObject">A pointer to an animation object that contains an animation variable whose value has changed.</param>
            <param name="variable">A pointer to an animation variable.</param>
            <param name="newValue">Specifies new value.</param>
            <param name="prevValue">Specifies previous value.</param>
        </member>
        <member name="M:CAnimationController.OnAnimationValueChanged(CAnimationGroup*,CAnimationBaseObject*,IUIAnimationVariable*,System.Double,System.Double)">
            <summary>
Called by the framework when value of animation variable has changed.
</summary>
            <remarks>
This method is called if you enable animation variable events with EnableValueChangedEvent called for a specific
animation variable or animation object.
It can be overridden in a derived class to take application-specific actions.
</remarks>
            <param name="pGroup">A pointer to an animation group that holds an animation object whose value has changed.</param>
            <param name="pObject">A pointer to an animation object that contains an animation variable whose value has changed.</param>
            <param name="variable">A pointer to an animation variable.</param>
            <param name="newValue">Specifies new value.</param>
            <param name="prevValue">Specifies previous value.</param>
        </member>
        <member name="M:CAnimationController.OnAnimationManagerStatusChanged(__MIDL___MIDL_itf_UIAnimation_0000_0000_0002,__MIDL___MIDL_itf_UIAnimation_0000_0000_0002)">
            <summary>
Called by the framework in response to StatusChanged event from animation manager.
</summary>
            <remarks>
This method is called if you enable animation manager events with EnableAnimationManagerEvent.
It can be overridden in a derived class to take application-specific actions. The default implementation
updates a related window if it has been set with SetRelatedWnd.
</remarks>
            <param name="newStatus">New animation manager status.</param>
            <param name="previousStatus">Previous animation manager status.</param>
        </member>
        <member name="M:CAnimationController.OnBeforeAnimationStart(CAnimationGroup*)">
            <summary>
Called by the framework right before the animation is scheduled.
</summary>
            <remarks>
This call is routed to related CWnd and can be overridden in a derived class to perform any
additional actions before the animation starts for the specified group.
</remarks>
            <param name="pGroup">A pointer to an animation group whose animation is about to start.</param>
        </member>
        <member name="M:CAnimationController.CleanUpGroup(System.UInt32)">
            <summary>
Called by the framework to clean up the group when animation has been scheduled.
</summary>
            <remarks>
This method removes all transitions and keyframes from the specified group, because they are not relevant
after an animation has been scheduled.
</remarks>
            <param name="nGroupID">Specifies GroupID.</param>
        </member>
        <member name="M:CAnimationController.ScheduleGroup(System.UInt32,System.Double)">
            <summary>
Schedules an animation.
</summary>
            <returns>
TRUE if animation was scheduled successfully. FALSE if storyboard has not been created, or other error occurs.
</returns>
            <remarks>
You must call AnimateGroup with parameter bScheduleNow set to FALSE prior ScheduleGroup. You can specify the
desired animation time obtained from IUIAnimationTimer::GetTime. If the time parameter is 0.0, the animation is scheduled for the
current time.
</remarks>
            <param name="nGroupID">Specifies animation Group ID to schedule.</param>
            <param name="time">Specifies time to schedule.</param>
        </member>
        <member name="M:CAnimationController.AnimateGroup(System.UInt32,System.Int32)">
            <summary>
Prepares a group to run animation and optionally schedules it.
</summary>
            <returns>
TRUE if animation was successfully scheduled and run.
</returns>
            <remarks>
This method does the actual work creating storyboard, adding animation variables, applying transitions and setting keyframes.
It's possible to delay scheduling if you set bScheduleNow to FALSE. In this case the specified group
will hold a storyboard that has been set up for animation. At that point you can setup events for the storyboard and
animation variables. When you actually need to run the animation call CAnimationController::ScheduleGroup.
</remarks>
            <param name="nGroupID">Specifies GroupID.</param>
            <param name="bScheduleNow">Specifies whether to run animation right away.</param>
        </member>
        <member name="M:CAnimationController.FindAnimationObject(IUIAnimationVariable*,CAnimationBaseObject**,CAnimationGroup**)">
            <summary>
Finds animation object containing a specified animation variable.
</summary>
            <returns>
TRUE if object was found; otherwise FALSE.
</returns>
            <remarks>
Called from event handlers when it's required to find an animation object from incoming animation variable.
</remarks>
            <param name="pVariable">A pointer to animation variable.</param>
            <param name="ppObject">Output. Contains a pointer to animation object or NULL. </param>
            <param name="ppGroup">Output. Contains a pointer to animation group that holds the animation object, or NULL.</param>
        </member>
        <member name="M:CAnimationController.FindAnimationGroup(IUIAnimationStoryboard*)">
            <summary>
Finds an animation group by its storyboard.
</summary>
            <returns>
A pointer to animation group if succeeds, or NULL if no group plays the specified storyboard.
</returns>
            <remarks>
This method is usually called from event handlers to find a group by pointer to storyboard that comes as a parameter to an event handler.
</remarks>
            <param name="pStoryboard">A pointer to a storyboard.</param>
        </member>
        <member name="M:CAnimationController.FindAnimationGroup(System.UInt32)">
            <summary>
Finds an animation group by its Group ID.
</summary>
            <returns>
A pointer to animation group or NULL if the group with specified ID is not found.
</returns>
            <remarks>
Use this method to find an animation group at runtime. A group is created and added to the internal list of animation groups
when a first animation object with particular GroupID is being added to animation controller.
</remarks>
            <param name="nGroupID">Specifies a GroupID.</param>
        </member>
        <member name="M:CAnimationController.AddKeyframeToGroup(System.UInt32,CBaseKeyFrame*)">
            <summary>
Adds a keyframe to group.
</summary>
            <returns>
TRUE if the function succeeds; otherwise FALSE.
</returns>
            <remarks>
Usually you don't need to call this method, use CAnimationController::CreateKeyframe instead, which creates
and adds the created keyframe to a group automatically.
</remarks>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="pKeyframe">A pointer to a keyframe.</param>
        </member>
        <member name="M:CAnimationController.CreateKeyframe(System.UInt32,CBaseKeyFrame*,System.Double)">
            <summary>
Creates a keyframe that depends on other keyframe with optional offset in seconds and adds it to the specified group.
</summary>
            <returns>
A pointer to newly created keyframe if the function succeeds.
</returns>
            <remarks>
You can store the returned pointer and base other keyframes on the newly created keyframe (see the second overload).
It's possible to begin transitions at keyframes - see CBaseTransition::SetKeyframes.
You don't need to delete keyframes created in this way, because they are deleted automatically by animation groups.
Be careful when creating keyframes based on other keyframes and transitions and avoid circular references.
</remarks>
            <param name="nGroupID">Specifies Group ID for which keyframe is created.</param>
            <param name="pKeyframe">A  pointer to base keyframe for this keyframe.</param>
            <param name="offset">Offset in seconds from the base keyframe specified by pKeyframe.</param>
        </member>
        <member name="M:CAnimationController.CreateKeyframe(System.UInt32,CBaseTransition*)">
            <summary>
Creates a keyframe that depends on transition and adds it to the specified group.
</summary>
            <returns>
A pointer to newly created keyframe if the function succeeds.
</returns>
            <remarks>
You can store the returned pointer and base other keyframes on the newly created keyframe (see the second overload).
It's possible to begin transitions at keyframes - see CBaseTransition::SetKeyframes.
You don't need to delete keyframes created in this way, because they are deleted automatically by animation groups.
Be careful when creating keyframes based on other keyframes and transitions and avoid circular references.
</remarks>
            <param name="nGroupID">Specifies Group ID for which keyframe is created.</param>
            <param name="pTransition">A pointer to transition. Keyframe will be inserted to storyboard after this transition.</param>
        </member>
        <member name="M:CAnimationController.RemoveTransitions(System.UInt32)">
            <summary>
Removes transitions from animation objects that belong to the specified group.
</summary>
            <remarks>
The group loops over its animation objects and calls ClearTransitions(FALSE) for each animation object.
This method is called by the framework after animation has been scheduled.
</remarks>
            <param name="nGroupID">Specifies Group ID.</param>
        </member>
        <member name="M:CAnimationController.RemoveAllAnimationGroups">
            <summary>
Removes all animation groups from animation controller.
</summary>
            <remarks>
All groups will be deleted, their pointer, if stored at the application level, must be invalidated.
If CAnimationGroup::m_bAutodestroyAnimationObjects for a group being deleted is TRUE,
all animation objects that belong to that group will be deleted; otherwise their references to parent animation
controller will be set to NULL and they can be added to another controller.
</remarks>
        </member>
        <member name="M:CAnimationController.RemoveAnimationGroup(System.UInt32)">
            <summary>
Removes an animation group with specified ID from animation controller.
</summary>
            <remarks>
This method removes an animation group from the internal list of groups and deletes it, therefore if you stored
a pointer to that animation group, it must be invalidated. If CAnimationGroup::m_bAutodestroyAnimationObjects is TRUE,
all animation objects that belong to that group will be deleted; otherwise their references to parent animation
controller will be set to NULL and they can be added to another controller.
</remarks>
            <param name="nGroupID">Specifies animation group ID.</param>
        </member>
        <member name="M:CAnimationController.RemoveAnimationObject(CAnimationBaseObject*,System.Int32)">
            <summary>
Remove an animation object from animation controller.
</summary>
            <remarks>
Removes an animation object from animation controller and animation group. Call this function if
a particular object should not be animated anymore, or if you need to move the object to another animation controller.
In the last case bNoDelete must be TRUE.
</remarks>
            <param name="pObject">A pointer to an animation object.</param>
            <param name="bNoDelete">If this parameter is TRUE the object will not be deleted upon remove.</param>
        </member>
        <member name="M:CAnimationController.AddAnimationObject(CAnimationBaseObject*)">
            <summary>
Adds an animation object to a group that belongs to the animation controller.
</summary>
            <returns>
A pointer to existing or new animation group where pObject has been added if function succeeds; NULL if
pObject has already been added to a group that belongs to another animation controller.
</returns>
            <remarks>
Call this method to add an animation object to the animation controller. An object will be added to a group
according to object's GroupID (see CAnimationBaseObject::SetID). The animation controller will create a new
group if it's the first object being added with the specified GroupID. An animation object can be added to
one animation controller only. If you need to add an object to another controller, call RemoveAnimationObject first.
If you call SetID with new GroupID for an object that has been already added to a group, the object will be removed
from the old group and added to another group with specified ID.
</remarks>
            <param name="pObject">A pointer to an animation object.</param>
        </member>
        <member name="M:CAnimationController.SetRelatedWnd(CWnd*)">
            <summary>
Establishes a relationship between animation controller and a window.
</summary>
            <remarks>
If a related CWnd object is set, the animation controller can automatically update it (send WM_PAINT message) when
the status of animation manager has changed or timer post update event has occurred.
</remarks>
            <param name="pWnd">A pointer to window object to set.</param>
        </member>
        <member name="M:CAnimationController.IsAnimationInProgress">
            <summary>
Tells whether at least one group is playing animation.
</summary>
            <returns>
TRUE if there is an animation in progress for this animation controller; otherwise FALSE.
</returns>
            <remarks>
Checks status of animation manager and returns TRUE if the status is UI_ANIMATION_MANAGER_BUSY.
</remarks>
        </member>
        <member name="M:CAnimationController.UpdateAnimationManager">
            <summary>
Directs the animation manager to update the values of all animation variables.
</summary>
            <remarks>
Calling this method advances the animation manager to current time, changing statuses of storyboards as necessary
and updating any animation variables to appropriate interpolated values. Internally this method calls
IUIAnimationTimer::GetTime(timeNow) and IUIAnimationManager::Update(timeNow). Override this method in a derived
class to customize this behavior.
</remarks>
        </member>
        <member name="M:CAnimationController.EnableAnimationTimerEventHandler(System.Int32,__MIDL___MIDL_itf_UIAnimation_0000_0012_0001)">
            <summary>
Sets or releases a handler for timing events and handler for timing updates.
</summary>
            <returns>
TRUE if handlers were successfully set or released; FALSE if this method is called for a second time without
releasing the handlers first, or if any other error occurs.
</returns>
            <remarks>
When the handlers are set (enabled) Windows Animation API calls OnAnimationTimerPreUpdate, OnAnimationTimerPostUpdate,
OnRenderingTooSlow methods.
You need to enable animation timers to allow Windows Animation API update storyboards. Otherwise you'll need to
call CAnimationController::UpdateAnimationManager in order to direct the animation manager to update the values
of all animation variables.
</remarks>
            <param name="bEnable">Specifies whether to set or release the handlers.</param>
            <param name="idleBehavior">Specifies idle behavior for timer update handler.</param>
        </member>
        <member name="M:CAnimationController.EnableStoryboardEventHandler(System.UInt32,System.Int32)">
            <summary>
Sets or releases a handler for storyboard status and update events.
</summary>
            <returns>
TRUE if the handler was successfully set or released; FALSE if the specified animation group is now found or
animation for the specified group has not been initiated and its internal storyboard is NULL.
</returns>
            <remarks>
When a handler is set (enabled) Windows Animation API calls OnStoryboardStatusChanges and OnStoryboardUpdated virtual methods.
A handler must be set after CAnimationController::Animate has been called for the specified animation group, because
it creates encapsulated IUIAnimationStoryboard object.
</remarks>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="bEnable">Specifies whether to set or release a handler.</param>
        </member>
        <member name="M:CAnimationController.EnablePriorityComparisonHandler(System.UInt64)">
            <summary>
Sets or releases the priority comparison handler to call to determine whether a scheduled storyboard can be cancelled,
concluded, trimmed or compressed.
</summary>
            <returns>
TRUE if the handler was successfully set or released.
</returns>
            <remarks>
When a handler is set (enabled) Windows Animation calls the following virtual methods depending on dwHandlerType:
OnHasPriorityCancel, OnHasPriorityConclude, OnHasPriorityTrim, OnHasPriorityCompress.
dwHandler can be a combination of the following flags:
UI_ANIMATION_PHT_NONE - release all handlers
UI_ANIMATION_PHT_CANCEL - set Cancel comparison handler
UI_ANIMATION_PHT_CONCLUDE - set Conclude comparison handler
UI_ANIMATION_PHT_COMPRESS - set Compress comparison handler
UI_ANIMATION_PHT_TRIM - set Trim comparison handler
UI_ANIMATION_PHT_CANCEL_REMOVE - remove Cancel comparison handler
UI_ANIMATION_PHT_CONCLUDE_REMOVE - remove Conclude comparison handler
UI_ANIMATION_PHT_COMPRESS_REMOVE - remove Compress comparison handler
UI_ANIMATION_PHT_TRIM_REMOVE - remove Trim comparison handler
</remarks>
            <param name="dwHandlerType">A combination of UI_ANIMATION_PHT_ flags (see remarks), which specifies what handlers to set or release.</param>
        </member>
        <member name="M:CAnimationController.EnableAnimationManagerEvent(System.Int32)">
            <summary>
Sets or releases a handler to call when animation manager's status changes.
</summary>
            <returns>
TRUE if the handler was successfully set or released.
</returns>
            <remarks>
When a handler is set (enabled) Windows Animation calls OnAnimationManagerStatusChanged when animation manager's status changes.
</remarks>
            <param name="bEnable">Specifies whether to set or release a handler.</param>
        </member>
        <member name="M:CAnimationController.GetKeyframeStoryboardStart">
            <summary>
Returns a keyframe that identifies start of storyboard.
</summary>
            <returns>
A pointer to base keyframe, which identifies start of storyboard.
</returns>
            <remarks>
Obtain this keyframe to base any other keyframes or transitions on the moment in time when a storyboard starts.
</remarks>
        </member>
        <member name="M:CAnimationController.IsValid">
            <summary>
Tells whether animation controller is valid.
</summary>
            <returns>
TRUE if animation controller is valid; otherwise FALSE.
</returns>
            <remarks>
This method returns FALSE only if Windows Animation API is not supported on the current OS and creation of
animation manager failed because it's not registered. You need to call GetUIAnimationManager at least once after initialization of
COM libraries to cause setting of this flag.
</remarks>
        </member>
        <member name="M:CAnimationController.GetUITransitionFactory">
            <summary>
A pointer to IUIAnimationTransitionFactory interface or NULL, if creation of transition library failed.
</summary>
            <returns>
A pointer to IUIAnimationTransitionFactory or NULL, if creation of transition factory failed.
</returns>
            <remarks>
If current OS does not support Windows Animation API, this method returns NULL and after that all subsequent calls
on CAnimationController::IsValid return FALSE.
</remarks>
        </member>
        <member name="M:CAnimationController.GetUIAnimationTimer">
            <summary>
Provides access to encapsulated IUIAnimationTimer object.
</summary>
            <returns>
A pointer to IUIAnimationTimer interface or NULL, if creation of animation timer failed.
</returns>
            <remarks>
If current OS does not support Windows Animation API, this method returns NULL and after that all subsequent calls
on CAnimationController::IsValid return FALSE.
</remarks>
        </member>
        <member name="M:CAnimationController.GetUITransitionLibrary">
            <summary>
Provides access to encapsulated IUIAnimationTransitionLibrary object.
</summary>
            <returns>
A pointer to IUIAnimationTransitionLibrary interface or NULL, if creation of transition library failed.
</returns>
            <remarks>
If current OS does not support Windows Animation API, this method returns NULL and after that all subsequent calls
on CAnimationController::IsValid return FALSE.
</remarks>
        </member>
        <member name="M:CAnimationController.GetUIAnimationManager">
            <summary>
Provides access to encapsulated IUIAnimationManager object.
</summary>
            <returns>
A pointer to IUIAnimationManager interface or NULL, if creation of animation manager failed.
</returns>
            <remarks>
If current OS does not support Windows Animation API, this method returns NULL and after that all subsequent calls
on CAnimationController::IsValid return FALSE.
You may need to access IUIAnimationManager in order to call its interface methods, which are not wrapped by
animation controller.
</remarks>
        </member>
        <member name="M:CAnimationController.Dispose">
            <summary>
The destructor. Called when animation controller object is being destroyed.
</summary>
        </member>
        <member name="M:CAnimationController.#ctor">
            <summary>
Constructs an animation controller.
</summary>
        </member>
        <member name="F:CAnimationController.g_KeyframeStoryboardStart">
            <summary>
A keyframe that represents start of storyboard.
</summary>
        </member>
        <member name="F:CAnimationController.m_lstAnimationGroups">
            <summary>
A list of animation groups that belong to this animation controller.
</summary>
        </member>
        <member name="F:CAnimationController.m_pRelatedWnd">
            <summary>
A pointer to a related CWnd object, which can be automatically redrawn when
the status of animation manager has changed, or post update event has occurred. Can be NULL.
</summary>
        </member>
        <member name="F:CAnimationController.m_pTransitionFactory">
            <summary>
Stores a pointer to Transition Factory COM object.
</summary>
        </member>
        <member name="F:CAnimationController.m_pAnimationTimer">
            <summary>
Stores a pointer to Animation Timer COM object.
</summary>
        </member>
        <member name="F:CAnimationController.m_pTransitionLibrary">
            <summary>
Stores a pointer to Transition Library COM object.
</summary>
        </member>
        <member name="F:CAnimationController.m_pAnimationManager">
            <summary>
Stores a pointer to Animation Manager COM object.
</summary>
        </member>
        <member name="F:CAnimationController.m_bIsValid">
            <summary>
Specifies whether an animation controller is valid or not.
This member is set to FALSE if current OS does not support Windows Animation API.
</summary>
        </member>
        <member name="T:CAnimationController">
            <summary>
Implements the animation controller, which provides a central interface for creating and managing UI animations.
</summary>
            <remarks>
The CAnimationController class is the key class that manages animations.
You may create one or more instances of animation controller in an application and, optionally, connect an instance of
animation controller to a CWnd object using CAnimationController::SetRelatedWnd. This connection is required to send WM_PAINT messages
to the related window automatically when animation manager status has changed or animation timer has been updated.
If you do not enable this relation, you must redraw a window that displays an animation manually. For this purpose you can derive a class
from CAnimationController and override OnAnimationManagerStatusChanged and/or OnAnimationTimerPostUpdate and invalidate one or
more windows when necessary.
</remarks>
        </member>
        <member name="F:CAnimationGroup.m_bAutodestroyAnimationObjects">
            <summary>
Specifies how to destroy animation objects. If this parameter is TRUE, animation objects will be destroyed automatically
when the group is destroyed. Otherwise animation objects must be destroyed manually. The default value is FALSE.
Set this value to TRUE only if all animation objects that belong to group are allocated dynamically with operator new.
</summary>
        </member>
        <member name="F:CAnimationGroup.m_bAutoclearTransitions">
            <summary>
Specifies how to clear transitions from animation objects that belong to group. If this member is TRUE,
transitions are removed automatically when an animation has been scheduled. Otherwise you need to remove
transitions manually.
</summary>
        </member>
        <member name="F:CAnimationGroup.m_bAutodestroyKeyframes">
            <summary>
Specifies how to destroy keyframes. If this value is TRUE, all keyframes are removed and destroyed;
otherwise they are removed from the list only. The default value is TRUE.
</summary>
        </member>
        <member name="F:CAnimationGroup.m_pStoryboard">
            <summary>
Points to animation storyboard. This pointer is valid only after call on Animate.
</summary>
        </member>
        <member name="F:CAnimationGroup.m_lstKeyFrames">
            <summary>
Contains a list of keyframes.
</summary>
        </member>
        <member name="F:CAnimationGroup.m_lstAnimationObjects">
            <summary>
Contains a list of animation objects.
</summary>
        </member>
        <member name="M:CAnimationGroup.SetAutodestroyTransitions(System.Int32)">
            <summary>
Directs all animation objects that belong to group automatically destroy transitions.
</summary>
            <remarks>
Set this value to FALSE only if you allocate transitions on the stack. The default value is TRUE, therefore
it's highly recommended to allocate transition objects using operator new.
</remarks>
            <param name="bAutoDestroy">Specifies how to destroy transitions.</param>
        </member>
        <member name="M:CAnimationGroup.Schedule(IUIAnimationTimer*,System.Double)">
            <summary>
Schedules an animation at the specified time.
</summary>
            <returns>
TRUE if the method succeeds; FALSE if the method fails or if Animate has not been called with bScheduleNow set to FALSE.
</returns>
            <remarks>
Call this function to schedule an animation at the specified time. You must call Animate with bScheduleNow set to FALSE first.
</remarks>
            <param name="pTimer">A pointer to animation timer.</param>
            <param name="time">Specifies time to schedule the animation.</param>
        </member>
        <member name="M:CAnimationGroup.Animate(IUIAnimationManager*,IUIAnimationTimer*,System.Int32)">
            <summary>
Animates a group.
</summary>
            <returns>
TRUE if the method succeeds; otherwise FALSE.
</returns>
            <remarks>
This method creates an internal storyboard, creates and applies transitions and schedules an animation
if bScheduleNow is TRUE. If bScheduleNow is FALSE, you need to call Schedule to start animation at the
specified time.
</remarks>
            <param name="pManager" />
            <param name="pTimer" />
            <param name="bScheduleNow" />
        </member>
        <member name="M:CAnimationGroup.FindAnimationObject(IUIAnimationVariable*)">
            <summary>
Finds an animation object that contains the specified animation variable.
</summary>
            <returns>
A pointer to animation object, or NULL if animation object is not found.
</returns>
            <param name="pVariable">A pointer to animation variable.</param>
        </member>
        <member name="M:CAnimationGroup.RemoveKeyframes">
            <summary>
Removes and optionally destroys all keyframes that belong to an animation group.
</summary>
            <remarks>
If m_bAutodestroyKeyframes member is TRUE then keyframes are removed and destroyed, otherwise keyframes are
just removed from the internal list of keyframes.
</remarks>
        </member>
        <member name="M:CAnimationGroup.RemoveTransitions">
            <summary>
Removes transitions from animation objects that belong to an animation group.
</summary>
            <remarks>
If m_bAutoclearTransitions flag is set to TRUE, this method loops over all animation objects that belong to the group
and calls CAnimationObject::ClearTransitions(FALSE).
</remarks>
        </member>
        <member name="M:CAnimationGroup.ApplyTransitions">
            <summary>
Applies transitions to animation objects.
</summary>
            <remarks>
This method ASSERTS in debug mode if storyboard has not been created.
It creates all transitions first, then adds "static" keyframes (keyframes that depend on offsets),
adds transitions that do not depend on keyframes, adds keyframes depending on transitions and other keyframes,
and at last adds transitions that depend on keyframes.
</remarks>
        </member>
        <member name="M:CAnimationGroup.GetGroupID">
            <summary>
Returns GroupID.
</summary>
            <returns>
A group identifier.
</returns>
        </member>
        <member name="M:CAnimationGroup.Dispose">
            <summary>
The destructor. Called when an animation group is being destroyed.
</summary>
        </member>
        <member name="M:CAnimationGroup.#ctor(CAnimationController*,System.UInt32)">
            <summary>
Constructs an animation group.
</summary>
            <param name="pParentController">A pointer to animation controller that creates a group.</param>
            <param name="nGroupID">Specifies GroupID.</param>
        </member>
        <member name="M:CAnimationGroup.CreateTransitions">
            <summary>
A helper that creates COM transition objects.
</summary>
            <returns>
TRUE is the method succeeds, otherwise FALSE.
</returns>
        </member>
        <member name="M:CAnimationGroup.AddTransitions(IUIAnimationStoryboard*,System.Int32)">
            <summary>
A helper that adds transitions to a storyboard.
</summary>
            <param name="pStoryboard">A pointer to a storyboard COM object.</param>
            <param name="bDependOnKeyframes">Specifies whether this method should add to the storyboard transitions that depend on other keyframes.</param>
        </member>
        <member name="M:CAnimationGroup.AddKeyframes(IUIAnimationStoryboard*,System.Int32)">
            <summary>
A helper that adds keyframes to a storyboard.
</summary>
            <param name="pStoryboard">A pointer to a storyboard COM object.</param>
            <param name="bAddDeep">Specifies whether this method should add to the storyboard keyframes that depend on other keyframes.</param>
        </member>
        <member name="F:CAnimationGroup.m_pParentController">
            <summary>
A pointer to animation controller this group belongs to.
</summary>
        </member>
        <member name="F:CAnimationGroup.m_nGroupID">
            <summary>
A unique identifier of animation group.
</summary>
        </member>
        <member name="T:CAnimationGroup">
            <summary>
Implements an animation group, which combines an animation storyboard, animation objects and transitions
to define an animation.
</summary>
            <remarks>
Animation groups are created automatically by animation controller (CAnimationController) when you add animation
objects using CAnimationController::AddAnimationObject.
An animation group is identified by GroupID, which is usually taken as a parameter to manipulate animation groups.
The GroupID is taken from the first animation object being added to a new animation group.
An encapsulated animation storyboard is created after you call CAnimationController::AnimateGroup and can be
accessed via public member m_pStoryboard.
</remarks>
        </member>
        <member name="M:CAnimationRect.GetAnimationVariableList(CList&lt;CAnimationVariable**,CAnimationVariable**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Puts the encapsulated animation variables into a list.
</summary>
            <param name="lst">When the function returns, it contains pointers to four CAnimationVariable objects
representing coordinates of rectangle.</param>
        </member>
        <member name="F:CAnimationRect.m_bFixedSize">
            <summary>
Specifies whether the rectangle has fixed size.
</summary>
            <remarks>
If this member is true, then the size of rectangle is fixed and right and bottom values
are recalculated each time the top-left corner is  moved according to the fixed size.
Set this value to TRUE to easily move the rectangle around the screen. In this case transitions applied to
right and bottom coordinates are ignored. The size is stored internally when you construct the object and/or
call SetDefaultValue. By default this member is set to FALSE.
</remarks>
        </member>
        <member name="M:CAnimationRect.AddTransition(CBaseTransition*,CBaseTransition*,CBaseTransition*,CBaseTransition*)">
            <summary>
Adds transitions for left, top, right and bottom coordinates.
</summary>
            <remarks>
Call this function to add the specified transitions to the internal list of transitions to be applied to animation variables for each rectangle sides.
When you add transitions, they are not applied immediately and stored in an internal list. Transitions are applied
(added to a storyboard for a particular value) when you call CAnimationController::AnimateGroup.
If you don't need to apply a transition to one of the rectangle sides, you can pass NULL.
</remarks>
            <param name="pLeftTransition">Specifies transition for the left side.</param>
            <param name="pTopTransition">Specifies transition for the top side.</param>
            <param name="pRightTransition">Specifies transition for the right side.</param>
            <param name="pBottomTransition">Specifies transition for the bottom side.</param>
        </member>
        <member name="M:CAnimationRect.op_Implicit~tagRECT">
            <summary>
Converts a CAnimationRect to RECT.
</summary>
            <returns>
Current value of animation rectangle as RECT.
</returns>
            <remarks>
This function internally calls GetValue. If GetValue for some reason fails, the returned RECT will contain default values for all rectangle coordinates.
</remarks>
        </member>
        <member name="M:CAnimationRect.op_Assign(tagRECT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Assigns rect to CAnimationRect.
</summary>
            <remarks>
It's recommended to do that before animation start, because this operator calls
SetDefaultValue, which recreates the underlying COM objects for color components if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="rect">The new value of animation rectangle.</param>
        </member>
        <member name="M:CAnimationRect.GetBottom">
            <summary>
Provides access to CAnimationVariable representing bottom coordinate.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing bottom coordinate.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing the bottom coordinate.
</remarks>
        </member>
        <member name="M:CAnimationRect.GetRight">
            <summary>
Provides access to CAnimationVariable representing right coordinate.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing right coordinate.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing the right coordinate.
</remarks>
        </member>
        <member name="M:CAnimationRect.GetTop">
            <summary>
Provides access to CAnimationVariable representing top coordinate.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing top coordinate.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing the top coordinate.
</remarks>
        </member>
        <member name="M:CAnimationRect.GetLeft">
            <summary>
Provides access to CAnimationVariable representing left coordinate.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing left coordinate.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing the left coordinate.
</remarks>
        </member>
        <member name="M:CAnimationRect.GetValue(CRect*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns current value.
</summary>
            <returns>
TRUE, if the current value was successfully retrieved; otherwise FALSE.
</returns>
            <remarks>
Call this function to retrieve the current value of animation rectangle. If this method fails or underlying COM objects for
left, top, right and bottom have not been initialized, rect contains default value, which was previously set in constructor or by SetDefaultValue.
</remarks>
            <param name="rect">Output. Contains the current value when this method returns.</param>
        </member>
        <member name="M:CAnimationRect.GetDefaultValue">
            <summary>
Returns the default values for rectangle's bounds.
</summary>
            <returns>
A CRect value containing defaults for left, right, top and bottom.
</returns>
            <remarks>
Call this function to retrieve default value, which was previously set by constructor or SetDefaultValue.
</remarks>
        </member>
        <member name="M:CAnimationRect.SetDefaultValue(CRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets default value.
</summary>
            <remarks>
Use this function to set a default value to animation object. This methods assigns default values to rectangle's bounds.
It also recreates underlying COM objects if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="rect">Specifies new default values for left, top, right and bottom.</param>
        </member>
        <member name="M:CAnimationRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs an animation rect object.
</summary>
            <remarks>
The object is constructed with specified coordinates of each side, Object ID and Group ID. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
            <param name="nLeft">Specifies coordinate of left bound.</param>
            <param name="nTop">Specifies coordinate of top bound.</param>
            <param name="nRight">Specifies coordinate of right bound.</param>
            <param name="nBottom">Specifies coordinate of bottom bound.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">Specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationRect.#ctor(CPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,CSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs an animation rect object.
</summary>
            <remarks>
The object is constructed with specified top-left corner coordinates and size of rectangle, Object ID and Group ID. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
            <param name="pt">Coordinate of top-left corner.</param>
            <param name="sz">Size of rectangle.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">Specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationRect.#ctor(CRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs an animation rect object.
</summary>
            <remarks>
The object is constructed with specified rect coordinates, Object ID and Group ID. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
            <param name="rect">Specifies default rectangle.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">Specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationRect.#ctor">
            <summary>
Constructs a CAnimationRect object.
</summary>
            <remarks>
The object is constructed with default values for left, top, right and bottom, Object ID and Group ID, which will be set to 0. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
        </member>
        <member name="F:CAnimationRect.m_szInitial">
            <summary>
Specifies initial size of animation rectangle.
</summary>
        </member>
        <member name="F:CAnimationRect.m_bottomValue">
            <summary>
The encapsulated animation variable that represents Bottom bound of animation rectangle.
</summary>
        </member>
        <member name="F:CAnimationRect.m_rightValue">
            <summary>
The encapsulated animation variable that represents Right bound of animation rectangle.
</summary>
        </member>
        <member name="F:CAnimationRect.m_topValue">
            <summary>
The encapsulated animation variable that represents Top bound of animation rectangle.
</summary>
        </member>
        <member name="F:CAnimationRect.m_leftValue">
            <summary>
The encapsulated animation variable that represents Left bound of animation rectangle.
</summary>
        </member>
        <member name="T:CAnimationRect">
            <summary>
Implements the functionality of a rectangle whose top, left, right and bottom sides can be animated.
</summary>
            <remarks>
The CAnimationRect class encapsulates four CAnimationVariable objects and can represent in applications
a rectangle.
To use this class in application, just instantiate an object of this class, add it to animation controller using
CAnimationController::AddAnimationObject and call AddTransition for each transition to be applied to left, right top and bottom coordinates.
</remarks>
        </member>
        <member name="M:CAnimationColor.GetAnimationVariableList(CList&lt;CAnimationVariable**,CAnimationVariable**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Puts the encapsulated animation variables into a list.
</summary>
            <param name="lst">When the function returns, it contains pointers to three CAnimationVariable objects
representing red, green and blue components.</param>
        </member>
        <member name="M:CAnimationColor.AddTransition(CBaseTransition*,CBaseTransition*,CBaseTransition*)">
            <summary>
Adds transitions for Red, Green and Blue components.
</summary>
            <remarks>
Call this function to add the specified transitions to the internal list of transitions to be applied to animation variables representing color components.
When you add transitions, they are not applied immediately and stored in an internal list. Transitions are applied
(added to a storyboard for a particular value) when you call CAnimationController::AnimateGroup.
If you don't need to apply a transition to one of the color components, you can pass NULL.
</remarks>
            <param name="pRTransition">Transition for Red component.</param>
            <param name="pGTransition">Transition for Green component.</param>
            <param name="pBTransition">Transition for Blue component.</param>
        </member>
        <member name="M:CAnimationColor.op_Implicit~System.UInt32!System.Runtime.CompilerServices.IsLong">
            <summary>
Converts a CAnimationColor to COLORREF.
</summary>
            <returns>
Current value of animation color object as COLORREF.
</returns>
            <remarks>
This function internally calls GetValue. If GetValue for some reason fails, the returned COLORREF will contain default values for all color components.
</remarks>
        </member>
        <member name="M:CAnimationColor.op_Assign(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Assigns color to CAnimationColor.
</summary>
            <remarks>
It's recommended to do that before animation start, because this operator calls
SetDefaultValue, which recreates the underlying COM objects for color components if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="color">Specifies new value Animation Color.</param>
        </member>
        <member name="M:CAnimationColor.GetB">
            <summary>
Provides access to CAnimationVariable representing Blue component.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing Blue component.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing Blue component.
</remarks>
        </member>
        <member name="M:CAnimationColor.GetG">
            <summary>
Provides access to CAnimationVariable representing Green component.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing Green component.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing Green component.
</remarks>
        </member>
        <member name="M:CAnimationColor.GetR">
            <summary>
Provides access to CAnimationVariable representing Red component.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing Red component.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing Red component.
</remarks>
        </member>
        <member name="M:CAnimationColor.GetValue(System.UInt32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns current value.
</summary>
            <returns>
TRUE, if the current value was successfully retrieved; otherwise FALSE.
</returns>
            <remarks>
Call this function to retrieve the current value of animation color. If this method fails or underlying COM objects for
color components have not been initialized, color contains default value, which was previously set in constructor or by SetDefaultValue.
</remarks>
            <param name="color">Output. Contains the current value when this method returns.</param>
        </member>
        <member name="M:CAnimationColor.GetDefaultValue">
            <summary>
Returns the default values for color components.
</summary>
            <returns>
A COLORREF value containing defaults for RGB components.
</returns>
            <remarks>
Call this function to retrieve default value, which was previously set by constructor or SetDefaultValue.
</remarks>
        </member>
        <member name="M:CAnimationColor.SetDefaultValue(System.UInt32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Sets default value.
</summary>
            <remarks>
Use this function to set a default value to animation object. This methods assigns default values to color components
of animation color. It also recreates underlying COM objects if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="color">Specifies new default values for red, green and blue components.</param>
        </member>
        <member name="M:CAnimationColor.#ctor(System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs an animation color object.
</summary>
            <remarks>
The object is constructed with specified values for RGB components, Object ID and Group ID. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
            <param name="color">Specifies default color.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">Specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationColor.#ctor">
            <summary>
Constructs a CAnimationColor object.
</summary>
            <remarks>
The object is constructed with default values for red, green, blue, Object ID and Group ID, which will be set to 0. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
        </member>
        <member name="F:CAnimationColor.m_bValue">
            <summary>
The encapsulated animation variable that represents Blue component of animation color.
</summary>
        </member>
        <member name="F:CAnimationColor.m_gValue">
            <summary>
The encapsulated animation variable that represents Green component of animation color.
</summary>
        </member>
        <member name="F:CAnimationColor.m_rValue">
            <summary>
The encapsulated animation variable that represents Red component of animation color.
</summary>
        </member>
        <member name="T:CAnimationColor">
            <summary>
Implements the functionality of a color whose red, green and blue components can be animated.
</summary>
            <remarks>
The CAnimationColor class encapsulates three CAnimationVariable objects and can represent in applications
a color. For example, you can use this class to animate colors of any object on the screen (like text color, background color etc).
To use this class in application, just instantiate an object of this class, add it to animation controller using
CAnimationController::AddAnimationObject and call AddTransition for each transition to be applied to Red, Green and Blue components.
</remarks>
        </member>
        <member name="M:CAnimationSize.GetAnimationVariableList(CList&lt;CAnimationVariable**,CAnimationVariable**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Puts the encapsulated animation variables into a list.
</summary>
            <param name="lst">When the function returns, it contains pointers to two CAnimationVariable objects
representing the width and height.</param>
        </member>
        <member name="M:CAnimationSize.AddTransition(CBaseTransition*,CBaseTransition*)">
            <summary>
Adds transitions for Width and Height.
</summary>
            <remarks>
Call this function to add the specified transitions to the internal list of transitions to be applied to animation variables for Width and Height.
When you add transitions, they are not applied immediately and stored in an internal list. Transitions are applied
(added to a storyboard for a particular value) when you call CAnimationController::AnimateGroup.
If you don't need to apply a transition to one of dimensions, you can pass NULL.
</remarks>
            <param name="pCXTransition">A pointer to transition for Width.</param>
            <param name="pCYTransition">A pointer to transition for Height.</param>
        </member>
        <member name="M:CAnimationSize.op_Implicit~CSize">
            <summary>
Converts a CAnimationSize to a CSize.
</summary>
            <returns>
Current value of animation size as CSize.
</returns>
            <remarks>
This function internally calls GetValue. If GetValue for some reason fails, the returned size will contain default values for Width and Height.
</remarks>
        </member>
        <member name="M:CAnimationSize.op_Assign(CSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Assigns szSrc to CAnimationSize.
</summary>
            <remarks>
Assigns szSrc to CAnimationSize. It's recommended to do that before animation start, because this operator calls
SetDefaultValue, which recreates the underlying COM objects for Width and Height if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="szSrc">Refers to CSize or SIZE.</param>
        </member>
        <member name="M:CAnimationSize.GetCY">
            <summary>
Provides access to CAnimationVariable representing Height.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing Height.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing Height.
</remarks>
        </member>
        <member name="M:CAnimationSize.GetCX">
            <summary>
Provides access to CAnimationVariable representing Width.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing Width.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing Width.
</remarks>
        </member>
        <member name="M:CAnimationSize.GetValue(CSize*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns current value.
</summary>
            <returns>
TRUE, if the current value was successfully retrieved; otherwise FALSE.
</returns>
            <remarks>
Call this function to retrieve the current value of animation size. If this method fails or underlying COM objects for
Width and Size have not been initialized, szValue contains default value, which was previously set in constructor or by SetDefaultValue.
</remarks>
            <param name="szValue">Output. Contains the current value when this method returns.</param>
        </member>
        <member name="M:CAnimationSize.GetDefaultValue">
            <summary>
Returns the default values for Width and Height.
</summary>
            <returns>
A CSize object containing default values.
</returns>
            <remarks>
Call this function to retrieve default value, which was previously set by constructor or SetDefaultValue.
</remarks>
        </member>
        <member name="M:CAnimationSize.SetDefaultValue(CSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets default value.
</summary>
            <remarks>
Use this function to set a default value to animation object. This methods assigns default values to Width and Height
of animation size. It also recreates underlying COM objects if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="szDefault">Specifies new default size.</param>
        </member>
        <member name="M:CAnimationSize.#ctor(CSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs an animation size object.
</summary>
            <remarks>
The object is constructed with specified values for width, height, Object ID and Group ID. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
            <param name="szDefault">Specifies default size.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">Specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationSize.#ctor">
            <summary>
Constructs an animation size object.
</summary>
            <remarks>
The object is constructed with default values for width, height, Object ID and Group ID, which will be set to 0. They can be changed
later at runtime using SetDefaultValue and SetID.
</remarks>
        </member>
        <member name="F:CAnimationSize.m_cyValue">
            <summary>
The encapsulated animation variable that represents height of animation size.
</summary>
        </member>
        <member name="F:CAnimationSize.m_cxValue">
            <summary>
The encapsulated animation variable that represents width of animation size.
</summary>
        </member>
        <member name="T:CAnimationSize">
            <summary>
Implements the functionality of a size object whose dimensions can be animated.
</summary>
            <remarks>
The CAnimationSize class encapsulates two CAnimationVariable objects and can represent in applications
a size. For example, you can use this class to animate a size of any two dimensional object on the screen (like rectangle, control etc).
To use this class in application, just instantiate an object of this class, add it to animation controller using
CAnimationController::AddAnimationObject and call AddTransition for each transition to be applied to Width and/or Height.
</remarks>
        </member>
        <member name="M:CAnimationPoint.GetAnimationVariableList(CList&lt;CAnimationVariable**,CAnimationVariable**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Puts the encapsulated animation variables into a list.
</summary>
            <param name="lst">When the function returns, it contains pointers to two CAnimationVariable objects
representing the X and Y coordinates.</param>
        </member>
        <member name="M:CAnimationPoint.AddTransition(CBaseTransition*,CBaseTransition*)">
            <summary>
Adds transitions for X and Y coordinates.
</summary>
            <remarks>
Call this function to add the specified transitions to the internal list of transitions to be applied to animation variables for X and Y coordinates.
When you add transitions, they are not applied immediately and stored in an internal list. Transitions are applied
(added to a storyboard for a particular value) when you call CAnimationController::AnimateGroup.
If you don't need to apply a transition to one of coordinates, you can pass NULL.
</remarks>
            <param name="pXTransition">A pointer to transition for X coordinates.</param>
            <param name="pYTransition">A pointer to transition for Y coordinate.</param>
        </member>
        <member name="M:CAnimationPoint.GetY">
            <summary>
Provides access to CAnimationVariable for Y coordinate.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing Y coordinate.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing Y coordinate.
</remarks>
        </member>
        <member name="M:CAnimationPoint.GetX">
            <summary>
Provides access to CAnimationVariable for X coordinate.
</summary>
            <returns>
A reference to encapsulated CAnimationVariable representing X coordinate.
</returns>
            <remarks>
You can call this method to get direct access to underlying CAnimationVariable representing X coordinate.
</remarks>
        </member>
        <member name="M:CAnimationPoint.op_Implicit~CPoint">
            <summary>
Converts a CAnimationPoint to a CPoint.
</summary>
            <returns>
Current value of CAnimationPoint as CPoint.
</returns>
            <remarks>
This function internally calls GetValue. If GetValue for some reason fails, the returned point will contain default values for X and Y coordinates.
</remarks>
        </member>
        <member name="M:CAnimationPoint.op_Assign(CPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Assigns ptSrc to CAnimationPoint.
</summary>
            <remarks>
Assigns ptSrc to CAnimationPoint. It's recommended to do that before animation start, because this operator calls
SetDefaultValue, which recreates the underlying COM objects for X and Y coordinates if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="ptSrc">Refers to CPoint or POINT.</param>
        </member>
        <member name="M:CAnimationPoint.GetValue(CPoint*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns current value.
</summary>
            <returns>
TRUE, if the current value was successfully retrieved; otherwise FALSE.
</returns>
            <remarks>
Call this function to retrieve the current value of animation point. If this method fails or underlying COM objects for
X and Y coordinates have not been initialized, ptValue contains default
value, which was previously set in constructor or by SetDefaultValue.
</remarks>
            <param name="ptValue">Output. Contains the current value when this method returns.</param>
        </member>
        <member name="M:CAnimationPoint.GetDefaultValue">
            <summary>
Returns the default values for X and Y coordinates.
</summary>
            <returns>
A point containing default value.
</returns>
            <remarks>
Call this function to retrieve default value, which was previously set by constructor or SetDefaultValue.
</remarks>
        </member>
        <member name="M:CAnimationPoint.SetDefaultValue(tagPOINT!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sets default value.
</summary>
            <remarks>
Use this function to set a default value to animation object. This methods assigns default values to X and Y
coordinates of animation point. It also recreates underlying COM objects if they have been created. If you
subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="ptDefault">Specifies the default point value.</param>
        </member>
        <member name="M:CAnimationPoint.#ctor(CPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs CAnimationPoint object.
</summary>
            <remarks>
Constructs CAnimationPoint object with specified properties.
</remarks>
            <param name="ptDefault">Specifies default point coordinates.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">Specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationPoint.#ctor">
            <summary>
Constructs CAnimationPoint object.
</summary>
            <remarks>
Constructs CAnimationPoint object with default properties: default point coordinates, Group ID and Object ID are set to 0.
</remarks>
        </member>
        <member name="F:CAnimationPoint.m_yValue">
            <summary>
The encapsulated animation variable that represents Y coordinate of animation point.
</summary>
        </member>
        <member name="F:CAnimationPoint.m_xValue">
            <summary>
The encapsulated animation variable that represents X coordinate of animation point.
</summary>
        </member>
        <member name="T:CAnimationPoint">
            <summary>
Implements the functionality of a point whose coordinates can be animated.
</summary>
            <remarks>
The CAnimationPoint class encapsulates two CAnimationVariable objects and can represent in applications
a point. For example, you can use this class to animate a position of any object on the screen (like text string, circle, point etc).
To use this class in application, just instantiate an object of this class, add it to animation controller using
CAnimationController::AddAnimationObject and call AddTransition for each transition to be applied to X and/or Y coordinates.
</remarks>
        </member>
        <member name="M:CAnimationValue.GetAnimationVariableList(CList&lt;CAnimationVariable**,CAnimationVariable**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Puts the encapsulated animation variable into a list.
</summary>
            <param name="lst">When the function returns, it contains a pointer to CAnimationVariable representing the animated value.</param>
        </member>
        <member name="M:CAnimationValue.AddTransition(CBaseTransition*)">
            <summary>
Adds a transition to be applied to a value.
</summary>
            <remarks>
Call this function to add a transition to internal list of transitions to be applied to an animation variable.
When you add transitions, they are not applied immediately and stored in an internal list. Transitions are applied
(added to a storyboard for a particular value) when you call CAnimationController::AnimateGroup.
</remarks>
            <param name="pTransition">A pointer to transition object.</param>
        </member>
        <member name="M:CAnimationValue.GetVariable">
            <summary>
Provides access to encapsulated animation variable.
</summary>
            <returns>
A reference to encapsulated animation variable.
</returns>
            <remarks>
Use this method to access the encapsulated animation variable. From CAnimationVariable you get access
to underlying IUIAnimationVariable object, whose pointer can be NULL if animation variable has not been created.
</remarks>
        </member>
        <member name="M:CAnimationValue.op_Assign(System.Int32)">
            <summary>
Assigns an INT32 value to CAnimationValue.
</summary>
            <remarks>
Assigns an INT32 value to CAnimationValue. This value is set as a default value for encapsulated animation variable.
If you subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="nVal">Specifies the value to be assigned to Animation Value.</param>
        </member>
        <member name="M:CAnimationValue.op_Assign(System.Double)">
            <summary>
Assigns a DOUBLE value to CAnimationValue.
</summary>
            <remarks>
Assigns a DOUBLE value to CAnimationValue. This value is set as a default value for encapsulated animation variable.
If you subscribed this animation object to events (ValueChanged or IntegerValueChanged), you need to re-enable these events.
</remarks>
            <param name="dblVal">Specifies the value to be assigned to Animation Value.</param>
        </member>
        <member name="M:CAnimationValue.op_Implicit~System.Int32">
            <summary>
Provides conversion between CAnimationValue and INT32.
</summary>
            <returns>
Current value of Animation Value as integer.
</returns>
            <remarks>
Provides conversion between CAnimationValue and INT32. This method internally calls GetValue and doesn't check for
errors. If GetValue fails, the returned value will contain a default value previously set in constructor or with SetDefaultValue.
</remarks>
        </member>
        <member name="M:CAnimationValue.op_Implicit~System.Double">
            <summary>
Provides conversion between CAnimationValue and DOUBLE.
</summary>
            <returns>
Current value of Animation Value.
</returns>
            <remarks>
Provides conversion between CAnimationValue and DOUBLE. This method internally calls GetValue and doesn't check for
errors. If GetValue fails, the returned value will contain a default value previously set in constructor or with SetDefaultValue.
</remarks>
        </member>
        <member name="M:CAnimationValue.GetValue(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Retrieves the current value.
</summary>
            <returns>
TRUE if the current value was retrieved successfully; otherwise FALSE.
</returns>
            <remarks>
Call this function to retrieve the current value. This implementation calls the encapsulated COM object, and if
the call fails, this method returns the default value that was previously set in constructor or with SetDefaultValue.
</remarks>
            <param name="nValue">Output. When the function returns it contains a current value of animation variable.</param>
        </member>
        <member name="M:CAnimationValue.GetValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Retrieves the current value.
</summary>
            <returns>
TRUE if the current value was retrieved successfully; otherwise FALSE.
</returns>
            <remarks>
Call this function to retrieve the current value. This implementation calls the encapsulated COM object, and if
the call fails, this method returns the default value that was previously set in constructor or with SetDefaultValue.
</remarks>
            <param name="dblValue">Output. When the function returns it contains a current value of animation variable.</param>
        </member>
        <member name="M:CAnimationValue.SetDefaultValue(System.Double)">
            <summary>
Sets default value.
</summary>
            <remarks>
Use this method to set a default value. A default value is returned to application when animation has not been started
and/or underlying COM object has not been created. If the underlying COM object encapsulated in CAnimationVarible
was already created, this method recreates it, therefore you might need to call EnableValueChanged/EnableIntegerValueChanged
methods again.
</remarks>
            <param name="dblDefaultValue">Specifies the default value.</param>
        </member>
        <member name="M:CAnimationValue.#ctor(System.Double,System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs a CAnimationValue object.
</summary>
            <remarks>
Constructs CAnimationValue object with specified properties.
</remarks>
            <param name="dblDefaultValue">Specifies default value.</param>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">specifies user-defined data.</param>
        </member>
        <member name="M:CAnimationValue.#ctor">
            <summary>
Constructs a CAnimationValue object.
</summary>
            <remarks>
Constructs CAnimationValue object with default properties: default value, Group ID and Object ID are set to 0.
</remarks>
        </member>
        <member name="F:CAnimationValue.m_value">
            <summary>
The encapsulated animation variable that represents animation value.
</summary>
        </member>
        <member name="T:CAnimationValue">
            <summary>
Implements the functionality of animation object with one value.
</summary>
            <remarks>
The CAnimationValue class encapsulates a single CAnimationVariable object and can represent in applications
a single animated value. For example, you can use this class for animated transparency (fade effect), angle (to rotate objects),
or for any other case when you need to create an animation depending on a single animated value.
To use this class in application, just instantiate an object of this class, add it to animation controller using
CAnimationController::AddAnimationObject and call AddTransition for each transition to be applied to the value.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.SetParentAnimationObjects">
            <summary>
Establishes relationship between animation variables, contained in an animation object, and their container.
</summary>
            <remarks>
This is a helper that can be used to establish relationship between animation variables, contained in an animation object,
and their container. It loops over animation variables and sets a back pointer to a parent animation object
to each animation variable.
In the current implementation the actual relationship is established in CAnimationBaseObject::ApplyTransitions, therefore
back pointers are not set until you call CAnimationGroup::Animate.
Knowing the relationship may be helpful when you processing events and need to get a parent animation object
from CAnimationVariable (use CAnimationVariable::GetParentAnimationObject).
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.GetAnimationVariableList(CList&lt;CAnimationVariable**,CAnimationVariable**&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Collects pointers to contained animation variables.
</summary>
            <remarks>
This is a pure virtual method that must be overridden in a derived class.
An animation object, depending on its type, contains one or more animation variables. For example, CAnimationPoint
contains two variables, for X and Y coordinates respectively. The base class CAnimationBaseObject implements
some generic methods, which act on a list of animation variables: ApplyTransitions, ClearTransitions,
EnableValueChangedEvent, EnableIntegerValueChangedEvent. These methods call GetAnimationVariableList, which is filled
in a derived class with actual animation variables contained in a particular animation object, then loop over the
list and perform necessary actions.
If you create a custom animation object, you must add to lst all animation variables contained in that object.
</remarks>
            <param name="lst">A list that must be filled with animation variables contained in an animation object.</param>
        </member>
        <member name="M:CAnimationBaseObject.ContainsVariable(IUIAnimationVariable*)">
            <summary>
Determines whether an animation object contains a particular animation variable.
</summary>
            <returns>
TRUE if the animation variable is contained in the animation object; otherwise FALSE.
</returns>
            <remarks>
This method can be used to determine whether an animation variable specified by pVariable is contained
within an animation object. An animation object, depending on its type, may contain several animation variables.
For example, CAnimationColor contains three variables, one for each color component (red, green and blue). When a
value of animation variable has changed, Windows Animation API sends ValueChanged or IntegerValueChanged events (if enabled),
and the parameter of this event is a pointer to interface IUIAnimationVariable of animation variable.
This method helps to obtain a pointer to animation from a pointer to contained COM object.
</remarks>
            <param name="pVariable">A pointer to animation variable.</param>
        </member>
        <member name="M:CAnimationBaseObject.EnableIntegerValueChangedEvent(CAnimationController*,System.Int32)">
            <summary>
Sets up Integer Value Changed event handler.
</summary>
            <remarks>
If the Integer Value Changed event handler is enabled, you can handle this event in CAnimationController::OnAnimationIntegerValueChanged method,
which should be overridden in a CAnimationController-derived class. This method is called every time the animation integer value has changed.
</remarks>
            <param name="pController">A pointer to a parent controller.</param>
            <param name="bEnable">Specifies whether to enable, or disable Integer Value Changed event.</param>
        </member>
        <member name="M:CAnimationBaseObject.EnableValueChangedEvent(CAnimationController*,System.Int32)">
            <summary>
Sets up Value Changed event handler.
</summary>
            <remarks>
If the Value Changed event handler is enabled, you can handle this event in CAnimationController::OnAnimationValueChanged method,
which should be overridden in a CAnimationController-derived class. This method is called every time the animation value has changed.
</remarks>
            <param name="pController">A pointer to a parent controller.</param>
            <param name="bEnable">Specifies whether to enable, or disable Value Changed event.</param>
        </member>
        <member name="M:CAnimationBaseObject.ClearTransitions(System.Int32)">
            <summary>
Removes all related transitions.
</summary>
            <remarks>
Removes all related transitions and destroys them if bAutodestroy or m_bAutodestroyTransitions flag is TRUE.
Transitions should be destroyed automatically only if they are not allocated on the stack.
If the above flags are FALSE, transitions are just removed from the internal list of related transitions.
</remarks>
            <param name="bAutodestroy">Specifies whether to destroy transition objects automatically, or just remove them from the related list.</param>
        </member>
        <member name="M:CAnimationBaseObject.ApplyTransitions(IUIAnimationStoryboard*,System.Int32)">
            <summary>
Adds transitions to storyboard with encapsulated animation variable.
</summary>
            <returns>
TRUE if transitions were added successfully.
</returns>
            <remarks>
Adds related transitions, that have been added with AddTransition (overloaded methods in derived classes), to storyboard.
</remarks>
            <param name="pStoryboard">A pointer to a storyboard.</param>
            <param name="bDependOnKeyframes">With FALSE this method adds only those transitions that do not depend on keyframes.</param>
        </member>
        <member name="M:CAnimationBaseObject.GetAutodestroyTransitions">
            <summary>
Tells whether related transition are destroyed automatically.
</summary>
            <returns>
If TRUE, related transitions are destroyed automatically; if FALSE, transition objects should be deallocated by calling application.
</returns>
            <remarks>
By default this flag is TRUE. Set this flag only if you allocated transition on the stack and/or transitions should be deallocated by
the calling application.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.SetAutodestroyTransitions(System.Int32)">
            <summary>
Sets a flag that orders to automatically destroy transitions.
</summary>
            <remarks>
Set this flag only if you allocated transition objects using operator new. If for some reason transition
objects are allocated on the stack, the auto destroy flag should be FALSE. By default this flag is TRUE.
</remarks>
            <param name="bValue">Specifies the auto destroy flag.</param>
        </member>
        <member name="M:CAnimationBaseObject.GetUserData">
            <summary>
Returns user defined data.
</summary>
            <returns>
A value of custom data.
</returns>
            <remarks>
Call this method to retrieve the custom data at runtime. The returned value will be 0 if it was not explicitly initialized in constructor or with SetUserData.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.GetGroupID">
            <summary>
Returns current Group ID.
</summary>
            <returns>
Current Group ID.
</returns>
            <remarks>
Use this method to retrieve Group ID. It's 0 if Group ID has not been set explicitly in constructor or with SetID.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.GetObjectID">
            <summary>
Returns current Object ID.
</summary>
            <returns>
Current Object ID.
</returns>
            <remarks>
Use this method to retrieve Object ID. It's 0 if Object ID has not been set explicitly in constructor or with SetID.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.DetachFromController">
            <summary>
Detaches an animation object from parent animation controller.
</summary>
            <remarks>
This method is used internally.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.SetUserData(System.UInt64)">
            <summary>
Sets user-defined data.
</summary>
            <remarks>
Use this method to associate a custom data with an animation object. This data may be retrieved later at runtime by GetUserData.
</remarks>
            <param name="dwUserData">Specifies the custom data.</param>
        </member>
        <member name="M:CAnimationBaseObject.SetID(System.UInt32,System.UInt32)">
            <summary>
Sets new IDs.
</summary>
            <remarks>
Allows to change Object ID and Group ID. If the new Group ID differs from the current ID, an animation object
is moved to another group (a new group will be created, if necessary).
</remarks>
            <param name="nObjectID">Specifies new Object ID.</param>
            <param name="nGroupID">Specifies new Group ID.</param>
        </member>
        <member name="M:CAnimationBaseObject.CreateTransitions">
            <summary>
Creates transitions associated with an animation object.
</summary>
            <returns>
TRUE if transitions were created successfully; otherwise FALSE.
</returns>
            <remarks>
Loops over list of animation variables encapsulated in a derived animation object and creates transitions
associated with each animation variable.
</remarks>
        </member>
        <member name="M:CAnimationBaseObject.Dispose">
            <summary>
The destructor. Called when an animation object is being destroyed.
</summary>
        </member>
        <member name="M:CAnimationBaseObject.#ctor(System.UInt32,System.UInt32,System.UInt64)">
            <summary>
Constructs an animation object.
</summary>
            <remarks>
Constructs an animation object with specified Object ID and Group ID.
</remarks>
            <param name="nGroupID">Specifies Group ID.</param>
            <param name="nObjectID">Specifies Object ID.</param>
            <param name="dwUserData">User-defined data, which can be associated with animation object and retrieved later at runtime.</param>
        </member>
        <member name="M:CAnimationBaseObject.#ctor">
            <summary>
Constructs an animation object.
</summary>
            <remarks>
Constructs an animation objects and assigns default Object ID (0) and Group ID (0).
</remarks>
        </member>
        <member name="F:CAnimationBaseObject.m_pParentController">
            <summary>
A pointer to the parent animation controller.
</summary>
        </member>
        <member name="F:CAnimationBaseObject.m_bAutodestroyTransitions">
            <summary>
Specifies whether related transitions should be automatically destroyed.
</summary>
        </member>
        <member name="F:CAnimationBaseObject.m_dwUserData">
            <summary>
Stores user-defined data.
</summary>
        </member>
        <member name="F:CAnimationBaseObject.m_nObjectID">
            <summary>
Specifes the Object ID of the animation object.
</summary>
        </member>
        <member name="F:CAnimationBaseObject.m_nGroupID">
            <summary>
Specifies the Group ID of the animation object.
</summary>
        </member>
        <member name="T:CAnimationBaseObject">
            <summary>
The base class for all animation objects.
</summary>
            <remarks>
This class implements basic methods for all animation objects. An animation object can represent a value, point,
size, rectangle or color in an application, as well as any custom entity. Animation objects are stored in animation groups
(see CAnimationGroup). Each group can be animated separately and can be treated as an analogue of storyboard.
An animation object encapsulates one or more animation variables (see CAnimationVariable), depending on its logical
representation. For example, CAnimationRect contains four animation variables - one variable for each side of rectangle.
Each animation object class exposes overloaded AddTransition method, which should be used to apply transitions to
encapsulated animation variables.
An animation object can be identified by Object ID (optionally) and by Group ID. A Group ID is necessary in order
to place an animation object to correct group, but if a Group ID is not specified, an object is placed in the default group with ID 0.
If you call SetID with different GroupID, an animation object will be moved to another group (a new group is created if necessary).
</remarks>
        </member>
        <member name="F:CAnimationVariable.m_bAutodestroyTransitions">
            <summary>
Specifies whether related transition objects should be deleted.
</summary>
            <remarks>
Set this value to TRUE to force deletion of transition objects when they are being removed from the internal list
of transitions. If this value is FALSE the transitions should be deleted by calling application.
The list of transitions is always cleared after an animation has been scheduled. The default value is FALSE.
</remarks>
        </member>
        <member name="M:CAnimationVariable.GetDefaultValue">
            <summary>
Returns default value.
</summary>
            <returns>
The default value.
</returns>
            <remarks>
Use this function to obtain default value of animation variable. The default value can be set in constructor or by
SetDefaultValue method.
</remarks>
        </member>
        <member name="M:CAnimationVariable.EnableIntegerValueChangedEvent(CAnimationController*,System.Int32)">
            <summary>
Enables or disables the IntegerValueChanged event.
</summary>
            <remarks>
When ValueChanged event is enabled, the framework calls virtual method CAnimationController::OnAnimationIntegerValueChanged.
You need to override it in a class derived from CAnimationController in order to process this event. This method is called every time
the integer value of animation variable is changed.
</remarks>
            <param name="pController">A pointer to parent controller.</param>
            <param name="bEnable">TRUE - enable event, FALSE - disable event.</param>
        </member>
        <member name="M:CAnimationVariable.EnableValueChangedEvent(CAnimationController*,System.Int32)">
            <summary>
Enables or disables the ValueChanged event.
</summary>
            <remarks>
When ValueChanged event is enabled, the framework calls virtual method CAnimationController::OnAnimationValueChanged.
You need to override it in a class derived from CAnimationController in order to process this event. This method is called every time
the value of animation variable is changed.
</remarks>
            <param name="pController">A pointer to parent controller.</param>
            <param name="bEnable">TRUE - enable event, FALSE - disable event.</param>
        </member>
        <member name="M:CAnimationVariable.ApplyTransitions(CAnimationController*,IUIAnimationStoryboard*,System.Int32)">
            <summary>
Adds transitions from the internal list to storyboard.
</summary>
            <remarks>
This method adds transitions from the internal list to storyboard. It's called from the
top level code several times to add transitions that do not depend on keyframes and add
transitions that depend on keyframes. If the underlying animation variable
COM object has not been created, this method creates it at this stage.
</remarks>
            <param name="pController">A pointer to parent animation controller.</param>
            <param name="pStoryboard">A pointer to storyboard.</param>
            <param name="bDependOnKeyframes">TRUE, if this method should add transitions that depend on keyframes.</param>
        </member>
        <member name="M:CAnimationVariable.ClearTransitions(System.Int32)">
            <summary>
Clears transitions.
</summary>
            <remarks>
This method removes all transitions from the internal list of transitions. If bAutodestroy is TRUE, or
m_bAutodestroyTransitions is TRUE, then transitions are deleted. Otherwise the caller should deallocate
the transition objects.
</remarks>
            <param name="bAutodestroy">Specifies whether this method should delete transition objects.</param>
        </member>
        <member name="M:CAnimationVariable.AddTransition(CBaseTransition*)">
            <summary>
Adds a transition.
</summary>
            <remarks>
This method is called to add a transition to the internal list of transitions to be applied to the animation variable.
This list should be cleared when an animation has been scheduled.
</remarks>
            <param name="pTransition">A pointer to a transition to add.</param>
        </member>
        <member name="M:CAnimationVariable.GetValue(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns the current value of animation variable.
</summary>
            <returns>
S_OK if the value was obtained successfully, or underlying animation variable has not been created. Otherwise
HRESULT error code.
</returns>
            <remarks>
This method can be called to retrieve the current value of animation variable. If the underlying COM object
has not been created, dblValue will contain a default value, when the function returns.
</remarks>
            <param name="nValue">The current value of the animation variable.</param>
        </member>
        <member name="M:CAnimationVariable.GetValue(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Returns the current value of animation variable.
</summary>
            <returns>
S_OK if the value was obtained successfully, or underlying animation variable has not been created. Otherwise
HRESULT error code.
</returns>
            <remarks>
This method can be called to retrieve the current value of animation variable. If the underlying COM object
has not been created, dblValue will contain a default value, when the function returns.
</remarks>
            <param name="dblValue">The current value of the animation variable.</param>
        </member>
        <member name="M:CAnimationVariable.CreateTransitions(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Creates all transitions to be applied to this animation variable.
</summary>
            <returns>
TRUE if transitions were created successfully; otherwise FALSE.
</returns>
            <remarks>
This method is called by the framework when it needs to create transitions that have been added
to the variable's internal list of transitions.
</remarks>
            <param name="pLibrary">A pointer to transition library.</param>
            <param name="pFactory">A pointer to transition factory.</param>
        </member>
        <member name="M:CAnimationVariable.Create(IUIAnimationManager*)">
            <summary>
Creates the underlying animation variable COM object.
</summary>
            <returns>
TRUE if the animation variable was successfully created; otherwise FALSE.
</returns>
            <remarks>
This method creates the underlying animation variable COM object and sets its default value.
</remarks>
            <param name="pManager">A pointer to animation manager.</param>
        </member>
        <member name="M:CAnimationVariable.SetDefaultValue(System.Double)">
            <summary>
Sets default value and releases IUIAnimationVariable COM object.
</summary>
            <remarks>
Use this method to reset the default value. This method releases the internal IUIAnimationVariable COM object,
therefore when animation variable is recreated, the underlying COM object gets the new default value.
The default value is returned by GetValue if the COM object representing the animation variable is not created,
or if the variable has not been animated.
</remarks>
            <param name="dblDefaultValue">Specifies the new default value.</param>
        </member>
        <member name="M:CAnimationVariable.GetVariable">
            <summary>
Returns a pointer to IUIAnimationVariable COM object.
</summary>
            <returns>
A valid pointer to IUIAnimationVariable COM object, or NULL if animation variable was not created, or can't be created.
</returns>
            <remarks>
Use this function to access the underlying IUIAnimationVariable COM object and call its methods directly if needed.
</remarks>
        </member>
        <member name="M:CAnimationVariable.GetParentAnimationObject">
            <summary>
Returns the parent animation object.
</summary>
            <returns>
A pointer to parent animation object, if relationship was established, otherwise NULL.
</returns>
            <remarks>
This method can be called to retrieve a pointer to a parent animation object (a container).
</remarks>
        </member>
        <member name="M:CAnimationVariable.Dispose">
            <summary>
The destructor. Called when a CAnimationVariable object is being destroyed.
</summary>
        </member>
        <member name="M:CAnimationVariable.#ctor(System.Double)">
            <summary>
Constructs an animation variable object.
</summary>
            <remarks>
Constructs an animation variable object and sets its default value. A default value is used when
a variable is not animated, or can't be animated.
</remarks>
            <param name="dblDefaultValue">Specifies the default value.</param>
        </member>
        <member name="M:CAnimationVariable.SetParentAnimationObject(CAnimationBaseObject*)">
            <summary>
Sets the relationship between an animation variable and an animation object.
</summary>
            <remarks>
This method is called internally to establish one-to-one relationship between an animation variable and an animation object that encapsulates it.
</remarks>
            <param name="pParentObject">A pointer to an animation object that contains this variable.</param>
        </member>
        <member name="F:CAnimationVariable.m_pParentObject">
            <summary>
A pointer to an animation object that encapsulates this animation variable.
</summary>
        </member>
        <member name="F:CAnimationVariable.m_lstTransitions">
            <summary>
Contains a list of transitions that animate this animation variable.
</summary>
        </member>
        <member name="F:CAnimationVariable.m_dblDefaultValue">
            <summary>
Specifies the default value, which is propagated to IUIAnimationVariable.
</summary>
        </member>
        <member name="F:CAnimationVariable.m_variable">
            <summary>
Stores a pointer to IUIAnimationVariable COM object. NULL if the COM object has not been created yet, or if creation failed.
</summary>
        </member>
        <member name="T:CAnimationVariable">
            <summary>
Represents an animation variable.
</summary>
            <remarks>
The CAnimationVariable class encapsulates IUIAnimationVariable COM object. It also holds a list of transitions
to be applied to the animation variable in a storyboard. CAnimationVariable objects are embedded to
animation objects, which can represent in an application an animated value, point, size, color and rectangle.
</remarks>
        </member>
        <member name="M:CKeyFrame.AddToStoryboardAtOffset(IUIAnimationStoryboard*,System.Int32)">
            <summary>
Adds a keyframe to storyboard at offset.
</summary>
            <returns>
TRUE, if keyframe was added successfully.
</returns>
            <remarks>
This function is called by the framework to add a keyframe to storyboard at offset.
</remarks>
            <param name="pStoryboard">A pointer to a storyboard.</param>
            <param name="bDeepAdd">Specifies whether to add a keyframe this keyframe depend on recursively.</param>
        </member>
        <member name="M:CKeyFrame.AddToStoryboardAfterTransition(IUIAnimationStoryboard*,System.Int32)">
            <summary>
Adds a keyframe to storyboard after transition.
</summary>
            <returns>
TRUE, if keyframe was added successfully.
</returns>
            <remarks>
This function is called by the framework to add a keyframe to storyboard after transition.
</remarks>
            <param name="pStoryboard">A pointer to a storyboard.</param>
            <param name="bDeepAdd">Specifies whether to add a transition recursively.</param>
        </member>
        <member name="M:CKeyFrame.AddToStoryboard(IUIAnimationStoryboard*,System.Int32)">
            <summary>
Adds a keyframe to a storyboard.
</summary>
            <returns>
TRUE, if keyframe was added successfully.
</returns>
            <remarks>
This method adds a keyframe to storyboard. If it depends on other keyframe or transition and bDeepAdd is TRUE,
this method tries to add them recursively.
</remarks>
            <param name="pStoryboard">A pointer to a storyboard.</param>
            <param name="bDeepAdd">Specifies whether to add keyframe or transition recursively.</param>
        </member>
        <member name="M:CKeyFrame.GetOffset">
            <summary>
Returns an offset from other keyframe.
</summary>
            <returns>
An offset in seconds from other keyframe.
</returns>
            <remarks>
This method should be called to determine an offset in seconds from other keyframe.
</remarks>
        </member>
        <member name="M:CKeyFrame.GetExistingKeyframe">
            <summary>
Returns a pointer to a keyframe this keyframe depends on.
</summary>
            <returns>
A valid pointer to keyframe, or NULL if this keyframe does not depend on other keyframe.
</returns>
            <remarks>
This is an accessor to a keyframe this keyframe depends on.
</remarks>
        </member>
        <member name="M:CKeyFrame.GetTransition">
            <summary>
Returns a pointer to a transition this keyframe depends on.
</summary>
            <returns>
A valid pointer to transition, or NULL if this keyframe does not depend on transition.
</returns>
            <remarks>
This is an accessor to a transition this keyframe depends on.
</remarks>
        </member>
        <member name="M:CKeyFrame.#ctor(CBaseKeyFrame*,System.Double)">
            <summary>
Constructs a keyframe that depends on other keyframe.
</summary>
            <remarks>
The constructed keyframe will represent a moment in time within a storyboard, which has a specified offset from pKeyframe.
</remarks>
            <param name="pKeyframe">A pointer to keyframe.</param>
            <param name="offset">Offset, in seconds, from keyframe specified by pKeyframe.</param>
        </member>
        <member name="M:CKeyFrame.#ctor(CBaseTransition*)">
            <summary>
Constructs a keyframe that depends on a transition.
</summary>
            <remarks>
The constructed keyframe will represent a moment in time within a storyboard when the specified transition ends.
</remarks>
            <param name="pTransition">A pointer to a transition.</param>
        </member>
        <member name="F:CKeyFrame.m_pExistingKeyFrame">
            <summary>
Stores a pointer to an existing keframe. This keyframe is added to storyboard with m_offset to the existing keyframe.
</summary>
        </member>
        <member name="F:CKeyFrame.m_offset">
            <summary>
Specifies offset of this keyframe from a keyframe stored in m_pExistingKeyFrame.
</summary>
        </member>
        <member name="F:CKeyFrame.m_pTransition">
            <summary>
Stores a pointer to transtion that begins at this keyframe.
</summary>
        </member>
        <member name="T:CKeyFrame">
            <summary>
Represents an animation keyframe.
</summary>
            <remarks>
This class implements an animation keyframe. A keyframe represents a moment in time within a
storyboard and can be used to specify the start and end times of transitions.
A keyframe may be based on other keyframe and have an offset (in seconds) from it, or may be based on a transition and
represent a moment in time when this transition ends.
</remarks>
        </member>
        <member name="M:CBaseKeyFrame.AddToStoryboard(IUIAnimationStoryboard*,System.Int32)">
            <summary>
Adds a keyframe to storyboard.
</summary>
            <returns>
TRUE if keyframe was added to storyboard successfully; otherwise FALSE.
</returns>
            <remarks>
This method is called to add a keyframe to storyboard.
</remarks>
            <param name="pStoryboard">A pointer to a storyboard.</param>
            <param name="bDeepAdd">If this parameter is TRUE and the keyframe being added depends on some other keyframe or transition, this method tries
to add this keyframe or transition to storyboard first.</param>
        </member>
        <member name="M:CBaseKeyFrame.IsKeyframeAtOffset">
            <summary>
Specifies whether the keyframe should be added to storyboard at offset, or after transition.
</summary>
            <returns>
TRUE if the keyframe should be added to storyboard at some specified offset.
FALSE if the keyframe should be added to storyboard after some transition.
</returns>
            <remarks>
Specifies whether the keyframe should be added to storyboard at offset.
The offset or transition must be specified in a derived class.
</remarks>
        </member>
        <member name="M:CBaseKeyFrame.IsAdded">
            <summary>
Tells whether a keyframe has been added to storyboard.
</summary>
            <returns>
TRUE if a keyframe is added to a storyboard; otehrwise FALSE.
</returns>
            <remarks>
In the base class IsAdded always returns TRUE, but it's overridden in derived classes.
</remarks>
        </member>
        <member name="M:CBaseKeyFrame.GetAnimationKeyframe">
            <summary>
Returns the underlying keyframe value.
</summary>
            <returns>
A current keyframe. The default value is UI_ANIMATION_KEYFRAME_STORYBOARD_START.
</returns>
            <remarks>
This is an accessor to the underlying keyframe value.
</remarks>
        </member>
        <member name="M:CBaseKeyFrame.#ctor">
            <summary>
Constructs a keyframe object.
</summary>
        </member>
        <member name="F:CBaseKeyFrame.m_bIsKeyframeAtOffset">
            <summary>
Specifies whether this keyframe should be added to storyboard at an offset from
another existing keyframe, or at the end of some transition.
</summary>
        </member>
        <member name="F:CBaseKeyFrame.m_bAdded">
            <summary>
Specifies whether this keyframe has been added to a storyboard.
</summary>
        </member>
        <member name="F:CBaseKeyFrame.m_keyframe">
            <summary>
Represents a Windows Animation API keyframe. When a keyframe is not initialized
it is set to the predefined value UI_ANIMATION_KEYFRAME_STORYBOARD_START.
</summary>
        </member>
        <member name="T:CBaseKeyFrame">
            <summary>
Implements basic functionality of keyframe.
</summary>
            <remarks>
Encapsulates UI_ANIMATION_KEYFRAME variable. Serves as a base class for any keyframe implementation.
A keyframe represents a moment in time within a storyboard and can be used to specify the start and end times of transitions.
There are two types of keyframes - keyframes added to storyboard at the specified offset (in time), or keyframes added
after specified transition. Because durations of some transitions can't be known before animation starts, the actual values
of some keyframes are determined at runtime only.
Because keyframes may depend on transitions, which in their turn depend on keyframes, it's important to prevent
infinite recursions when building keyframe chains.
</remarks>
        </member>
        <member name="F:CBaseTransition.m_bAdded">
            <summary>
Specifies whether a transition has been added to a storyboard.
</summary>
        </member>
        <member name="F:CBaseTransition.m_pRelatedVariable">
            <summary>
A pointer to an animation variable, which is animated with the transition stored in m_transition.
</summary>
        </member>
        <member name="F:CBaseTransition.m_pEndKeyframe">
            <summary>
Stores a pointer to the keyframe that specifies the end of the transition.
</summary>
        </member>
        <member name="F:CBaseTransition.m_pStartKeyframe">
            <summary>
Stores a pointer to the keyframe that specifies the beginning of the transition.
</summary>
        </member>
        <member name="F:CBaseTransition.m_transition">
            <summary>
Stores a pointer to IUIAnimationTransition. NULL if a COM transition object has not been created.
</summary>
        </member>
        <member name="F:CBaseTransition.m_type">
            <summary>
Stores the transition type.
</summary>
        </member>
        <member name="M:CBaseTransition.AddToStoryboardAtKeyframes(IUIAnimationStoryboard*)">
            <summary>
Adds a transition to a storyboard.
</summary>
            <returns>
TRUE, if transition was successfully added to a storyboard.
</returns>
            <remarks>
Applies the transition to the related variable in the storyboard. If the start keyframe was specified, the transition
begins at that keyframe. If the end keyframe was specified, the transition begins at the start keyframe and
and stops at the end keyframe. If the transition was created with a duration parameter specified, that duration is
overwritten with the duration of time between the start and end keyframes.
If no keyframe was specified, the transition is appended to the transition added most recently to the variable.
</remarks>
            <param name="pStoryboard">A pointer to storyboard, which will animate the related variable.</param>
        </member>
        <member name="M:CBaseTransition.AddToStoryboard(IUIAnimationStoryboard*)">
            <summary>
Adds a transition to a storyboard.
</summary>
            <returns>
TRUE, if transition was successfully added to a storyboard.
</returns>
            <remarks>
Applies the transition to the related variable in the storyboard.  If this is the first transition
applied to this variable in this storyboard, the transition begins at the start of the storyboard.
Otherwise, the transition is appended to the transition added most recently to the variable.
</remarks>
            <param name="pStoryboard">A pointer to storyboard, which will animate the related variable.</param>
        </member>
        <member name="M:CBaseTransition.GetRelatedVariable">
            <summary>
Returns a pointer to related variable.
</summary>
            <returns>
A valid pointer to animation variable, or NULL if an animation variable has not been set by SetRelatedVariable.
</returns>
            <remarks>
This is an accessor to related animation variable.
</remarks>
        </member>
        <member name="M:CBaseTransition.SetRelatedVariable(CAnimationVariable*)">
            <summary>
Establishes a relationship between animation variable and transition.
</summary>
            <remarks>
Establishes a relationship between animation variable and transition. A transition can be applied only to one variable.
</remarks>
            <param name="pVariable">A pointer to related animation variable.</param>
        </member>
        <member name="M:CBaseTransition.GetEndKeyframe">
            <summary>
Returns start keyframe.
</summary>
            <returns>
A valid pointer to a keyframe, or NULL if a transition should not be inserted between keyframes.
</returns>
            <remarks>
This method can be used to access a keyframe object that was previously set by SetKeyframes.
It's called by top level code when transitions are being added to storyboard.
</remarks>
        </member>
        <member name="M:CBaseTransition.GetStartKeyframe">
            <summary>
Returns start keyframe.
</summary>
            <returns>
A valid pointer to a keyframe, or NULL if a transition should not start after a keyframe.
</returns>
            <remarks>
This method can be used to access a keyframe object that was previously set by SetKeyframes.
It's called by top level code when transitions are being added to storyboard.
</remarks>
        </member>
        <member name="M:CBaseTransition.IsAdded">
            <summary>
Tells whether a transition has been added to a storyboard.
</summary>
            <returns>
Returns TRUE if a transition has been added to a storyboard, otherwise FALSE.
</returns>
            <remarks>
This flag is set internally when the top level code adds transitions to storyboard.
</remarks>
        </member>
        <member name="M:CBaseTransition.SetKeyframes(CBaseKeyFrame*,CBaseKeyFrame*)">
            <summary>
Sets keyframes for a transition.
</summary>
            <remarks>
This method tells the transition to start after specified keyframe and, optionally, if pEnd is not NULL, end
before the specified keyframe.
If the transition was created with a duration parameter specified, that duration is overwritten with the duration of time between the start and end keyframes.
</remarks>
            <param name="pStart">A keyframe that specifies the beginning of the transition. </param>
            <param name="pEnd">A keyframe that specifies the end of the transition.</param>
        </member>
        <member name="M:CBaseTransition.GetTransition">
            <summary>
Returns a pointer to underlying COM transition object.
</summary>
            <returns>
A valid pointer to IUIAnimationTransition or NULL if underlying transition can't be created.
</returns>
            <remarks>
It's an accessor method to underlying COM transition object. It doesn't instantiates the underlying IUIAnimationTransition COM
object if it wasn't created.
</remarks>
        </member>
        <member name="M:CBaseTransition.GetTransition(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Returns a pointer to underlying COM transition object.
</summary>
            <returns>
A valid pointer to IUIAnimationTransition or NULL if underlying transition can't be created.
</returns>
            <remarks>
This method returns a pointer to underlying COM transition object and creates it if necessary.
</remarks>
            <param name="pLibrary">A pointer to transition library, which creates standard transitions. It can be NULL for custom transitions.</param>
            <param name="pFactory">A pointer to transition factory, which creates custom transitions. It can be NULL for standard transitions.</param>
        </member>
        <member name="M:CBaseTransition.Create(IUIAnimationTransitionLibrary*,IUIAnimationTransitionFactory*)">
            <summary>
Creates a COM transition.
</summary>
            <returns>
TRUE if a transition COM object was created successfully; otherwise FALSE.
</returns>
            <remarks>
This is a pure virtual function that must be overridden in a derived class.
It's called by the framework to instantiate the underlying COM transition object.
</remarks>
            <param name="pLibrary">A pointer to transition library, which creates standard transitions. It can be NULL for custom transitions.</param>
            <param name="pFactory">A pointer to transition factory, which creates custom transitions. It can be NULL for standard transitions.</param>
        </member>
        <member name="M:CBaseTransition.GetType">
            <summary>
Returns transition type.
</summary>
            <returns>
One of TRANSITION_TYPE enumerated values.
</returns>
            <remarks>
This method can be used to identify a transition object by its type.
The type is set in a constructor in a derived class.
</remarks>
        </member>
        <member name="M:CBaseTransition.Clear">
            <summary>
Releases encapsulated IUIAnimationTransition COM object.
</summary>
            <remarks>
This method should be called from a derived class's Create method in order to prevent
IUITransition interface leak.
</remarks>
        </member>
        <member name="M:CBaseTransition.Dispose">
            <summary>
The destructor. Called when a transition object is being destroyed.
</summary>
        </member>
        <member name="M:CBaseTransition.#ctor">
            <summary>
Constructs a base transtion object.
</summary>
        </member>
        <member name="T:CBaseTransition.TRANSITION_TYPE">
            <summary>
Defines the transition types currently supported by the MFC implementation of Windows Animation API.
</summary>
            <remarks>
A transition type is set in the constructor of specific transition.
For example, CSinusoidalTransitionFromRange sets its type to SINUSOIDAL_FROM_RANGE.
</remarks>
        </member>
        <member name="T:CBaseTransition">
            <summary>
Represents a basic transition.
</summary>
            <remarks>
This class encapsulates IUIAnimationTransition interface and serves as a base class for all transitions.
</remarks>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ImporterIFCUtils.GetLocalFileName(Autodesk.Revit.DB.Document,System.String)">
            <summary>
   Get the local file name, including the path, corresponding to a linked IFC file.
   This will create a local copy of the IFC file if necessary.
</summary>
            <param name="aDoc">
   The document that will contain the IFC link.
</param>
            <param name="fileName">
   The original file name and path.
</param>
            <returns>
   The local file name and path corresponding to the input file name.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
   Can't process file name.
</exception>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2018
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ImporterIFCUtils.CreateEmptyFamily(Autodesk.Revit.DB.IFC.ImporterIFC,Autodesk.Revit.DB.Document,Autodesk.Revit.DB.ElementId,System.String)">
            <summary>
   Creates an empty family of a given category.
</summary>
            <param name="importerIFC">
   The importer.
</param>
            <param name="aDoc">
   The document to create the family.
</param>
            <param name="catId">
   The category id.
</param>
            <param name="familyName">
   The family name.
</param>
            <returns>
   The created family id.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2014
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.ImporterIFCUtils">
            <summary>
   A class that contains utilities needed to implement Revit's version of the IFC import client application.
</summary>
            <remarks>
   This class contains special API utilities needed to enable the implementation of the client application
   for IFC import.  Some of these utilities will be needed temporarily while the code for IFC import is
   migrated into the export client.  These temporary interfaces are likely to change in upcoming Revit
   releases.
</remarks>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ImporterIFC.SetFile(Autodesk.Revit.DB.IFC.IFCFile)">
            <summary>
   Sets the handle to the IFC file being created during this import operation.
</summary>
            <param name="file">
   The handle to the file.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ImporterIFC.ProcessIFCProject(Autodesk.Revit.DB.IFC.IFCAnyHandle,System.Collections.Generic.IDictionary`2{Autodesk.Revit.DB.IFC.IFCAnyHandle,Autodesk.Revit.DB.ElementId})">
            <summary>
   The entry point to the native IFC import function.  Processes the main IfcProject and creates appropriate Revit elements.
</summary>
            <remarks>
   This function allows for a "hybrid" .NET/native import.  For any handle below, there will be no native processing,
   and it will be assumed that the element created in .NET is valid and appropriate.  Note that this is only applicable
   for IFCAnyHandles that are subtypes of IfcProduct and IfcBuildingElementStorey; other handles will be ignored.
   Also, note that some elements have interdependencies that are not yet handled by this function.  These include:
   1. IfcDoor/IfcWindow and their IfcOpeningElements and 2D representations should both be created in the same environment (.NET or native).
   2. Symbols and their instances should both be created in the same environment (.NET or native).
</remarks>
            <param name="ifcProject">
   The IfcProject containing the entities in the IFC file.
</param>
            <param name="createdElements">
   The element ids for the already created elements.  These handles will not be processed in native code.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2015
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ImporterIFC.ProcessIFCProject(Autodesk.Revit.DB.IFC.IFCAnyHandle)">
            <summary>
   The entry point to the native IFC import function.  Processes the main IfcProject and creates appropriate Revit elements.
</summary>
            <param name="ifcProject">
   The IfcProject containing the entities in the IFC file.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ImporterIFC.GetOptions">
            <summary>
   Gets the collection of named options set by the importer client.
</summary>
            <returns>
   The collection of named options.
</returns>
            <since>
   2015
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.ImporterIFC.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.ImporterIFC.Document">
            <summary>
   Gets the document associated with the import.
</summary>
            <since>
   2015
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.ImporterIFC.FullFileName">
            <summary>
   The full file name of the IFC file to be import.
</summary>
            <since>
   2014
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.ImporterIFC">
            <summary>
   The main class provided by Revit to allow implementation of IFC import.
</summary>
            <remarks>
   An instance of this class is provided to clients which implement IImporterIFC
   in order to provide an implementation for IFC import.  It contains information
   on the options selected by the user for the import operation, as well as
   members used to access specific types of data needed to implement the import
   properly.
</remarks>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IIFCImporterServerProxy.ImportIFC(Autodesk.Revit.DB.IFC.ImporterIFC)">
            <summary>
   The method that Revit will invoke to perform an import from IFC.
</summary>
            <param name="importer">
   The IFC importer.
</param>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IIFCImporterServer.ImportIFC(Autodesk.Revit.DB.IFC.ImporterIFC)">
            <summary>
   The method that Revit will invoke to perform an import from IFC.
</summary>
            <param name="importer">
   The IFC importer.
</param>
            <since>
   2014
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IIFCImporterServer">
            <summary>
   Interface for external servers implementing IFC import.
</summary>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IExporterIFCProxy.ExportIFC(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.IFC.ExporterIFC,Autodesk.Revit.DB.View)">
            <summary>
   The method that Revit will invoke to perform an export to IFC.
</summary>
            <remarks>
   There will be a transaction group opened for the document.  Any changes made to the document
   must be temporary, as the transaction group will automatically be rolled back at the end.
</remarks>
            <param name="document">
   The document to export.
</param>
            <param name="exporter">
   The IFC exporter object.
</param>
            <param name="filterView">
   The view whose filter visibility settings govern the export.
</param>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IExporterIFC.ExportIFC(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.IFC.ExporterIFC,Autodesk.Revit.DB.View)">
            <summary>
   The method that Revit will invoke to perform an export to IFC.
</summary>
            <remarks>
   There will be a transaction group opened for the document.  Any changes made to the document
   must be temporary, as the transaction group will automatically be rolled back at the end.
</remarks>
            <param name="document">
   The document to export.
</param>
            <param name="exporter">
   The IFC exporter object.
</param>
            <param name="filterView">
   The view whose filter visibility settings govern the export.
</param>
            <since>
   2012
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IExporterIFC">
            <summary>
   The interface used to implement a custom IFC exporter.
</summary>
            <remarks>
   Implement this interface and register an instance of the derived class with ExporterIFCRegistry.
</remarks>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCGeometryInfo.GetRepresentations">
            <summary>
   Gets the representation handles created representing the processed geometry and stored in this object.
</summary>
            <returns>
   The collection of representation handles.
</returns>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCGeometryInfo.GetFaces">
            <summary>
   Gets the IfcFace handles created representing the processed geometry and stored in this object.
</summary>
            <returns>
   The collection of face handles.
</returns>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCGeometryInfo.GetSurfaces">
            <summary>
   Gets the IfcSurface handles created representing the processed geometry and stored in this object.
</summary>
            <returns>
   The collection of surface handles.
</returns>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCGeometryInfo.GetCurves">
            <summary>
   Gets the IfcCurve handles created representing the processed geometry and stored in this object.
</summary>
            <returns>
   The collection of curve handles.
</returns>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCGeometryInfo.CreateFaceGeometryInfo(Autodesk.Revit.DB.IFC.ExporterIFC,Autodesk.Revit.DB.Plane,Autodesk.Revit.DB.XYZ,System.Double,System.Boolean)">
            <summary>
   Creates a new container object which holds IfcFace handles processed from a Revit geometry object.
</summary>
            <param name="ExporterIFC">
   The exporter.
</param>
            <param name="Plane">
   The plane in which the face handles must lie.
</param>
            <param name="ProjDir">
   The normal vector to the input plane.
</param>
            <param name="epsilon">
   The epsilon value used to process surfaces.
</param>
            <param name="createRepresentations">
   Indicates if this should also create geometry representation handles.
</param>
            <returns>
   The new geometry info container.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCGeometryInfo.CreateFaceGeometryInfo(System.Double,System.Boolean)">
            <summary>
   Creates a new container object which holds IfcFace handles processed from a Revit geometry object.
</summary>
            <param name="epsilon">
   The epsilon value used to process surfaces.
</param>
            <param name="isCoarse">
   Indicates whether we should use a coarse representation.
</param>
            <returns>
   The new geometry info container.
</returns>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCGeometryInfo.CreateFaceGeometryInfo(System.Double)">
            <summary>
   Creates a new container object which holds IfcFace handles processed from a Revit geometry object.
</summary>
            <param name="epsilon">
   The epsilon value used to process surfaces.
</param>
            <returns>
   The new geometry info container.
</returns>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCGeometryInfo.CreateSurfaceGeometryInfo(System.Double)">
            <summary>
   Creates a new container object which holds IfcSurface handles processed from a Revit geometry object.
</summary>
            <param name="epsilon">
   The epsilon value used to process surfaces.
</param>
            <returns>
   The new geometry info container.
</returns>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCGeometryInfo.CreateCurveGeometryInfo(Autodesk.Revit.DB.IFC.ExporterIFC,Autodesk.Revit.DB.Transform,Autodesk.Revit.DB.XYZ,System.Boolean)">
            <summary>
   Creates a new container object which holds IfcCurve handles processed from a Revit geometry object.
</summary>
            <param name="ExporterIFC">
   The exporter.
</param>
            <param name="lcs">
   The local coordinate system that defines the plane in which the curve handles must lie.
</param>
            <param name="projectionDir">
   The normal vector to the input plane.
</param>
            <param name="planViewOnly">
   True to match curves with plan view visibility only, false to match curves regardless of their plan view visibility.
</param>
            <returns>
   The new geometry info container.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2017
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCGeometryInfo.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCGeometryInfo">
            <summary>
   A container class for Revit geometry extracted from an element.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.AddValueString(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.ElementId,System.String)">
            <summary>
   Adds a string value to a built-in parameter.
</summary>
            <param name="element">
   The element.
</param>
            <param name="builtInParameter">
   The built-in parameter id.
</param>
            <param name="propertyValue">
   The new value.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.SetGlobal2DDirectionHandles(System.Boolean,Autodesk.Revit.DB.IFC.IFCAnyHandle,Autodesk.Revit.DB.IFC.IFCAnyHandle)">
            <summary>
   Sets the handles representing the cardinal directions in 2D.
</summary>
            <param name="positive">
   True if the handles returned should be in the positive direction, false
   if the handles should be in the negative direction.
</param>
            <param name="xDir">
   The X direction handle.
</param>
            <param name="yDir">
   The Y direction handle.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.SetGlobal3DDirectionHandles(System.Boolean,Autodesk.Revit.DB.IFC.IFCAnyHandle,Autodesk.Revit.DB.IFC.IFCAnyHandle,Autodesk.Revit.DB.IFC.IFCAnyHandle)">
            <summary>
   Sets the handles representing the cardinal directions in 3D.
</summary>
            <param name="positive">
   True if the handles returned should be in the positive direction, false
   if the handles should be in the negative direction.
</param>
            <param name="xDir">
   The X direction handle.
</param>
            <param name="yDir">
   The Y direction handle.
</param>
            <param name="zDir">
   The Z direction handle.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetGlobal2DDirectionHandles(System.Boolean)">
            <summary>
   Obtains the handles representing the cardinal directions in 2D.
</summary>
            <param name="positive">
   True if the handles returned should be in the positive direction, false
   if the handles should be in the negative direction.
</param>
            <returns>
   The collection of handles.
</returns>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetGlobal3DDirectionHandles(System.Boolean)">
            <summary>
   Obtains the handles representing the cardinal directions in 3D.
</summary>
            <param name="positive">
   True if the handles returned should be in the positive direction, false
   if the handles should be in the negative direction.
</param>
            <returns>
   The collection of handles.
</returns>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.SetGlobal2DOriginHandle(Autodesk.Revit.DB.IFC.IFCAnyHandle)">
            <summary>
   Sets the handle representing the 2D origin.
</summary>
            <param name="origin">
   The origin handle.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.SetGlobal3DOriginHandle(Autodesk.Revit.DB.IFC.IFCAnyHandle)">
            <summary>
   Sets the handle representing the 3D origin.
</summary>
            <param name="origin">
   The origin handle.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetGlobal2DOriginHandle">
            <summary>
   Obtains the handle representing the 2D origin.
</summary>
            <returns>
   The handle.
</returns>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetGlobal3DOriginHandle">
            <summary>
   Obtains the handle representing the 3D origin.
</summary>
            <returns>
   The handle.
</returns>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetRelativeLocalPlacementOffsetTransform(Autodesk.Revit.DB.IFC.IFCAnyHandle,Autodesk.Revit.DB.IFC.IFCAnyHandle)">
            <summary>
   Obtains the relative transform between two IfcLocalPlacement handles.
</summary>
            <param name="originalPlacement">
   The original placement from which the result transforms coordinates and directions.
</param>
            <param name="relativePlacement">
   The relative placement to which the result transforms coordinates and directions.
</param>
            <returns>
   The transform from the original placement to the new placement.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.IsCurveFromOtherElementSketch(Autodesk.Revit.DB.CurveElement)">
            <summary>
   Identifies if the given curve element is generated by another element's
   sketch, or if it represents an independent curve element accessible directly
   by the user.
</summary>
            <param name="curveElement">
   The curve element.
</param>
            <returns>
   True if the curve element was generated by a sketch, false if it is
   independent.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetLegacyCurtainSubElements(Autodesk.Revit.DB.Element)">
            <summary>
   Gets the sub elements from a legacy curtain element.
</summary>
            <param name="element">
   The legacy curtain element.
</param>
            <returns>
   The element array.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetAttachedColumns(Autodesk.Revit.DB.Wall)">
            <summary>
   Obtains a list of columns known to Revit as intersecting with this wall.
</summary>
            <param name="pWallElem">
   The wall.
</param>
            <returns>
   The columns found.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetConnectedWalls(Autodesk.Revit.DB.Wall,Autodesk.Revit.DB.IFC.IFCConnectedWallDataLocation)">
            <summary>
   Obtains the IFC-specific information regarding the connections between this wall and other elements.
</summary>
            <param name="pWallElem">
   The wall.
</param>
            <param name="locaction">
   The location on the wall from where the connections should be obtained.  This should be either
   IFCConnectedWallDataLocation.Start or IFCConnectedWallDataLocation.End.
</param>
            <returns>
   The connection information.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentOutOfRangeException">
   A value passed for an enumeration argument is not a member of that enumeration
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetLegacyStairsProperties(Autodesk.Revit.DB.IFC.ExporterIFC,Autodesk.Revit.DB.Element,System.Int32@,System.Int32@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
   Returns one or more properties for legacy (created in R2012 or before) Stairs.
</summary>
            <param name="exporterIFC">
   The exporter.
</param>
            <param name="pElement">
   the legacy stair.
</param>
            <param name="pNumRisers">
   Number of Risers in the Stair.
</param>
            <param name="pNumTreads">
   Number of Treads in the Stair.
</param>
            <param name="pRiserHeight">
   Riser Height of the risers in the Stair.
</param>
            <param name="pTreadLength">
   Tread length of the treads in the Stair.
</param>
            <param name="pMinTreadLength">
   Minimum Tread length of the treads in the Stair.
</param>
            <param name="pNosingLength">
   Nosing length of the treads in the Stair.
</param>
            <param name="pWaistThickness">
   Waist thickness of the flight of stair.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetUnscaledTransform(Autodesk.Revit.DB.IFC.ExporterIFC,Autodesk.Revit.DB.IFC.IFCAnyHandle)">
            <summary>
   Obtains the unscaled transform from an IfcLocalPlacement handle.
</summary>
            <param name="exporterIFC">
   The exporter.
</param>
            <param name="placement">
   The placement handle.
</param>
            <returns>
   The transform.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetRoomBoundaryAsCurveLoopArray(Autodesk.Revit.DB.SpatialElement,Autodesk.Revit.DB.SpatialElementBoundaryOptions,System.Boolean)">
            <summary>
   Obtains the spatial element boundary curves as an array of CurveLoops, needed for processing into IFC-specific
   elements later.
</summary>
            <param name="spatialElement">
   The spatial element.
</param>
            <param name="options">
   The options for extraction of the boundaries.
</param>
            <param name="cleanCurves">
   If true, curves will be trimmed to meet their neighbors.  If false, no trimming will take place.
</param>
            <returns>
   The list of CurveLoops, which could be empty if the routine is unable to get the boundary curve loops.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
   Throws an exception if any of the boundary loops are invalid or degenerate.
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.ExportExtrudedSlabOpenings(Autodesk.Revit.DB.IFC.ExporterIFC,Autodesk.Revit.DB.Element,Autodesk.Revit.DB.IFC.IFCLevelInfo,Autodesk.Revit.DB.IFC.IFCAnyHandle,System.Collections.Generic.IList`1{Autodesk.Revit.DB.IFC.IFCAnyHandle},System.Collections.Generic.IList`1{System.Collections.Generic.IList`1{Autodesk.Revit.DB.CurveLoop}},Autodesk.Revit.DB.Plane,Autodesk.Revit.DB.IFC.IFCProductWrapper)">
            <summary>
   Exports the openings associated to an IfcSlab exported as an extrusion.
</summary>
            <param name="exporterIFC">
   The ExporterIFC class.
</param>
            <param name="pElem">
   The base slab element.
</param>
            <param name="levelInfo">
   The base level information.
</param>
            <param name="localPlacementAny">
   The local placement of the slab.
</param>
            <param name="elementSlabAnyArr">
   The list of IfcSlabs created from the initial element.
</param>
            <param name="extrusionLoops">
   The profile curves for the extrusions, including the opening curves.
</param>
            <param name="plane">
   The plane of the profile curves.
</param>
            <param name="pWrapper">
   The product wrapper.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.ExportSlabAsExtrusion(Autodesk.Revit.DB.IFC.ExporterIFC,Autodesk.Revit.DB.Element,Autodesk.Revit.DB.GeometryElement,Autodesk.Revit.DB.IFC.IFCTransformSetter,Autodesk.Revit.DB.IFC.IFCAnyHandle,System.Collections.Generic.IList`1{Autodesk.Revit.DB.IFC.IFCAnyHandle}@,System.Collections.Generic.IList`1{Autodesk.Revit.DB.IFC.IFCAnyHandle}@,System.Collections.Generic.IList`1{System.Collections.Generic.IList`1{Autodesk.Revit.DB.CurveLoop}}@,System.Collections.Generic.IList`1{Autodesk.Revit.DB.IFC.IFCExtrusionCreationData}@,Autodesk.Revit.DB.Plane)">
            <summary>
   Attempts to export an IfcSlab using extrusions, clippings and openings by analyzing the geometry of the element.
   Used for more advanced cases than the ExtrusionAnalyzer.
</summary>
            <param name="exporterIFC">
   The ExporterIFC class.
</param>
            <param name="pCeilingAndFloor">
   The element to be exported.
</param>
            <param name="pGRep">
   The model geometry of the element.
</param>
            <param name="pTmpTrfSetter">
   The transform setter.
</param>
            <param name="localPlacement">
   The initial local placement based on the base level.
</param>
            <param name="localPlacementAnyArr">
   The local placement, potentially modified by this function.
</param>
            <param name="reps">
   The entity handles corresponding to the slab representations.
</param>
            <param name="extrusionLoops">
   The curve loops representing the profile of the extrusion.
</param>
            <param name="loopExtraParams">
   Extra calculated information for each of the profile loops.
</param>
            <param name="plane">
   The plane of the profile curves.
</param>
            <returns>
   Returns true if successful, false otherwise.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.ComputeRoofProjectedArea(Autodesk.Revit.DB.Element)">
            <summary>
   Returns the projected area of the room, unscaled.
</summary>
            <param name="pElem">
   The roof.
</param>
            <returns>
   The projected area.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetIFCType(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.IFC.ExporterIFC)">
            <summary>
   Obtains the IFC type associated to the given element for the current export.
</summary>
            <remarks>
   IFC type names are affected by the user's entries in the mapping file set for a
   given export operation.
</remarks>
            <param name="element">
   The element.
</param>
            <param name="exporterIFC">
   The exporter.
</param>
            <returns>
   The IFC type.  This is an empty string if the element should not be exported because it is not
   found in the mapping file.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetIFCClassName(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.IFC.ExporterIFC)">
            <summary>
   Obtains the IFC class name associated to the given element for the current export.
</summary>
            <remarks>
   IFC class names are affected by the user's entries in the mapping file set for a
   given export operation.
</remarks>
            <param name="element">
   The element.
</param>
            <param name="exporterIFC">
   The exporter.
</param>
            <returns>
   The IFC class name.  This is an empty string if the element should not be exported because it is not
   found in the mapping file.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetIFCClassNameByCategory(Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.IFC.ExporterIFC)">
            <summary>
   Obtains the IFC class name associated to a given category id for the current export.
</summary>
            <remarks>
   IFC class names are affected by the user's entries in the mapping file set for a
   given export operation.
</remarks>
            <param name="catId">
   The category id.
</param>
            <param name="exporterIFC">
   The exporter.
</param>
            <returns>
   The IFC class name.  This is an empty string if the element should not be exported because it is not
   found in the mapping file.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetOpeningData(Autodesk.Revit.DB.IFC.ExporterIFC,Autodesk.Revit.DB.Element,Autodesk.Revit.DB.Transform,Autodesk.Revit.DB.IFC.IFCRange)">
            <summary>
   Gets the openings data from the element.
</summary>
            <param name="exporterIFC">
   The exporter.
</param>
            <param name="element">
   The element.
</param>
            <param name="lcs">
   The local coordinate system for the extrusion.
</param>
            <param name="range">
   The range.  This consists of two double values representing the height in Z at the start and the end
   of the range.  If the values are identical the entire element is used.
</param>
            <returns>
   The opening data.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2017
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.AddClippingsToBaseExtrusion(Autodesk.Revit.DB.IFC.ExporterIFC,Autodesk.Revit.DB.Wall,Autodesk.Revit.DB.XYZ,Autodesk.Revit.DB.IFC.IFCRange,Autodesk.Revit.DB.IFC.IFCRange,Autodesk.Revit.DB.IFC.IFCAnyHandle,System.Collections.Generic.IList`1{Autodesk.Revit.DB.IFC.IFCExtrusionData}@)">
            <summary>
   Processes the geometry of the wall to create an extruded area solid representing the geometry of the wall (including
   any clippings imposed by neighboring elements).
</summary>
            <param name="exporterIFC">
   The exporter.
</param>
            <param name="wall">
   The wall.
</param>
            <param name="setterOffset">
   The offset from the placement setter.
</param>
            <param name="range">
   The range.  This consists of two double values representing the height in Z at the start and the end
   of the range.  If the values are identical the entire wall is used.
</param>
            <param name="zSpan">
   The overall span in Z of the wall.
</param>
            <param name="baseBodyItemHandle">
   The IfcExtrudedAreaSolid handle generated initially for the wall.
</param>
            <param name="pCutPairOpenings">
   A collection of extruded openings that can be derived from the wall geometry.
</param>
            <returns>
   IfcEtxtrudedAreaSolid handle.  This may be the same handle as was input, or a modified handle derived from the clipping
   geometry.  If the function fails this handle will have no value.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetLoopsFromTopBottomFace(Autodesk.Revit.DB.IFC.ExporterIFC,Autodesk.Revit.DB.Wall)">
            <summary>
   Gets the curve loop(s) that represent the bottom or top face of the wall, usable to create an extrusion for the wall geometry.
</summary>
            <remarks>
   This function is intended to help determine if a Revit Wall can be exported as an IfcWallStandardCase.  The conditions for
   exporting an IfcWallStandardCase require that the geometry of the wall be described as one profile curve loop extruded in the
   Z direction, with potential clip planes and openings applied to the base geometry.  This function will use either the top
   or bottom face to determine the boundary curve loop.  Regardless of whether the top or bottom face is used, the curve loop
   will be located on the plane corresponding to the base of the wall.
</remarks>
            <param name="exporterIFC">
   The exporter.
</param>
            <param name="wall">
   The wall.
</param>
            <returns>
   The curve loops.  If the function has failed, this collection will be empty.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.IsWallBaseRectangular(Autodesk.Revit.DB.Wall,Autodesk.Revit.DB.Curve)">
            <summary>
   Identifies if the wall's base can be represented by a direct thickening of the wall's base curve.
</summary>
            <param name="wall">
   The wall.
</param>
            <param name="curve">
   The wall's base curve.
</param>
            <returns>
   True if the wall's base can be represented by a direct thickening of the wall's base curve.
   False is the wall's base shape is affected by other geometry, and thus cannot be represented
   by a direct thickening of the wall's base cure.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
   The input curve points to a helical curve and is not supported for this operation.
</exception>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.CanExportWallGeometryAsExtrusion(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.IFC.IFCRange)">
            <summary>
   Identifies if the base geometry of the wall can be represented as an extrusion.
</summary>
            <param name="element">
   The wall or in-place wall element.
</param>
            <param name="range">
   The range.  This consists of two double values representing the height in Z at the start and the end
   of the range.  If the values are identical the entire wall is used.
</param>
            <returns>
   True if the wall export can be made in the form of an extrusion, false if the
   geometry cannot be assigned to an extrusion.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetGeometryFromInplaceWall(Autodesk.Revit.DB.FamilyInstance)">
            <summary>
   Obtains a special snapshot of the geometry of an in-place wall element suitable for export.
</summary>
            <param name="pFamInstWallElem">
   The in-place wall instance.
</param>
            <returns>
   The in-place wall geometry.  Returns <see langword="null" /> if there is no special
   geometry for the wall needed for export; the standard geometry of the wall can be used.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetElevationProfile(Autodesk.Revit.DB.Wall)">
            <summary>
   Obtains the curve loops which bound the wall's elevation profile.
</summary>
            <param name="pVWall">
   The wall.
</param>
            <returns>
   The collection of curve loops.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
   The wall does not have an elevation profile.
</exception>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.HasElevationProfile(Autodesk.Revit.DB.Wall)">
            <summary>
   Identifies if the wall has a sketched elevation profile.
</summary>
            <param name="pVWall">
   The wall.
</param>
            <returns>
   True if the wall has a sketch elevation profile, false otherwise.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetWallTrimmedCurve(Autodesk.Revit.DB.Wall)">
            <summary>
   Obtains the curve of the wall trimmed or extended according to the end conditions of the wall.
</summary>
            <param name="pVWall">
   The wall.
</param>
            <returns>
   The trimmed or extended curve.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetWallBaseOffset(Autodesk.Revit.DB.Wall)">
            <summary>
   Obtains the base offset of the wall.
</summary>
            <param name="wall">
   The wall.
</param>
            <returns>
   The base offset of the wall.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.IsWallCompletelyClipped(Autodesk.Revit.DB.Wall,Autodesk.Revit.DB.IFC.ExporterIFC,Autodesk.Revit.DB.IFC.IFCRange)">
            <summary>
   Determines if the input wall is completely removed by interaction with other elements
   within the given range.
</summary>
            <param name="pVWall">
   The wall.
</param>
            <param name="exporterIFC">
   The exporter.
</param>
            <param name="range">
   The range.  This consists of two double values representing the height in Z at the start and the end
   of the range.  If the values are identical the entire wall is used.
</param>
            <returns>
   True if the wall should be ignored within the given range.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.AreSolidsEqual(Autodesk.Revit.DB.Solid,Autodesk.Revit.DB.Solid,Autodesk.Revit.DB.Transform@)">
            <summary>
   Determines whether two solids are identical, potentially offset from each other.
</summary>
            <param name="first">
   The first solid.
</param>
            <param name="second">
   The second solid
</param>
            <param name="trf">
   The offset transform
</param>
            <returns>
   True if they are identical, false otherwise.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetTransformForDoorOrWindow(Autodesk.Revit.DB.FamilyInstance,Autodesk.Revit.DB.FamilySymbol,System.Boolean,System.Boolean)">
            <summary>
   Obtains the transform for the door or window instance.
</summary>
            <param name="familyInstance">
   The family instance.
</param>
            <param name="familySymbol">
   The family symbol.
</param>
            <param name="flippedX">
   Is the door or window flipped in X?
</param>
            <param name="flippedY">
   Is the door or window flipped in Y?
</param>
            <returns>
   The transform.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetMinSymbolWidth(Autodesk.Revit.DB.FamilySymbol)">
            <summary>
   Obtains the minimum width of the given FamilySymbol.
</summary>
            <param name="symbol">
   The family symbol.
</param>
            <returns>
   The minimum width.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetMinSymbolHeight(Autodesk.Revit.DB.FamilySymbol)">
            <summary>
   Obtains the minimum height of the given FamilySymbol.
</summary>
            <param name="symbol">
   The family symbol.
</param>
            <returns>
   The minimum height.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.UsesInstanceGeometry(Autodesk.Revit.DB.FamilyInstance)">
            <summary>
   Identifies if the family instance has its own geometry, or uses the symbol's geometry with a transform.
</summary>
            <remarks>
   A Family Instance can have its own copy of geometry, or use the symbol's geometry with a transform.
   This method identifies the source of this family instance's geometry.
</remarks>
            <param name="familyInstance">
   The family instance.
</param>
            <returns>
   True if the instance has its own geometry.  False if the symbol's geometry is used.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetOriginalSymbol(Autodesk.Revit.DB.FamilyInstance)">
            <summary>
   Returns the original family symbol of this family instance, before the instance is modified by
   joins, cuts, coping, extensions, or other post-processing.
</summary>
            <param name="familyInstance">
   The FamilyInstance.
</param>
            <returns>
   The original FamilySymbol.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.CollectGeometryInfo(Autodesk.Revit.DB.IFC.ExporterIFC,Autodesk.Revit.DB.IFC.IFCGeometryInfo,Autodesk.Revit.DB.GeometryObject,Autodesk.Revit.DB.XYZ,System.Boolean,Autodesk.Revit.DB.Transform)">
            <summary>
   Collects all the target geometry from the input geometry object and adds it as IFC handles
   to the IFCInfo.
</summary>
            <remarks>
   The type of geometry collected is determined by the method of creation for the IFCGeometryInfo.
</remarks>
            <param name="exporterIFC">
   The exporter.
</param>
            <param name="geometryInfo">
   The container object which collects the geometry.
</param>
            <param name="gNode">
   The geometry object to be processed.
</param>
            <param name="offset">
   The offset to apply to each of the collected geometry handles.
</param>
            <param name="forceVisible">
   True to process geometry which is not set as visible.  False to only process visible geometry.
</param>
            <param name="transform">
   An overall transform to apply to each of the collected geometry handles.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.CollectGeometryInfo(Autodesk.Revit.DB.IFC.ExporterIFC,Autodesk.Revit.DB.IFC.IFCGeometryInfo,Autodesk.Revit.DB.GeometryObject,Autodesk.Revit.DB.XYZ,System.Boolean)">
            <summary>
   Collects all the target geometry from the input geometry object and adds it as IFC handles
   to the IFCInfo.
</summary>
            <remarks>
   The type of geometry collected is determined by the method of creation for the IFCGeometryInfo.
</remarks>
            <param name="exporterIFC">
   The exporter.
</param>
            <param name="geometryInfo">
   The container object which collects the geometry.
</param>
            <param name="gNode">
   The geometry object to be processed.
</param>
            <param name="offset">
   The offset to apply to each of the collected geometry handles.
</param>
            <param name="forceVisible">
   True to process geometry which is not set as visible.  False to only process visible geometry.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.TransformAndScaleVector(Autodesk.Revit.DB.IFC.ExporterIFC,Autodesk.Revit.DB.XYZ)">
            <summary>
   Converts a vector from global Revit coordinates to current IFC coordinates, including scale.
</summary>
            <param name="exporterIFC">
   The exporter.
</param>
            <param name="origVector">
   The original vector.
</param>
            <returns>
   The transformed and scaled point.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.TransformAndScalePoint(Autodesk.Revit.DB.IFC.ExporterIFC,Autodesk.Revit.DB.XYZ)">
            <summary>
   Converts a point from global Revit coordinates to current IFC coordinates, including scale.
</summary>
            <param name="exporterIFC">
   The exporter.
</param>
            <param name="origPt">
   The original point.
</param>
            <returns>
   The transformed and scaled point.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.ValidateCurveLoops(System.Collections.Generic.IList`1{Autodesk.Revit.DB.CurveLoop},Autodesk.Revit.DB.XYZ)">
            <summary>
   Does validity checks on a list of curve loops to ensure that they are all co-planar, closed, and properly oriented.
</summary>
            <param name="curveLoops">
   The loops to check.
</param>
            <param name="extrDirVec">
   The normal.
</param>
            <returns>
   returns the curve loops properly oriented, if possible.  If not, the return contains no loops.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.IsCurveLoopConvexWithOpenings(Autodesk.Revit.DB.CurveLoop,Autodesk.Revit.DB.Wall,Autodesk.Revit.DB.IFC.IFCRange,System.Boolean@)">
            <summary>
   Checks if the region bounded by the input curve loop can be represented as the subtraction of 0 or more convex polygons from a base convex polygon.
</summary>
            <remarks>
   This function is intended to be used to determine if the geometry of a wall with an elevation profile can be successfully represented
   as a vertical extrusion with one or more openings removed.
   If this function is to return true, the subtracting polygons must each have at least one edge coincident with the base convex polygon.
   Before the check is performed, this input curve will be trimmed by the range extents of the wall, if any.
</remarks>
            <param name="inputCurveLoop">
   The input curve loop.  It is intended that this curve loop have been obtained from the elevation profile of a wall.
</param>
            <param name="wall">
   The wall from which the curve loop was obtained.
</param>
            <param name="range">
   The range extents of the wall.
</param>
            <param name="loopIsDegenerate">
   If the function returns false but this returns true, the loop could be obtained but was degenerate.  Thus there is no extrusion
   that can be produced.
</param>
            <returns>
   True if the region can be represented by a boolean combination of polygons, false otherwise.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.SortCurveLoops(System.Collections.Generic.IList`1{Autodesk.Revit.DB.CurveLoop})">
            <summary>
   Sorts a set of curve loops such that outer and inner loops are separated.
</summary>
            <remarks>
   Outer loops are separated and inner loops are grouped according to their outer loop. Loops are assumed to be non-intersecting,
   and there will be no nesting of inner loops (that is, an inner loop of an inner loop is another outer loop).
</remarks>
            <param name="loops">
   The curve loops.
</param>
            <returns>
   The sorted collection of loops.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetLegacyStairOrRampComponents(Autodesk.Revit.DB.IFC.ExporterIFC,Autodesk.Revit.DB.Element)">
            <summary>
   Gets the components of a stair or ramp.
</summary>
            <param name="exporterIFC">
   The exporter.
</param>
            <param name="element">
   The legacy stair or ramp element.
</param>
            <returns>
   The LegacyStairOrRamp that contains the components. NULL means the components can't be determined.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.ComputeAreaOfCurveLoops(System.Collections.Generic.IList`1{Autodesk.Revit.DB.CurveLoop})">
            <summary>
   Computes total area of the list of curve loops.  If the area cannot be calculated,
   returns 0.0.
</summary>
            <remarks>
   All curve loops in the list must be planar and lie in the same plane.
</remarks>
            <returns>
   Computed area.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetNumBuildingStoreys(Autodesk.Revit.DB.IFC.ExporterIFC)">
            <summary>
   Returns the number of non-empty, non-duplicate building stories in the file.
</summary>
            <param name="exporterIFC">
   The exporter.
</param>
            <returns>
   The number of stories.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.IsWallJoinedToTop(Autodesk.Revit.DB.Wall)">
            <summary>
   Checks if wall is joined to top.
</summary>
            <param name="wall">
   The wall.
</param>
            <returns>
   True if wall is joined to top, false if not.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.EndExportInternal(Autodesk.Revit.DB.IFC.ExporterIFC)">
            <summary>
   Use the internal Revit implementation to relate elements at the end of export.
</summary>
            <param name="exporterIFC">
   The exporter.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.CreateSubElementGUID(Autodesk.Revit.DB.Element,System.Int32)">
            <summary>
   Creates a consistent GUID for an IFC entity related to a Revit element.
   A "related" sub-element is one that is unique for a given type of element, and can
   therefore by identified by a simple index value (e.g. PSet_Wall_Common property set for a wall.)
   The index value 0 is reserved, as this would generate the GUID of the element itself.
   A listing of known sub-elements is contained in IFCSubElementEnums.cs; it is
   expected that this list would be maintained up-to-date, instead of passing arbitrary values
   into this function.
</summary>
            <param name="pElement">
   The element.
</param>
            <param name="subElementIndex">
   The global index for this sub-element.
</param>
            <returns>
   The guid string.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.CreateAlternateGUID(Autodesk.Revit.DB.Element)">
            <summary>
   Creates a GUID for the given element.
</summary>
            <param name="pElement">
   The element.
</param>
            <returns>
   The guid string.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.CreateProjectLevelGUID(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.IFC.IFCProjectLevelGUIDType)">
            <summary>
   Creates a GUID from Revit project for given GUIDType.
</summary>
            <param name="document">
   The document.
</param>
            <param name="guidType">
   The GUID type.
</param>
            <returns>
   The guid string.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentOutOfRangeException">
   A value passed for an enumeration argument is not a member of that enumeration
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.CreateGUID">
            <summary>
   Creates a randomized GUID.
</summary>
            <returns>
   The guid string.
</returns>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetInstanceCutoutFromWall(Autodesk.Revit.DB.Document,Autodesk.Revit.DB.Wall,Autodesk.Revit.DB.FamilyInstance,Autodesk.Revit.DB.XYZ@)">
            <summary>
   Gets the curve loop corresponding to the hole in the wall made by the instance.
</summary>
            <param name="pADoc">
   The document.
</param>
            <param name="pVWall">
   The host wall.
</param>
            <param name="pFamInst">
   The hosted instance.
</param>
            <param name="pCutDir">
   The direction of the hole relative to the location of the curve loop.
</param>
            <returns>
   The opening in the wall.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetDoor2DArcsFromFamily(Autodesk.Revit.DB.Family)">
            <summary>
   Gets the arcs associated with the plan view of a door.
</summary>
            <param name="pFam">
   The family.
</param>
            <returns>
   The arcs.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.ComputeSubcomponents(Autodesk.Revit.DB.HostObject)">
            <summary>
   Splits a roof or floor element composed of planar surfaces into a set of roughly vertical extruded loops of
   uniform depth if possible.
</summary>
            <param name="roofOrFloor">
   The roof or floor.
</param>
            <returns>
   A collection of computed components.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentException">
   The host object roofOrFloor must be a floor or a non face-based roof.
</exception>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
   The roof or floor cannot be split into subcomponents by this routine.  Possible reasons are, among others:
   (1) the roof or floor contains non-planar surfaces, (2) the roof or floor cannot be divided into sub-components
   of equal thickness, or (3) the roof subcomponents contain inner boundary loops.
</exception>
            <since>
   2016
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetRoofComponents(Autodesk.Revit.DB.IFC.ExporterIFC,Autodesk.Revit.DB.RoofBase)">
            <summary>
   Gets the components of roof slabs.
</summary>
            <param name="exporterIFC">
   The exporter.
</param>
            <param name="roof">
   The roof element.
</param>
            <returns>
   The roof components.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFCUtils.GetLevelIdByHeight(Autodesk.Revit.DB.IFC.ExporterIFC,Autodesk.Revit.DB.Element)">
            <summary>
   Gets the level if by the height of the element.
</summary>
            <param name="exporterIFC">
   The exporter.
</param>
            <param name="elem">
   The element.
</param>
            <returns>
   The level id.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2014
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.ExporterIFCUtils">
            <summary>
   A class that contains utilities needed to implement Revit's version of the IFC export client application.
</summary>
            <remarks>
   This class contains special API utilities needed to enable the implementation of the client application
   for IFC export.  Some of these utilities will be needed temporarily while the code for IFC export is
   migrated into the export client.  These temporary interfaces are likely to change in upcoming Revit
   releases.
</remarks>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCOpeningData.GetOpeningSolids">
            <summary>
   Gets opening solids.
</summary>
            <returns>
   The solids.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCOpeningData.GetExtrusionData">
            <summary>
   Gets extrusion data.
</summary>
            <returns>
   The extrusion data.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCOpeningData.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCOpeningData.IsRecess">
            <summary>
   Trus if it is a recess, false if it is an opening.
</summary>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCOpeningData.OpeningElementId">
            <summary>
   The opening element id.
</summary>
            <since>
   2014
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCOpeningData">
            <summary>
   A class that contains opening data including extrusion data, opening solids and opening element id.
</summary>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.RoofComponents.GetAreasOfCurveLoops">
            <summary>
   The areas of CurveLoops of roof slabs.
</summary>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.RoofComponents.GetLoopFaces">
            <summary>
   The faces of the loops of roof slabs.
</summary>
            <returns>
   The faces.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.RoofComponents.GetCurveLoops">
            <summary>
   The CurveLoops of roof slabs.
</summary>
            <returns>
   The CurveLoops.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.RoofComponents.GetPlaneOrigins">
            <summary>
   The plane origins of roof slabs.
</summary>
            <returns>
   The origins.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.RoofComponents.GetPlaneDirections">
            <summary>
   The plane directions of roof slabs.
</summary>
            <returns>
   The directions.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.RoofComponents.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.RoofComponents.ScaledDepth">
            <summary>
   The depth of the roof slab.
</summary>
            <since>
   2014
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.RoofComponents">
            <summary>
   A class that contains multiple roof slab infos of a roof.
</summary>
            <remarks>
   This class contains a series of collections that are all of the same length, and whose nth index corresponds
   to the nth slab of the roof.
</remarks>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.HostObjectSubcomponentInfo.GetCurveLoop">
            <summary>
   Gets the CurveLoop representing the base profile curve loop of the roof or floor slab
</summary>
            <returns>
   The CurveLoop.
</returns>
            <since>
   2016
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.HostObjectSubcomponentInfo.GetPlane">
            <summary>
   Gets the plane representing the normal and origin of the surface containg the base profile curve loop of the roof or floor slab.
</summary>
            <returns>
   The plane.
</returns>
            <since>
   2016
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.HostObjectSubcomponentInfo.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.HostObjectSubcomponentInfo.AreaOfCurveLoop">
            <summary>
   The area of the CurveLoop of the roof or floor slab.
</summary>
            <since>
   2016
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.HostObjectSubcomponentInfo.LoopFace">
            <summary>
   The face of the loops of the roof or floor slab.
</summary>
            <since>
   2016
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.HostObjectSubcomponentInfo.Depth">
            <summary>
   The depth of the roof or floor slab.
</summary>
            <remarks>
   The depth is the thickness of the slab as measured perpendicular to the slab's main faces,
   as opposed to the vertical extrusion distance.
</remarks>
            <since>
   2016
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.HostObjectSubcomponentInfo">
            <summary>
   A class that contains roof or floor slab information, calculated by ExporterIFCUtils.ComputeSubcomponents().
</summary>
            <remarks>
   A slab is an extrusion with one outer and no inner base profile curve loops, created by
   extruding the base profile loop in the direction Plane.Normal a distance given by the Depth value.
</remarks>
            <since>
   2016
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCLegacyStairOrRamp.GetWalkLines">
            <summary>
   Gets walk lines.
</summary>
            <returns>
   The walk lines.
</returns>
            <since>
   2015
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCLegacyStairOrRamp.GetBoundaryLines">
            <summary>
   Gets boundary lines.
</summary>
            <returns>
   The boundary lines.
</returns>
            <since>
   2015
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCLegacyStairOrRamp.GetTreadsLength">
            <summary>
   Gets the length of treads.
</summary>
            <returns>
   The length of treads.
</returns>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCLegacyStairOrRamp.GetNumberOfTreads">
            <summary>
   Gets the number of treads.
</summary>
            <returns>
   The list of numbers of treads.
</returns>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCLegacyStairOrRamp.GetNumberOfRisers">
            <summary>
   Gets the number of risers.
</summary>
            <returns>
   The list of numbers of risers.
</returns>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCLegacyStairOrRamp.GetStringerGeometries">
            <summary>
   Gets the geometries of stringers.
</summary>
            <returns>
   The geometries of stringers.
</returns>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCLegacyStairOrRamp.GetLandingGeometries">
            <summary>
   Gets the geometries of landings.
</summary>
            <returns>
   The geometries of landings.
</returns>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCLegacyStairOrRamp.GetRunGeometries">
            <summary>
   Gets the geometries of runs.
</summary>
            <returns>
   The geometries of runs.
</returns>
            <since>
   2013
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCLegacyStairOrRamp.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCLegacyStairOrRamp.IsRamp">
            <summary>
   True if it is a ramp, false if it is a stair.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCLegacyStairOrRamp.RiserHeight">
            <summary>
   The height of riser.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCLegacyStairOrRamp">
            <summary>
   The class contains the components of a legacy stair or ramp.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCFamilyInstanceExtrusionExportResults.GetExtrusionHandle">
            <summary>
   Gets the extruded solid handle generated for the family instance.
</summary>
            <returns>
   The handle.  If the extrusion analysis failed for the family, this will be a handle with no value assigned.
</returns>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCFamilyInstanceExtrusionExportResults.GetCutPairOpenings">
            <summary>
   Gets the set of "openings" determined from the analysis of the instance geometry.
</summary>
            <returns>
   The extra openings.
</returns>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCFamilyInstanceExtrusionExportResults.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCFamilyInstanceExtrusionExportResults.ExtraOffset">
            <summary>
   The extra offset determined from the geometry of the family instance.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCFamilyInstanceExtrusionExportResults.MaterialId">
            <summary>
   The best material id determined for the family instance.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCFamilyInstanceExtrusionExportResults">
            <summary>
   This class represents the results of a geometric analysis of a family instance.
</summary>
            <remarks>
   The analysis attempts to convert the geometry of the instance into a single extrusion with
   additional extruded openings cutting the main solid.
</remarks>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCProductWrapper.AddSite(Autodesk.Revit.DB.IFC.IFCAnyHandle)">
            <summary>
   Adds a site (IfcObject) handle to associate with the IfcProduct in this wrapper.
</summary>
            <param name="siteHandle">
   The site handle.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCProductWrapper.ClearFinishMaterials">
            <summary>
   Clear finish materials in this wrapper.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCProductWrapper.AddFinishMaterial(Autodesk.Revit.DB.IFC.IFCAnyHandle)">
            <summary>
   Adds a material handle to associate with the IfcProduct in this wrapper.
</summary>
            <param name="material">
   The material handle.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCProductWrapper.AddAnnotation(Autodesk.Revit.DB.IFC.IFCAnyHandle,Autodesk.Revit.DB.IFC.IFCLevelInfo,System.Boolean)">
            <summary>
   Adds an annotation handle to associate with the IfcProduct in this wrapper.
</summary>
            <remarks>
   If the IFCLevelInfo is not provided, and relateToLevel to true, the handle will be associated to the building handle.
</remarks>
            <param name="annoHnd">
   The annotation handle.
</param>
            <param name="levelInfo">
   Information on the associated level.  Optional, can be <see langword="null" />.
</param>
            <param name="relateToLevel">
   True to relate the annotation to the level, false otherwise.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCProductWrapper.AddElement(Autodesk.Revit.DB.IFC.IFCAnyHandle,Autodesk.Revit.DB.IFC.IFCLevelInfo,Autodesk.Revit.DB.IFC.IFCExtrusionCreationData,System.Boolean)">
            <summary>
   Adds an IfcElement handle to associate with the IfcProduct in this wrapper.
</summary>
            <remarks>
   If the IFCLevelInfo is not provided, and relateToLevel to true, the handle will be associated to the building handle.
</remarks>
            <param name="elementHandle">
   The IfcElement handle.
</param>
            <param name="pLevelInfo">
   The level info.
</param>
            <param name="params">
   The extrusion creation data associated with the given element.  Optional, can be <see langword="null" />.
</param>
            <param name="relateToLevel">
   True to relate the element to the level, false otherwise.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCProductWrapper.AddBuilding(Autodesk.Revit.DB.IFC.IFCAnyHandle)">
            <summary>
   Adds an IfcBuilding handle to associate with the IfcProduct in this wrapper.
</summary>
            <param name="buildingHandle">
   The IfcBuilding handle.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCProductWrapper.AddSpace(Autodesk.Revit.DB.IFC.IFCAnyHandle,Autodesk.Revit.DB.IFC.IFCLevelInfo,Autodesk.Revit.DB.IFC.IFCExtrusionCreationData,System.Boolean)">
            <summary>
   Adds an IfcSpace handle to associate with the IfcProduct in this wrapper.
</summary>
            <remarks>
   If the IFCLevelInfo is not provided, and relateToLevel to true, the handle will be associated to the building handle.
</remarks>
            <param name="spaceHandle">
   The IfcSpace handle.
</param>
            <param name="pLevelInfo">
   Information on the associated level.
</param>
            <param name="pParams">
   The extrusion creation data associated with the given space.  Optional, can be <see langword="null" />.
</param>
            <param name="relateToLevel">
   True to relate the space to the level, false otherwise.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCProductWrapper.FindExtrusionCreationParameters(Autodesk.Revit.DB.IFC.IFCAnyHandle)">
            <summary>
   Obtains the extrusion creation data associated with the given element.
</summary>
            <param name="elementHandle">
   The handle.
</param>
            <returns>
   The parameters. <see langword="null" /> if no parameters are associated with the element.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCProductWrapper.GetAnElement">
            <summary>
   Gets the first element handle added to this wrapper.
</summary>
            <returns>
   The handle.
</returns>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCProductWrapper.GetAllObjects">
            <summary>
   Gets all objects associated with the IfcProduct in this wrapper.
</summary>
            <returns>
   The collection of objects.
</returns>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCProductWrapper.Create(Autodesk.Revit.DB.IFC.IFCProductWrapper,System.Boolean)">
            <summary>
   Establishes a new product manager for elements and objects derived from a parent product manager, allowing override of allowRelateToLevel
</summary>
            <param name="pProductWrapper">
   The parent product manager.
</param>
            <param name="allowRelateToLevel">
   True to allow associated elements and objects to relate to a level, false to never allow such a
   relationship.
</param>
            <returns>
   The new product manager.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCProductWrapper.Create(Autodesk.Revit.DB.IFC.IFCProductWrapper)">
            <summary>
   Establishes a new product manager for elements and objects derived from a parent product manager.
</summary>
            <param name="pProductWrapper">
   The parent product manager.
</param>
            <returns>
   The new product manager.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCProductWrapper.Create(Autodesk.Revit.DB.IFC.ExporterIFC,System.Boolean)">
            <summary>
   Establishes a new baseline product manager for elements and objects.
</summary>
            <remarks>
   Elements and objects associated to this product manager will be associated to a top-level IfcProduct based on the world coordinate
   system of the output file.
</remarks>
            <param name="ExporterIFC">
   The exporter.
</param>
            <param name="allowRelateToLevel">
   True to allow associated elements and objects to relate to a level, false to never allow such a
   relationship.
</param>
            <returns>
   The new baseline product manager.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCProductWrapper.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCProductWrapper.Count">
            <summary>
   The number of objects associated with the IfcProduct in this wrapper.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCProductWrapper">
            <summary>
   This class is used to ensure that elements and objects are associated with the current IfcProduct.
</summary>
            <remarks>
   Each instance makes sure that any elements and products created during its lifetime are properly associated to their parent level (or other containing object).
   To ensure that the lifetime of the object is correctly managed, you should declare an instance of this class as a part of a 'using' statement in C# or
   similar construct in other lanuguages.
</remarks>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCTransformSetter.Initialize(Autodesk.Revit.DB.IFC.ExporterIFC,Autodesk.Revit.DB.Transform)">
            <summary>
   Initializes the transformation in the transform setter.
</summary>
            <param name="exporterIFC">
   The exporter.
</param>
            <param name="transform">
   The transform.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCTransformSetter.InitializeFromBoundingBox(Autodesk.Revit.DB.IFC.ExporterIFC,System.Collections.Generic.IList`1{Autodesk.Revit.DB.GeometryObject},Autodesk.Revit.DB.IFC.IFCExtrusionCreationData)">
            <summary>
   Initializes the transformation in the transform setter.
</summary>
            <param name="exporterIFC">
   The exporter.
</param>
            <param name="geometryList">
   The set of geometry used to determine the bounding box.
</param>
            <param name="exportBodyParams">
   The extrusion creation data which contains the local placement.
</param>
            <returns>
   The transform corresponding to the movement, if any.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCTransformSetter.Create">
            <summary>
   Creates a new instance of a transform setter.
</summary>
            <returns>
   The new transform setter.
</returns>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCTransformSetter.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCTransformSetter">
            <summary>
   A state-based class that forces an extra transformation applied to objects being exported.
</summary>
            <remarks>
   IFC has a system of local placements; these are created from a set of transforms in Revit.
   Sometimes there is a need to create a 'fake' transform to get the right local placement structure for IFC.
   This class is intended to maintain the transformation for the duration that it is needed.
   To ensure that the lifetime of the object is correctly managed, you should declare an instance
   of this class as a part of a 'using' statement in C# or
   similar construct in other lanuguages.
</remarks>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCRange.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCRange.End">
            <summary>
   The ending value of the range.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCRange.Start">
            <summary>
   The starting value of the range.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCRange.#ctor(Autodesk.Revit.DB.IFC.IFCRange)">
            <summary>
   Instantiates an IFCRange object by copy.
</summary>
            <param name="from">
   The IFCRange object.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCRange.#ctor(System.Double,System.Double)">
            <summary>
   Instantiates an IFCRange object.
</summary>
            <param name="start">
   The starting value of the range.
</param>
            <param name="end">
   The ending value of the range.
</param>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCRange.#ctor">
            <summary>
   Instantiates a default IFCRange object.
</summary>
            <remarks>
   The starting and ending value are both set to zero.
</remarks>
            <since>
   2013
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCRange">
            <summary>
   Typically for IFC export, this represents the lower and upper elevations for split wall and column geometry.
</summary>
            <remarks>
   It contains two double values representing the starting and ending values as a range.
</remarks>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.GetLayerNameForPresentationLayer(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.ElementId)">
            <summary>
   Get the layer name associated with an element from the default layer mapping table.
</summary>
            <param name="pElement">
   The element.
</param>
            <param name="categoryId">
   The category id of the element.
</param>
            <returns>
   The layer name.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2022
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.GetPresentationLayerAssignments">
            <summary>
   Get the list of the internally IfcPresentationLayerAssignments and their respective shape representations.
</summary>
            <returns>
   The map.
</returns>
            <since>
   2022
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.GetOrCreateFillPattern(Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.Color,System.Double)">
            <summary>
   Get (or create) the IfcFillPatternStyle associated with an ElementId.
</summary>
            <param name="fillPatternId">
   The fill pattern id.
</param>
            <param name="color">
   The pattern color.
</param>
            <param name="planScale">
   The view scale.
</param>
            <returns>
   The IfcSurfaceStyle.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.GetRelatedElements">
            <summary>
   Gets all elements not associated to stories.
</summary>
            <returns>
   The collection of elements.
</returns>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.GetRelatedProducts">
            <summary>
   Gets all products not associated to stories.
</summary>
            <returns>
   The collection of products.
</returns>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.RemoveBuildingStorey(Autodesk.Revit.DB.ElementId)">
            <summary>
   Removes an IFCLevelInfo corresponding to a level from the exporter's internal cache.
</summary>
            <param name="id">
   The level id.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.AddBuildingStorey(Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.IFC.IFCLevelInfo)">
            <summary>
   Adds building storey to the exporter's internal cache.
</summary>
            <param name="id">
   The level id.
</param>
            <param name="levelInfo">
   The IFCLevelInfo object.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.SetMaterialIdForCurrentExportState(Autodesk.Revit.DB.ElementId)">
            <summary>
   This sets the material id that is to be associated with the element in the current export state.
</summary>
            <remarks>
   Even though there could be several materials associated with the element (set during PushExportState()),
   unless the element has support for IfcMaterialLayerSet, IFC output will include only this one.
</remarks>
            <param name="elementId">
   The material id.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.GetMaterialIdForCurrentExportState">
            <summary>
   This gets the material id that is associated with the element in the current export state.
</summary>
            <remarks>
   Even though there could be several materials associated with the element (set during PushExportState()),
   unless the element has support for IfcMaterialLayerSet, IFC output will include only this one.
</remarks>
            <returns>
   The material id.
</returns>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.GetFamilyName">
            <summary>
   Gets the name of the element assigned to the current export state.
</summary>
            <remarks>
   The family name is prepared for use in IFC output during the call to PushExportState().
</remarks>
            <returns>
   The family name.
</returns>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.PopExportState">
            <summary>
   Resets the internal state of the exporter to process the previously active input element (if any), or
   the default state if the stack is empty.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.PushExportState(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.GeometryElement)">
            <summary>
   Sets the internal state of the exporter to process the geometry and properties of the input element.
</summary>
            <remarks>
   The element will be assigned until PopExportState() is called.
</remarks>
            <param name="Elem">
   The element.
</param>
            <param name="GRep">
   The geometry of the element.  Optional, can be <see langword="null" />.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.RegisterShapeForPresentationLayer(Autodesk.Revit.DB.Element,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.IFC.IFCAnyHandle)">
            <summary>
   Sets an IfcShapeRepresentation to be used for the IfcPresentationLayerAssignment associated with
   the given Revit category and element.
</summary>
            <param name="pElement">
   The element.
</param>
            <param name="categoryId">
   The category id.
</param>
            <param name="newShapeRepresentation">
   The IfcShapeRepresentation handle.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.GetDoorWindowOpeningHandle(Autodesk.Revit.DB.ElementId)">
            <summary>
   Get the handle to the opening associated with a hosted (door/window) element from the internal cache.
</summary>
            <param name="familyInstanceId">
   The id of the door or window.
</param>
            <returns>
   The opening handle.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.RegisterDoorWindowForUncreatedOpening(Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.IFC.IFCAnyHandle)">
            <summary>
   Registers a door or window in the ExporterIFC's internal cache.  The ids registered correspond to
   openings in walls which have not been processed and created yet.
</summary>
            <param name="familyInstanceId">
   The id of the door or window.
</param>
            <param name="instanceHandle">
   The handle to the IfcDoor or IfcWindow created for this instance.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.Set3DContextHandle(Autodesk.Revit.DB.IFC.IFCAnyHandle,System.String)">
            <summary>
   Sets the IfcRepresentationContext or IfcRepresentationSubContext handle to be used for 3D entities (Model entities).
</summary>
            <param name="contextHandle">
   The IfcRepresentationContext for 3D entities.
</param>
            <param name="subContextName">
   The name of the IfcRepresentationSubContext, or the IfcRepresentationContext if the string is empty, for 3D entities.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.Get3DContextHandle(System.String)">
            <summary>
   Obtains the IfcRepresentationContext or IfcRepresentationSubContext handle to be used for 3D entities (Model entities).
</summary>
            <remarks>
   The context handle automatically incorporates the angle to true north for the document.
</remarks>
            <param name="subContextName">
   The name of the IfcRepresentationSubContext, or the IfcRepresentationContext if the string is empty, for 3D entities.
</param>
            <returns>
   The IfcRepresentationContext for 3D entities.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.Set2DContextHandle(Autodesk.Revit.DB.IFC.IFCAnyHandle)">
            <summary>
   Sets the IfcRepresentationContext handle to be used for 2D entities (Annotations).
</summary>
            <param name="contextHandle">
   The IfcRepresentationContext.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.Get2DContextHandle">
            <summary>
   Obtains the IfcRepresentationContext handle to be used for 2D entities (Annotations).
</summary>
            <remarks>
   The context handle is automatically applied with a 1:100 scale.
</remarks>
            <returns>
   The IfcRepresentationContext.
</returns>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.ClearFaceWithElementHandleMap">
            <summary>
   Clear face with element handle map.
</summary>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.RegisterFaceWithElementHandle(Autodesk.Revit.DB.Face,Autodesk.Revit.DB.IFC.IFCAnyHandle)">
            <summary>
   Register face with element handle to make sure the openings created are related to the right element.
</summary>
            <param name="face">
   The face.
</param>
            <param name="elemHandle">
   The element handle.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.GetLevelInfos">
            <summary>
   Returns a collection containing the information about all levels in the document.
</summary>
            <remarks>
   Level information is currently automatically collected and cached in the ExporterIFC
   object.  This method returns the cached information which is often needed during export
   of particular building elements which reference levels, as well as to implement automatic
   wall and column splitting.
</remarks>
            <returns>
   The collection of level information.
</returns>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.GetLevelInfo(Autodesk.Revit.DB.ElementId)">
            <summary>
   Returns an object representing the information about a level in the document.
</summary>
            <remarks>
   Level information is currently automatically collected and cached in the ExporterIFC
   object.  This method returns the cached information for a given level,
   which is often needed during export of particular building elements which reference levels, as well
   as to implement automatic wall and column splitting.
</remarks>
            <param name="levelId">
   The level id.
</param>
            <returns>
   The level information.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.GetHostObjects">
            <summary>
   Returns a collection containing the host object handles in the document.
</summary>
            <remarks>
   Host object handles is currently collected by RegisterSpaceBoundingElementHandle
   and exporting internal element and cached in the ExporterIFC object.
   This method returns the cached information which is needed to create wall connectivity objects.
</remarks>
            <returns>
   The collection of host objects.
</returns>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.FindSpaceBoundingElementHandle(Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.ElementId)">
            <summary>
   Looks up the handle associated to the element and level id from the ExporterIFC's internal cache.
</summary>
            <param name="id">
   The Revit element id to look for.
</param>
            <param name="levelId">
   The element level id.
</param>
            <returns>
   The handle associated to the element and level id.  If the id is not found in the cache, an empty handle
   is returned (HasValue == false).
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.RegisterSpaceBoundingElementHandle(Autodesk.Revit.DB.IFC.IFCAnyHandle,Autodesk.Revit.DB.ElementId,Autodesk.Revit.DB.ElementId)">
            <summary>
   Stores a handle representing a space bounding element to the ExporterIFC's internal cache.
</summary>
            <remarks>
   The cache of space bounding elements will be used during completion of export to create
   relationship objects such as IfcRelSpaceBoundary and IfcRelConnectsPathElements.
   The types of Revit elements accepted by this function are:
   <list type="bullet"><item>Walls</item><item>Curtain walls</item><item>Roofs</item><item>Floors</item><item>Doors</item><item>Windows</item></list></remarks>
            <param name="instanceHandle">
   The handle to the space bounding element.
</param>
            <param name="id">
   The Revit element id associated to this handle.
</param>
            <param name="levelId">
   The level id assigned to the space bounding object.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.GetOptions">
            <summary>
   Gets the collection of named options set by the exporter client.
</summary>
            <returns>
   The collection of named options.
</returns>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.SetOwnerHistoryHandle(Autodesk.Revit.DB.IFC.IFCAnyHandle)">
            <summary>
   Sets the handle to the IfcOwnerHistory for the file.
</summary>
            <param name="ownerHistory">
   The handle.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.SetFile(Autodesk.Revit.DB.IFC.IFCFile)">
            <summary>
   Sets the handle to the IFC file being created during this export operation.
</summary>
            <param name="file">
   The handle to the file.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.PopTransform">
            <summary>
   Resets the internal transform of the exporter to process the previously active input element (if any), or
   the default transform if the stack is empty.
</summary>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.PushTransform(Autodesk.Revit.DB.Transform)">
            <summary>
   Sets the internal transform of the exporter to process the geometry and properties of the input element.
</summary>
            <param name="trf">
   The transform.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.ExporterIFC.GetFile">
            <summary>
   Gets the handle to the IFC file being created during this export operation.
</summary>
            <returns>
   The handle to the file.
</returns>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.ExporterIFC.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.ExporterIFC.WallAndColumnSplitting">
            <summary>
   Identifies if division of multi-level walls and columns by levels should take place during this export.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.ExporterIFC.SpaceBoundaryLevel">
            <summary>
   Identifies the level of space boundaries being exported.
</summary>
            <remarks>
   There are three valid values for this integer:
   0 = export no space boundaries.  This can save space if the receiving application doesn't use them.
   1 = export 1st level space boundaries.  This is the default.
   2 = export 2nd level space boundaries.  This is primarily for use in energy analysis programs, and the GSA.
</remarks>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.ExporterIFC.ExportBaseQuantities">
            <summary>
   Identifies if the export should include IFC standard quantities currently supported by Revit.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.ExporterIFC.FileVersion">
            <summary>
   Identifies the file version being exported.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.ExporterIFC.ExportAs2x3">
            <summary>
   Identifies if the file version being exported is 2x3.
</summary>
            <remarks>
   Returns true even for alternative formats equivalent to 2x3, such as COBIE.
</remarks>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.ExporterIFC.ExportAs2x2">
            <summary>
   Identifies if the file version being exported is 2x2.
</summary>
            <remarks>
   Returns true even for alternative formats equivalent to 2x2, such as BCA.
</remarks>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.ExporterIFC.FileName">
            <summary>
   The name of the IFC file being exported.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.ExporterIFC">
            <summary>
   The main class provided by Revit to allow implementation of IFC export.
</summary>
            <remarks>
   An instance of this class is provided to clients which implement IExporterIFC
   in order to provide an implementation for IFC export.  It contains information
   on the options selected by the user for the export operation, as well as
   members used to access specific types of data needed to implement the export
   properly.
</remarks>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCConnectedWallData.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCConnectedWallData.Location">
            <summary>
   The location for the join.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCConnectedWallData.ElementId">
            <summary>
   The element id to which this element is joined.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCConnectedWallData">
            <summary>
   A class that contains the IFC-specific information about how an element is joined to another element.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCLevelInfo.GetLocalPlacement">
            <summary>
   Gets the local placement.
</summary>
            <returns>
   The local placement.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCLevelInfo.GetRelatedElements">
            <summary>
   Gets all building elements on this level.
</summary>
            <returns>
   The collection of elements.
</returns>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCLevelInfo.GetRelatedProducts">
            <summary>
   Gets all building products on this level.
</summary>
            <returns>
   The collection of products.
</returns>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCLevelInfo.GetBuildingStorey">
            <summary>
   Gets the IfcBuildingStorey handle.
</summary>
            <returns>
   The handle.
</returns>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCLevelInfo.Create(Autodesk.Revit.DB.IFC.IFCAnyHandle,Autodesk.Revit.DB.IFC.IFCAnyHandle,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
   Creates an IFCLevelInfo.
</summary>
            <param name="buildingStorey">
   The building storey handle (IfcBuildingStorey).
</param>
            <param name="localPlacement">
   The local placement handle (IfcLocalPlacement).
</param>
            <param name="height">
   The height of the level.
</param>
            <param name="elevation">
   The elevation of the level.
</param>
            <param name="scaleFactor">
   The scale factor.
</param>
            <param name="isPrimaryLevel">
   True if this is primary level, false otherwise.
</param>
            <returns>
   The IFCLevelInfo object.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCLevelInfo.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCLevelInfo.Elevation">
            <summary>
   The elevation of the level.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCLevelInfo.DistanceToNextLevel">
            <summary>
   The distance to the next story level.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCLevelInfo">
            <summary>
   Represents information about a particular level in the document.
</summary>
            <remarks>
   Level information includes the height, which is the distance to from this level
   to the next available level, and the actual elevation of the level, in the Revit default units.
</remarks>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCExtrusionCreationData.ClearOpenings">
            <summary>
   Removes all cached openings from the data.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCExtrusionCreationData.AddOpening(Autodesk.Revit.DB.IFC.IFCExtrusionData)">
            <summary>
   Adds an opening to the data.
</summary>
            <remarks>
   The opening is stored for retrieval later via GetOpenings().
</remarks>
            <param name="data">
   The opening.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCExtrusionCreationData.GetOpenings">
            <summary>
   Gets a collection of all of the openings stored in this data.
</summary>
            <remarks>
   Contains all of the openings stored via AddOpening().
</remarks>
            <returns>
   The opening information.
</returns>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCExtrusionCreationData.GetLocalPlacement">
            <summary>
   Gets the reference to the IfcLocalPlacement handle used when creating the extrusion.
</summary>
            <returns>
   The IfcLocalPlacement handle.
</returns>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCExtrusionCreationData.SetLocalPlacement(Autodesk.Revit.DB.IFC.IFCAnyHandle)">
            <summary>
   Sets the data to reference an IfcLocalPlacement handle when creating the extrusion.
   Side effect: will set ReuseLocalPlacement to true.
</summary>
            <param name="localPlacement">
   The IfcLocalPlacement handle.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionCreationData.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionCreationData.AreInnerRegionsOpenings">
            <summary>
   True if inner regions of the extrusion should become openings, false otherwise.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionCreationData.ExtrusionDirection">
            <summary>
   The extrusion direction to generate an extrusion.
</summary>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   When setting this property: A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionCreationData.CustomAxis">
            <summary>
   The custom extrusion axis to try when generating an extrusion.
</summary>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   When setting this property: A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionCreationData.HasExtrusionDirection">
            <summary>
   Identifies if the data contains a extrusion direction.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionCreationData.HasCustomAxis">
            <summary>
   Identifies if the data contains a custom extrusion axis.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionCreationData.PossibleExtrusionAxes">
            <summary>
   The axes to try when generating the properties of the extrusion.
</summary>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentOutOfRangeException">
   When setting this property: A value passed for an enumeration argument is not a member of that enumeration
</exception>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionCreationData.ReuseLocalPlacement">
            <summary>
   Allows re-use of local placement when creating a new local placement
   due to shifting of breps when moving towards the origin.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionCreationData.AllowVerticalOffsetOfBReps">
            <summary>
   Allows vertical shifting of breps when moving towards the origin.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionCreationData.ScaledOuterPerimeter">
            <summary>
   The outer perimeter of the extrusion, scaled to the units of export.
</summary>
            <value>
   This value represents the perimeter of the outermost curve loop bounding the area of the extrusion.
   Zero if the perimeter has never been set on this object.
</value>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionCreationData.ScaledInnerPerimeter">
            <summary>
   The inner perimeter of the extrusion, scaled to the units of export.
</summary>
            <value>
   This value represents the perimeter of all of the inner curve loops within the area of the extrusion.
   Zero if the perimeter has never been set on this object.
</value>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionCreationData.ScaledWidth">
            <summary>
   The width of the extrusion, scaled to the units of export.
</summary>
            <value>
   Zero if the width has never been set on this object.
</value>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionCreationData.Slope">
            <summary>
   The slope of the extrusion, in degrees.
</summary>
            <value>
   Zero if the slope has never been set on this object.
</value>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionCreationData.ScaledLength">
            <summary>
   The length of the extrusion, scaled to the units of export.
</summary>
            <value>
   Zero if the length has never been set on this object.
</value>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionCreationData.ScaledHeight">
            <summary>
   The height of the extrusion, scaled to the units of export.
</summary>
            <value>
   Zero if the height has never been set on this object.
</value>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionCreationData.ScaledArea">
            <summary>
   The area of the extrusion, scaled to the units of export.
</summary>
            <value>
   The value will be 0.0 if the area has never been set on this object.
</value>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionCreationData.ForceOffset">
            <summary>
   True to create new local placement with identity transform.
</summary>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCExtrusionCreationData.#ctor">
            <summary>
   The default constructor.
</summary>
            <remarks>
   All input data will be considered uninitialized.
</remarks>
            <since>
   2012
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCExtrusionCreationData">
            <summary>
   A utility object that is used to pass information related to extrusion creation.
</summary>
            <remarks>
   This class accepts input used to attempt to create an extrusion (possibly with openings) from Revit geometry.
   The output contains information about the created extrusion and its openings. The information set is used to
   generate properties for the extruded body and related opening elements in the IFC file.
</remarks>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCExtrusionCalculatorUtils.CalculateExtrusionData(Autodesk.Revit.DB.IFC.IFCExtrusionCalculatorOptions,System.Collections.Generic.IList`1{Autodesk.Revit.DB.Face})">
            <summary>
   Calculates the extrusion data from a collection of Revit geometry faces.
</summary>
            <param name="extrInfo">
   The options for extrusion extraction.
</param>
            <param name="allInputFaces">
   The collection of faces.
</param>
            <returns>
   A collection of extrusion data calculated for the geometry.
   If the function fails to calculate one or more valid extrusions,
   this collection will be empty.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCExtrusionCalculatorUtils.CalculateExtrusionData(Autodesk.Revit.DB.IFC.IFCExtrusionCalculatorOptions,Autodesk.Revit.DB.GeometryObject)">
            <summary>
   Calculates the extrusion data from a Revit geometry object.
</summary>
            <param name="extrusionOptions">
   The options for extrusion extraction.
</param>
            <param name="geometryObject">
   The geometry object.
</param>
            <returns>
   A collection of extrusion data calculated for the geometry.
   If the function fails to calculate one or more valid extrusions,
   this collection will be empty.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCExtrusionCalculatorUtils">
            <summary>
   A utility class used to calculate extrusion data from Revit geometry for IFC export.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionCalculatorOptions.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionCalculatorOptions.Scale">
            <summary>
   The scaling factor for length measurements from the default Revit units to the export units.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionCalculatorOptions.CustomAxis">
            <summary>
   The custom axis to try (if extrusionAxes includes an option for a custom direction).
</summary>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   When setting this property: A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionCalculatorOptions.ExtrusionAxes">
            <summary>
   The extrusion axes to try when doing the calculation.
</summary>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentOutOfRangeException">
   When setting this property: A value passed for an enumeration argument is not a member of that enumeration
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCExtrusionCalculatorOptions.#ctor(Autodesk.Revit.DB.IFC.ExporterIFC,Autodesk.Revit.DB.IFC.IFCExtrusionAxes,Autodesk.Revit.DB.XYZ,System.Double)">
            <summary>
   Constructs a new instance of a class used to calculate extrusions from Revit geometry.
</summary>
            <param name="exporterIFC">
   The exporter.
</param>
            <param name="extrusionAxes">
   The extrusion axes to try when doing the calculation.
</param>
            <param name="customAxis">
   The custom axis to try (if extrusionAxes includes an option for a custom direction).
</param>
            <param name="scale">
   The scaling factor for length measurements from the default Revit units to the export units.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentOutOfRangeException">
   A value passed for an enumeration argument is not a member of that enumeration
</exception>
            <since>
   2012
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCExtrusionCalculatorOptions">
            <summary>
   This class contains the options used to calculate extrusions from Revit geometry.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCExtrusionData.GetLoops">
            <summary>
   Gets the curve loops that form the base shape of the extrusion.
</summary>
            <returns>
   The collection of loops.
</returns>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCExtrusionData.ClearLoops">
            <summary>
   Clears the curve loops stored in the extrusion data.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCExtrusionData.RemoveLoopAt(System.Int32)">
            <summary>
   Removes the loop at the specified index.
</summary>
            <param name="index">
   The zero-based index of the loop to remove.
</param>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCExtrusionData.AddLoop(Autodesk.Revit.DB.CurveLoop)">
            <summary>
   Adds a curve loop to the extrusion data.
</summary>
            <param name="pLoop">
   The curve loop.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCExtrusionData.IsValid">
            <summary>
   Determines if the extrusion data represents a valid extrusion.
</summary>
            <returns>
   True if the extrusion is valid, false otherwise.
</returns>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionData.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionData.ExtrusionDirection">
            <summary>
   The direction used for the extrusion.
</summary>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   When setting this property: A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionData.ExtrusionBasis">
            <summary>
   The basis used for the extrusion.
</summary>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentOutOfRangeException">
   When setting this property: A value passed for an enumeration argument is not a member of that enumeration
</exception>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCExtrusionData.ScaledExtrusionLength">
            <summary>
   The length of the extrusion, scaled in the units of the export.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCExtrusionData.#ctor">
            <summary>
   Constructs a new empty extrusion data object.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCExtrusionData">
            <summary>
   Represents the geometry of an extrusion (a solid body or opening) generated
   from Revit geometry.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCExtrusionBasis">
            <summary>
   This enumerated type represents the possible bases for derivation of extrusion geometry.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCExtrusionBasis.BasisZ">
            <summary>
   The Z direction.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCExtrusionBasis.BasisY">
            <summary>
   The Y direction.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCExtrusionBasis.BasisX">
            <summary>
   The X direction.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCExtrusionBasis.InvalidBasis">
            <summary>
   An invalid basis (typically indicating that the extrusion extraction was unsuccessful).
</summary>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCExtrusionAxes">
            <summary>
   Represents the possible axes to try when generating an extrusion using IFCCreateExtrusionData.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCExtrusionAxes.TryXYZAndCustom">
            <summary>
   The x-, y-, and z-axes, and a custom direction.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCExtrusionAxes.TryCustom">
            <summary>
   A custom direction.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCExtrusionAxes.TryXYZ">
            <summary>
   The x-, y-, and z-axes.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCExtrusionAxes.TryYZ">
            <summary>
   The y- and z-axes.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCExtrusionAxes.TryXZ">
            <summary>
   The x- and z-axes.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCExtrusionAxes.TryZ">
            <summary>
   The z-axis.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCExtrusionAxes.TryXY">
            <summary>
   The x- and y-axes.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCExtrusionAxes.TryY">
            <summary>
   The y-axis.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCExtrusionAxes.TryX">
            <summary>
   The x-axis.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCExtrusionAxes.TryDefault">
            <summary>
   The default value.
</summary>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCTransaction.RollBack">
            <summary>
   Rolls back all changes made to the IFC file during the transaction.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCTransaction.Commit">
            <summary>
   Commits all changes made to the IFC file during the transaction.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCTransaction.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCTransaction.#ctor(Autodesk.Revit.DB.IFC.IFCFile)">
            <summary>
   Instantiates a transaction object.
</summary>
            <remarks>
   The transaction starts by creating a transaction object.
</remarks>
            <param name="file">
   The IFC file for which this transaction is going to be used.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2012
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCTransaction">
            <summary>
   IFC transactions are context-like objects that guard any changes made to an IFC file.
</summary>
            <remarks>
   Any change to an IFC file can only be made while there is an active transaction
   open for that file. Changes do not become a part of the file until the
   active transaction is <see cref="M:Autodesk.Revit.DB.IFC.IFCTransaction.Commit">committed</see>. Consequently, all
   changes made in a transaction can be <see cref="M:Autodesk.Revit.DB.IFC.IFCTransaction.RollBack">rolled back</see>
   either explicitly or implicitly (by the destructor).
</remarks>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCFile.IsValidFile">
            <summary>
   True if ODA filePtr is valid.
</summary>
            <since>
   2020
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCFile.CreateStyle(Autodesk.Revit.DB.IFC.ExporterIFC,Autodesk.Revit.DB.IFC.IFCAnyHandle,Autodesk.Revit.DB.Color,Autodesk.Revit.DB.ElementId)">
            <summary>
   Creates and populates an IfcStyledItem for an IfcRepresentationItem with a IfcSurfaceStyle, IfcCurveStyle, and/or an IfcFillStyle,
   and assigns them to the file.
</summary>
            <param name="exporterIFC">
   The exporter.
</param>
            <param name="repItem">
   The representation item.
</param>
            <param name="color">
   The color.
</param>
            <param name="fillPatternId">
   The fill pattern id.
</param>
            <returns>
   The handle.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
   A transaction is required for this operation.
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCFile.CreateStyle(Autodesk.Revit.DB.IFC.ExporterIFC,Autodesk.Revit.DB.IFC.IFCAnyHandle)">
            <summary>
   Creates and populates an IfcStyledItem for an IfcRepresentationItem with a IfcSurfaceStyle, IfcCurveStyle, and/or an IfcFillStyle,
   and assigns them to the file.
</summary>
            <param name="exporterIFC">
   The exporter.
</param>
            <param name="repItem">
   The representation item.
</param>
            <returns>
   The handle.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
   A transaction is required for this operation.
</exception>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCFile.GetInstanceCount(System.String,System.Boolean)">
            <summary>
   Counts IFC instances of one particular type.
</summary>
            <param name="entityName">
   The name of the instance type.
</param>
            <param name="includeSubTypes">
   True to count instances of sub types.
</param>
            <returns>
   The count.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCFile.GetInstances(System.String,System.Boolean)">
            <summary>
   Gets IFC instances of one particular type.
</summary>
            <param name="entityName">
   The name of the instance type.
</param>
            <param name="includeSubTypes">
   True to retrieve instances of sub types.
</param>
            <returns>
   The instance handles.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCFile.CreateHeaderInstance(System.String)">
            <summary>
   Creates an IFC header instance in the file model.
</summary>
            <remarks>
   file_schema, file_description and file_name
   must be created to get IFC file written successfully.
   Otherwise, the output IFC file would be empty.
</remarks>
            <param name="name">
   The instance name.
</param>
            <returns>
   The instance handle.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCFile.CreateInstance(System.String)">
            <summary>
   Creates an IFC instance in the file model.
</summary>
            <param name="name">
   The instance name.
</param>
            <returns>
   The instance handle.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCFile.Close">
            <summary>
   Close the IFC file.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCFile.Read(Autodesk.Revit.DB.IFC.IFCFileReadOptions,System.Int32@,System.Int32@)">
            <summary>
   Reads content from a file of IFC format.
</summary>
            <param name="readOptions">
   The IFC file read options.
</param>
            <param name="pNumErrors">
   The number of errors reported during the read process.  The actual messages will be in the log file.
</param>
            <param name="pNumWarnings">
   The number of warnings reported during the read process.  The actual messages will be in the log file.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
   Error reading opening model for unzipping.
   Error reading IFC file.
</exception>
            <since>
   2015
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCFile.Read(Autodesk.Revit.DB.IFC.IFCFileReadOptions)">
            <summary>
   Reads content from a file of IFC format.
</summary>
            <param name="readOptions">
   The IFC file read options.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCFile.Write(Autodesk.Revit.DB.IFC.IFCFileWriteOptions)">
            <summary>
   Writes content to a file of IFC format.
</summary>
            <param name="writeOptions">
   The IFC file write options.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCFile.Create(Autodesk.Revit.DB.IFC.IFCFileModelOptions)">
            <summary>
   Creates an IFC file for exporting.
</summary>
            <param name="modelOptions">
   The options.
</param>
            <returns>
   The IFC file.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCFile.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCFile">
            <summary>
   Represents the IFC file which is being created during export.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCFileReadOptions.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCFileReadOptions.XMLConfigFileName">
            <summary>
   The XML configuration file name. It is used only for reading IFC-XML format file.
</summary>
            <remarks>
   It uses default configuration if it is not set.
</remarks>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   When setting this property: A non-optional argument was null
</exception>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCFileReadOptions.FileName">
            <summary>
   The full file name of the IFC file to be read.
</summary>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   When setting this property: A non-optional argument was null
</exception>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCFileReadOptions.#ctor">
            <summary>
   Creates a default IFCFileReadOptions.
</summary>
            <since>
   2014
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCFileReadOptions">
            <summary>
   This class contains options to read an IFC file.
</summary>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCFileWriteOptions.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCFileWriteOptions.XMLConfigFileName">
            <summary>
   The XML configuration file name. It is used only for writing IFC-XML format file.
</summary>
            <remarks>
   It uses default configuration if it is not set.
</remarks>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   When setting this property: A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCFileWriteOptions.FileFormat">
            <summary>
   The file format of the IFC file.
</summary>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentOutOfRangeException">
   When setting this property: A value passed for an enumeration argument is not a member of that enumeration
</exception>
            <since>
   2013
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCFileWriteOptions.FileName">
            <summary>
   The full file name of the IFC file to be written.
</summary>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   When setting this property: A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCFileWriteOptions.#ctor">
            <summary>
   Creates a default IFCFileWriteOptions. The default file format is ifc.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCFileWriteOptions">
            <summary>
   This class contains options to write an IFC file.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCFileModelOptions.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCFileModelOptions.UserControlledInverses">
            <summary>
   Indicates if the inverses are controlled by Revit or users. True by users, false by Revit.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCFileModelOptions.CacheSize">
            <summary>
   The cache size of the file.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCFileModelOptions.SchemaName">
            <summary>
   The name of the schema.
</summary>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   When setting this property: A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCFileModelOptions.SchemaFile">
            <summary>
   The full name of an IFC schema file.
</summary>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   When setting this property: A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCFileModelOptions.#ctor">
            <summary>
   Creates a default IFCFileModelOptions. The default schema file is empty and cache size is 8192.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCFileModelOptions">
            <summary>
   This class contains options to create an IFC file model.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCFileFormat">
            <summary>
   The IFC file format.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCFileFormat.IfcXMLZIP">
            <summary>
   IFC-XML file, zipped to IFC-ZIP format.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCFileFormat.IfcZIP">
            <summary>
   IFC file, zipped to IFC-ZIP format.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCFileFormat.IfcXML">
            <summary>
   IFC-XML format.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCFileFormat.Ifc">
            <summary>
   IFC format.
</summary>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.IsSubTypeOf(System.String)">
            <summary>
   Determines whether the instance is an instance of the specified instance type or a subtype of this instance type.
</summary>
            <param name="typeName">
   The instance type name.
</param>
            <returns>
   True if the instance is an instance of the specified instance type or its subtype, false otherwise.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.IsTypeOf(System.String)">
            <summary>
   Determines whether the instance is an instance of exactly the specified instance type.
</summary>
            <param name="typeName">
   The instance type name.
</param>
            <returns>
   True if the instance is an instance of the specified instance type, false otherwise.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.UnsetAttribute(System.String)">
            <summary>
   Unsets the attribute value.
</summary>
            <param name="name">
   The attribute name.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String,System.Collections.Generic.ISet`1{System.Boolean})">
            <summary>
   Sets the attribute value.
</summary>
            <param name="name">
   The attribute name.
</param>
            <param name="values">
   The values.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2015
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String,System.Collections.Generic.ISet`1{System.Int32})">
            <summary>
   Sets the attribute value.
</summary>
            <param name="name">
   The attribute name.
</param>
            <param name="values">
   The values.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2015
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String,System.Collections.Generic.ISet`1{System.Double})">
            <summary>
   Sets the attribute value.
</summary>
            <param name="name">
   The attribute name.
</param>
            <param name="values">
   The values.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2015
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String,System.Collections.Generic.ISet`1{System.String})">
            <summary>
   Sets the attribute value.
</summary>
            <param name="name">
   The attribute name.
</param>
            <param name="values">
   The values.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2015
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String,System.Collections.Generic.ISet`1{Autodesk.Revit.DB.IFC.IFCAnyHandle})">
            <summary>
   Sets the attribute value.
</summary>
            <param name="name">
   The attribute name.
</param>
            <param name="values">
   The values.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2015
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String,System.Collections.Generic.IList`1{System.Boolean})">
            <summary>
   Sets the attribute value.
</summary>
            <param name="name">
   The attribute name.
</param>
            <param name="values">
   The values.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2015
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String,System.Collections.Generic.IList`1{System.Int32})">
            <summary>
   Sets the attribute value.
</summary>
            <param name="name">
   The attribute name.
</param>
            <param name="values">
   The values.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2015
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String,System.Collections.Generic.IList`1{System.Double})">
            <summary>
   Sets the attribute value.
</summary>
            <param name="name">
   The attribute name.
</param>
            <param name="values">
   The values.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2015
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String,System.Collections.Generic.IList`1{System.String})">
            <summary>
   Sets the attribute value.
</summary>
            <param name="name">
   The attribute name.
</param>
            <param name="values">
   The values.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2015
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String,System.Collections.Generic.IList`1{Autodesk.Revit.DB.IFC.IFCAnyHandle})">
            <summary>
   Sets the attribute value.
</summary>
            <param name="name">
   The attribute name.
</param>
            <param name="values">
   The values.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2015
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String,Autodesk.Revit.DB.IFC.IFCAnyHandle)">
            <summary>
   Sets the attribute value.
</summary>
            <param name="name">
   The attribute name.
</param>
            <param name="value">
   The value.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String,System.Boolean)">
            <summary>
   Sets the attribute value.
</summary>
            <param name="name">
   The attribute name.
</param>
            <param name="value">
   The value.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String,System.Double)">
            <summary>
   Sets the attribute value.
</summary>
            <param name="name">
   The attribute name.
</param>
            <param name="value">
   The value.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String,System.Int32)">
            <summary>
   Sets the attribute value.
</summary>
            <param name="name">
   The attribute name.
</param>
            <param name="value">
   The value.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String,System.String)">
            <summary>
   Sets the attribute value.
</summary>
            <param name="name">
   The attribute name.
</param>
            <param name="value">
   The value.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String,Autodesk.Revit.DB.IFC.IFCData)">
            <summary>
   Sets the attribute value.
</summary>
            <param name="name">
   The attribute name.
</param>
            <param name="value">
   The value.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.GetAttribute(System.String)">
            <summary>
   Gets the attribute by name.
</summary>
            <param name="name">
   The name.
</param>
            <returns>
   The value.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.CreateAggregateAttribute(System.String)">
            <summary>
   Creates an attribute that is an aggregate.
</summary>
            <param name="name">
   The attribute name.
</param>
            <returns>
   The aggregate.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.Unset">
            <summary>
   Clears the handle.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.Delete">
            <summary>
   Deletes the handle.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCAnyHandle.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCAnyHandle.HasValue">
            <summary>
   Identifies if the handle is empty or contains a value.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCAnyHandle.StepId">
            <summary>
   The step id of the handle. Valid only for import.
</summary>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCAnyHandle.TypeName">
            <summary>
   The name of the type of the handle.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCAnyHandle.Id">
            <summary>
   The integer identifier for the handle.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.GetHashCode">
            <summary>
Gets the integer value of the id as hash code
</summary>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.Equals(System.Object)">
            <summary> Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.  </summary>
            <param name="obj"> Another object. </param>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.op_Inequality(Autodesk.Revit.DB.IFC.IFCAnyHandle,Autodesk.Revit.DB.IFC.IFCAnyHandle)">
            <summary>Determines whether two IFCAnyHandles are different.</summary>
            <param name="first">The first IFCAnyHandle.</param>
            <param name="second">The second IFCAnyHandle.</param>
            <returns>True if the IFCAnyHandles are different; otherwise, false.</returns>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAnyHandle.op_Equality(Autodesk.Revit.DB.IFC.IFCAnyHandle,Autodesk.Revit.DB.IFC.IFCAnyHandle)">
            <summary>Determines whether two IFCAnyHandles are the same.</summary>
            <param name="first">The first IFCAnyHandle.</param>
            <param name="second">The second IFCAnyHandle.</param>
            <returns>True if the IFCAnyHandles are the same; otherwise, false.</returns>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCAnyHandle">
            <summary>
   A handle representing an item in an IFC file.
</summary>
            <remarks>
   Handles are used to populate each line item in an IFC file.  Each handle is assigned a unique identifier
   (an integer) which can be seen in the file contents at the start of the line.
</remarks>
            <since>
   2012
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAggregate.GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAggregate.GetBasicIEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAggregate.GetSDAISelect(System.Int32)">
            <summary>
   Gets the data value in the specified aggregate element.
</summary>
            <param name="index">
   The index.
</param>
            <returns>
   The data value.
</returns>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAggregate.GetIFCAggregateIterator">
            <summary>
   Returns a IFCAggregateIterator that iterates through the collection.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAggregate.Delete">
            <summary>
   Delete the aggregate object from the IFCFile model.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAggregate.AddAggregate">
            <summary>
   Creates a nested aggregate and adds it to the aggregate.
</summary>
            <returns>
   The nested aggregate.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
   The aggregate is not valid.
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAggregate.Add(Autodesk.Revit.DB.IFC.IFCData)">
            <summary>
   Adds an element to the aggregate.
</summary>
            <param name="ifcData">
   The IFCData element.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
   The aggregate is not valid.
</exception>
            <since>
   2013
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCAggregate.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCAggregate.Count">
            <summary>
   The number of the data values in the aggregate.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCAggregate.default(System.Int32)">
            <summary>
   Get the IFCData for this aggregate.
</summary>
            <param name="index">
   The index.
</param>
            <returns>
   The IFCData.
</returns>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCAggregate">
            <summary>
   A collection of IFC handles or attributes.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCAggregateIterator.CurrentObject">
Gets the item at the current position of the iterator.(Inherited from IEnumerator. Give it another property name to avoid confusing. And make it internal.)
</member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCAggregateIterator.Current">
            <summary>Gets the item at the current position of the iterator. </summary>
            <remarks>There is no current item if the iterator has not started yet or has been done. </remarks>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException"> There is no current item in the iterator. </exception>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAggregateIterator.GetCurrent">
            <summary>
   Returns the current IFCData.
</summary>
            <returns>
   The current IFCData.
</returns>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAggregateIterator.Reset">
            <summary>
   Resets the iterator to the beginning of the aggregate.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCAggregateIterator.MoveNext">
            <summary>
   Increments the iterator to the next object in the IFCAggregate.
</summary>
            <returns>
   True if there is another available object in this iterator.
   False if the iterator has completed all available objects.
</returns>
            <since>
   2013
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCAggregateIterator.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCAggregateIterator">
            <summary>
   A class used to iterate individual objects in an IFCAggregate.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCProjectLevelGUIDType">
            <summary>
   The type of the GUID to be retrieved from Revit.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCProjectLevelGUIDType.Site">
            <summary>
   The site GUID.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCProjectLevelGUIDType.Building">
            <summary>
   The building GUID.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCProjectLevelGUIDType.Project">
            <summary>
   The project GUID.
</summary>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCConnectedWallDataLocation">
            <summary>
   An enumerated type that represents the location where an element is connected to a wall.
</summary>
            <since>
   2012
</since>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCConnectedWallDataLocation.NotDefined">
            <summary>
   The connection type is not defined for this connection.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCConnectedWallDataLocation.Path">
            <summary>
   The conection is at some point along the path of the location line.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCConnectedWallDataLocation.End">
            <summary>
   The connection is at the end of the wall location line.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCConnectedWallDataLocation.Start">
            <summary>
   The connection is at the start of the wall location line.
</summary>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.AsAggregate">
            <summary>
   Gets storage value as IFCAggregate when its PrimitiveType is aggregate.
</summary>
            <returns>
   The IFCAggregate.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.InapplicableDataException">
   The primitive type is not aggregate.
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.AsInstance">
            <summary>
   Gets storage value as IFCAnyHandle when its PrimitiveType is instance.
</summary>
            <returns>
   The IFCAnyHandle.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.InapplicableDataException">
   The primitive type is not instance.
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.AsString">
            <summary>
   Gets storage value as string when its PrimitiveType is string, binary or enumeration.
</summary>
            <returns>
   The string value.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.InapplicableDataException">
   The primitive type is not string, binary or enumeration.
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.AsLogical">
            <summary>
   Gets storage value as IFCLogical when its PrimitiveType is logical.
</summary>
            <returns>
   The IFCLogical value.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.InapplicableDataException">
   The primitive type is not logical.
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.AsBoolean">
            <summary>
   Gets storage value as boolean when its PrimitiveType is boolean.
</summary>
            <returns>
   The bool value.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.InapplicableDataException">
   The primitive type is not boolean.
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.AsDouble">
            <summary>
   Gets storage value as double when its PrimitiveType is double.
</summary>
            <returns>
   The double value.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.InapplicableDataException">
   The primitive type is not double.
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.AsInteger">
            <summary>
   Gets storage value as integer when its PrimitiveType is integer.
</summary>
            <returns>
   The int value.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.InapplicableDataException">
   The primitive type is not integer.
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.GetTypeList">
            <summary>
   Gets the multiple strings represent one IFC type name.
</summary>
            <returns>
   The strings.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
   No type assigned or it is a simple type.
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.SetTypeList(System.Collections.Generic.IList`1{System.String})">
            <summary>
   Sets the corresponding IFC type by its type list name.
</summary>
            <remarks>
   This sets the IFC type represented by a string list.
   For example, DIMENSION(DIAMETER(INCH(5.0))). It's primitive type is double and the value is 5.0. Its IFC type is DIMENSION/DIAMETER/INCH.
   The string list represents the type is "DIMENSION"-"DIAMETER"-"INCH".
</remarks>
            <param name="typeList">
   The strings represent the name.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.GetSimpleType">
            <summary>
   Gets the IFC type name.
</summary>
            <returns>
   The name.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.InvalidOperationException">
   No type assigned or it is not a simple type.
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.HasSimpleType">
            <summary>
   Determines if there is one corresponding IFC type.
</summary>
            <returns>
   False if there are no corresponding IFC types, or more than one; returns true otherwise.
</returns>
            <since>
   2015
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.SetSimpleType(System.String)">
            <summary>
   Sets the corresponding IFC type by its name.
</summary>
            <param name="typeName">
   The name of the type.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.CreateStringOfType(System.String,System.String)">
            <summary>
   Creates a string data object of the specified type.
</summary>
            <param name="value">
   The string value.
</param>
            <param name="typeName">
   The type name.
</param>
            <returns>
   The IFCData object.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.CreateLogicalOfType(Autodesk.Revit.DB.IFC.IFCLogical,System.String)">
            <summary>
   Creates a logical data object of the specified type.
</summary>
            <param name="value">
   The IFCLogical value.
</param>
            <param name="typeName">
   The type name.
</param>
            <returns>
   The IFCData object.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentOutOfRangeException">
   A value passed for an enumeration argument is not a member of that enumeration
</exception>
            <since>
   2014
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.CreateBooleanOfType(System.Boolean,System.String)">
            <summary>
   Creates a boolean data object of the specified type.
</summary>
            <param name="value">
   The boolean value.
</param>
            <param name="typeName">
   The type name.
</param>
            <returns>
   The IFCData object.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.CreateDoubleOfType(System.Double,System.String)">
            <summary>
   Creates a double data object of the specified type.
</summary>
            <param name="value">
   The double value.
</param>
            <param name="typeName">
   The type name.
</param>
            <returns>
   The IFCData object.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.CreateIntegerOfType(System.Int32,System.String)">
            <summary>
   Creates an integer data object of the specified type.
</summary>
            <param name="value">
   The integer value.
</param>
            <param name="typeName">
   The type name.
</param>
            <returns>
   The IFCData object.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.CreateIFCAggregate(Autodesk.Revit.DB.IFC.IFCAggregate)">
            <summary>
   Creates an IFCAggregate data object.
</summary>
            <param name="value">
   The IFCAggregate value.
</param>
            <returns>
   The IFCData object.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.CreateIFCAnyHandle(Autodesk.Revit.DB.IFC.IFCAnyHandle)">
            <summary>
   Creates an IFCAnyHandle data object.
</summary>
            <param name="value">
   The IFCAnyHandle value.
</param>
            <returns>
   The IFCData object.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.CreateEnumeration(System.String)">
            <summary>
   Creates a enum data object.
</summary>
            <param name="value">
   The string value.
</param>
            <returns>
   The IFCData object.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.CreateBinary(System.String)">
            <summary>
   Creates a binary data object.
</summary>
            <param name="value">
   The string value.
</param>
            <returns>
   The IFCData object.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.CreateString(System.String)">
            <summary>
   Creates a string data object.
</summary>
            <param name="value">
   The string value.
</param>
            <returns>
   The IFCData object.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.CreateLogical(Autodesk.Revit.DB.IFC.IFCLogical)">
            <summary>
   Creates a logical data object.
</summary>
            <param name="value">
   The IFCLogical value.
</param>
            <returns>
   The IFCData object.
</returns>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentOutOfRangeException">
   A value passed for an enumeration argument is not a member of that enumeration
</exception>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.CreateBoolean(System.Boolean)">
            <summary>
   Creates a boolean data object.
</summary>
            <param name="value">
   The boolean value.
</param>
            <returns>
   The IFCData object.
</returns>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.CreateDouble(System.Double)">
            <summary>
   Creates a double data object.
</summary>
            <param name="value">
   The double value.
</param>
            <returns>
   The IFCData object.
</returns>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.CreateInteger(System.Int32)">
            <summary>
   Creates an integer data object.
</summary>
            <param name="value">
   The integer value.
</param>
            <returns>
   The IFCData object.
</returns>
            <since>
   2013
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCData.IsValidObject">
            <summary>
   Specifies whether the .NET object represents a valid Revit entity.
</summary>
            <remarks>
   If the corresponding Revit native object is destroyed, or creation of the corresponding object is undone,
   a managed API object containing it is no longer valid. API methods cannot be called on invalidated wrapper objects.
</remarks>
            <returns>
   True if the API object holds a valid Revit native object, false otherwise.
</returns>
            <since>
   2014
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCData.PrimitiveType">
            <summary>
   The primitive data type.
</summary>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentOutOfRangeException">
   When setting this property: A value passed for an enumeration argument is not a member of that enumeration
</exception>
            <since>
   2013
</since>
        </member>
        <member name="P:Autodesk.Revit.DB.IFC.IFCData.HasValue">
            <summary>
   Identifies if the data is empty or contains a value.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.GetHashCode">
            <summary>
Gets the hash code.
</summary>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.Equals(System.Object)">
            <summary> Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.  </summary>
            <param name="obj"> Another object. </param>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.op_Inequality(Autodesk.Revit.DB.IFC.IFCData,Autodesk.Revit.DB.IFC.IFCData)">
            <summary>Determines whether two IFCDatas are different.</summary>
            <param name="first">The first IFCData.</param>
            <param name="second">The second IFCData.</param>
            <returns>True if the IFCDatas are different; otherwise, false.</returns>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.op_Equality(Autodesk.Revit.DB.IFC.IFCData,Autodesk.Revit.DB.IFC.IFCData)">
            <summary>Determines whether two IFCDatas are the same.</summary>
            <param name="first">The first IFCData.</param>
            <param name="second">The second IFCData.</param>
            <returns>True if the IFCDatas are the same; otherwise, false.</returns>
        </member>
        <member name="M:Autodesk.Revit.DB.IFC.IFCData.#ctor(Autodesk.Revit.DB.IFC.IFCData)">
            <summary>
   Creates a copy object.
</summary>
            <param name="from">
   The IFCData object.
</param>
            <exception cref="T:Autodesk.Revit.Exceptions.ArgumentNullException">
   A non-optional argument was null
</exception>
            <since>
   2013
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCData">
            <summary>
   A specialized type of abstract data block that can represent any data type.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCDataPrimitiveType">
            <summary>
   Used in operations to specify the primitive type of an IFCData.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCDataPrimitiveType.Unknown">
            <summary>
   Unknown.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCDataPrimitiveType.Aggregate">
            <summary>
   Represents IFCAggregate.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCDataPrimitiveType.Instance">
            <summary>
   Represents IFCAnyHandle.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCDataPrimitiveType.Enumeration">
            <summary>
   Enumeration.
   When reading or writing an IFCData of primitive type Enumeration,
   the value will be the string representation of the enumeration value
   as seen in the IFC specification.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCDataPrimitiveType.Binary">
            <summary>
   Binary.
   When reading or writing an IFCData of primitive type Binary,
   the value will be the string representation of the binary value
   as seen in the IFC specification.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCDataPrimitiveType.String">
            <summary>
   String.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCDataPrimitiveType.Logical">
            <summary>
   IFCLogical type.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCDataPrimitiveType.Boolean">
            <summary>
   Boolean.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCDataPrimitiveType.Double">
            <summary>
   Double.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCDataPrimitiveType.Integer">
            <summary>
   Integer.
</summary>
        </member>
        <member name="T:Autodesk.Revit.DB.IFC.IFCLogical">
            <summary>
   A datatype can have values TRUE, FALSE or UNKNOWN.
</summary>
            <since>
   2013
</since>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCLogical.Unknown">
            <summary>
   Unknown.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCLogical.False">
            <summary>
   False.
</summary>
        </member>
        <member name="F:Autodesk.Revit.DB.IFC.IFCLogical.True">
            <summary>
   True.
</summary>
        </member>
        <member name="M:OdIfcHostAppServices.brepBuilder(OdBrepBuilder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,BrepType)">
\details
  Global setting of B-Rep triangulation.

\details
  Global setting of B-Rep triangulation.

\details
  Initializes the boundary representation builder with a product-specific implementation.
  \param brepBuilder  [out] A reference to an instance of the boundary representation builder class to be initialized.
  \param bbType       [in]  A type of boundary representation.
  \returns Returns eOk if the B-Rep builder was successfully initialized; otherwise the method returns an appropriate error code.
  \remarks 
  The method returns eNotImplementedYet value by default.

</member>
        <member name="M:OdIfcHostAppServices.gsBitmapDevice(OdRxObject*,OdRxObject*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
  Retrieves the current bitmap <exref target="https://docs.opendesign.com/tv/OdGsDevice.html">device</exref> 
  associated with the host application services object.
  \param pViewObj [in] A raw pointer to an <exref target="https://docs.opendesign.com/tkernel/OdAbstractViewPE.html">OdAbstractViewPE</exref> compatible object  
  (<exref target="https://docs.opendesign.com/tv/OdGsView.html">OdGsView</exref>, <exref target="https://docs.opendesign.com/td/OdDbViewport.html">OdDbViewport</exref>, etc).
  \param pDb      [in] A raw pointer to the database context.
  \param flags    [in] Bitmap device flags.
  \returns Returns a smart pointer to the <exref target="https://docs.opendesign.com/tv/OdGsDevice.html">device</exref> object associated with the host application services object.

</member>
        <member name="M:OdIfcHostAppServices.getSubstituteFontByChar(OdFont!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt16,OdRxObject*)">
\details
  Retrieves the typeface name of the TTF font that has the specified character.
  \param pFont        [in] A TTF font object.
  \param unicodeChar  [in] A symbol to find in the substitute font name.
  \param pDb          [in] A raw pointer to the database context.
  \returns Returns a string object that contains the substitute font name. 
  \remarks
  The default method implementation uses the Windows API for getting the font.
  \sa
  <exref target="https://docs.opendesign.com/td/FontHandling.html">Font Handling</exref></member>
        <member name="M:OdIfcHostAppServices.getSubstituteFont(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdFontType)">
\details
  Retrieves the current substitute font name. The substitute font is used in cases when a specified font is not found.
  \param fontName [in] A font name.
  \param fontType [in] A font type.
  \returns Returns a string object that contains the substitute font name.
  \remarks 
  The default implementation of this method returns an empty string.
  The fontType parameter value must be one of the following:

  <table>
  Name                    Value    Description
  kFontTypeUnknown        0        Unknown.
  kFontTypeShx            1        SHX font.
  kFontTypeTrueType       2        TrueType font.
  kFontTypeShape          3        Shape file.
  kFontTypeBig            4        BigFont file.
  </table>
  \sa
  <exref target="https://docs.opendesign.com/td/FontHandling.html">Font Handling</exref></member>
        <member name="M:OdIfcHostAppServices.getPreferableFont(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdFontType)">
\details
  Retrieves the current preferable font name for a specified font name and type.
  \param fontName [in] A font name.
  \param fontType [in] A font type.
  \returns Returns a string object containing the preferable font name.
  \remarks
  The default implementation of this method returns an empty string.

  The fontType parameter value must be one of the following:

  <table>
  Name                    Value    Description
  kFontTypeUnknown        0        Unknown.
  kFontTypeShx            1        SHX font.
  kFontTypeTrueType       2        TrueType font.
  kFontTypeShape          3        Shape file.
  kFontTypeBig            4        BigFont file.
  </table>
  \sa
  <exref target="https://docs.opendesign.com/td/FontHandling.html">Font Handling</exref></member>
        <member name="M:OdIfcHostAppServices.getAlternateFontName">
\details
  Retrieves the current default font name. 
  \returns Returns the path to the font file to be used when a given font file can not be found by IFC SDK.
  \remarks
  The default implementation of the method returns an empty string.
  \sa
  <exref target="https://docs.opendesign.com/td/FontHandling.html">Font Handling</exref></member>
        <member name="M:OdIfcHostAppServices.formatMessage(System.UInt32,BTEllipsis)">
details
  Formats an error message string corresponding to the specified error code(s). 
  \param errorCode [in] An error code.
  \returns Returns a string with a formatted error message.

</member>
        <member name="M:OdIfcHostAppServices.versionString">
\details
  Retrieves the release version of the client application represented as a string.
  \returns Returns the release version string of the client application.
  \remarks
  The default implementation of this method returns oddgGetLibraryInfo()-&gt;getLibVersion().

</member>
        <member name="M:OdIfcHostAppServices.releaseMajorMinorString">
\details
  Retrieves the major and minor numbers of the client application's version represented as a string.
  \returns Returns a string object that contains the application's major and minor version numbers.
  \remarks
  The default implementation of this method returns oddgGetLibraryInfo()-&gt;getLibVersion().

</member>
        <member name="M:OdIfcHostAppServices.companyName">
\details
  Retrieves the current name of the client company.
  \returns Returns a string object containing the current name of the client company.
  \remarks
  The default implementation of this method returns oddgGetLibraryInfo()-&gt;getCompanyName().
  This method is typically used for populating information about the client's company.

</member>
        <member name="M:OdIfcHostAppServices.product">
\details
  Retrieves the current name of the client product based on ODA IFC SDK.
  \returns Returns a string object containing the current name of the client product.
  \remarks
  The default implementation of this method returns program().
  This method is typically used for populating information about the product.

</member>
        <member name="M:OdIfcHostAppServices.program">
\details
  Retrieves the current name of the client program based on ODA IFC SDK.
  \returns Returns a string object containing the custom application name.
  \remarks
  The default implementation of this method returns oddgGetLibraryInfo()-&gt;getLibName().
  This method is typically used for populating information about the application.

</member>
        <member name="M:OdIfcHostAppServices.findFile(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxObject*,OdDbBaseHostAppServices.FindFileHint)">
\details
  Searches for a specified file.
  \param filename [in] A name of the file to find.
  \param pDb      [in] A pointer to the database context. If the parameter value is equal to NULL, the file search is not related to a database.
  \param hint     [in] A hint that indicates the type of file that is required.
  \returns Returns the full path to the found file; if the file was not found, the method returns an empty string.
  \remarks
  This method is called by IFC SDK when it needs to get access to a file, such as a font file, a template file, etc.
  If the pDb parameter value is not equal to NULL, it is possible to call the getFilename() method of the database instance 
  to determine the full path to the IFC file associated with the database.
  The typical search order is the following:

  # The file name itself.
  # The current directory.
  # The drawing directory (for SHX font, image, and xref files).
  # The Windows fonts directory (only for TTF fonts on Windows platforms).

  The hint parameter's value must be one of the following:

  <table>
  Name                    Value     Description Extension
  kDefault                0         Any file.                         any
  kFontFile               1         Can be either SHX or TTF file.    SHX or TTF
  kCompiledShapeFile      2         SHX file.                         SHX
  kTrueTypeFontFile       3         TTF file.                         TTF
  kEmbeddedImageFile      4         Image file.                       ISM
  kXRefDrawing            5         External reference file.
  kPatternFile            6         Pattern file (PAT).               PAT
  kDRXApplication         7         DRX application file.             DRX
  kFontMapFile            8         FontMap file.                     FMP
  </table></member>
        <member name="M:OdIfcHostAppServices.#ctor">
\details
  Creates a platform-specific operation services object for IFC functionality.

</member>
        <member name="M:OdIfcEntResolver.resolve(OdIfc.OdIfcEntity*)">
\details
  Resolves the model's entity.
  \param inst     [in] A smart pointer to the entity entity instance to be resolved.
  \param h        [in] A database handle of the entity instance to be resolved.
  \returns Returns true if the entity was successfully resolved; otherwise, the method returns false.

</member>
        <member name="M:OdIfcEntResolver.setFile(OdIfcFile*)">
\details
  Sets a new model to the entity resolver object.
  \param model [in] A raw pointer to the model's content object to be set.

</member>
        <member name="M:OdIfcEntResolver.Dispose">
\details
  Destroys the entity resolver object.

</member>
        <member name="M:OdIfcEntResolver.#ctor">
\details
  Default entity resolver constructor.

</member>
        <member name="M:OdIfcFile.collectEntityIds">
\details
  Updates collection of IFC GUID entitiy identifiers.
  \returns Returns eOk if the update was successfull; otherwise, the method returns an appropriate error code.

</member>
        <member name="M:OdIfcFile.gsNode">
\details
  Retrieves the current Gs node object of the entity.
  \returns Returns a raw pointer to the <exref target="https://docs.opendesign.com/tv/OdGsCache.html">OdGsCache</exref> object associated with the entity.

</member>
        <member name="M:OdIfcFile.setGsNode(OdGsCache*)">
\details 
  Sets a new Gs node cache for the drawable.
  \param pGsNode [in] A raw pointer to an <exref target="https://docs.opendesign.com/tv/OdGsCache.html">OdGsCache</exref> object.

</member>
        <member name="M:OdIfcFile.getGeomExtents(OdGeExtents3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Retrieves the current geometrical extents of the model.
  \param ext [out] A placeholder for the current geometry extents object to be returned to a calling subroutine.
  \returns Returns eOk if the current extents were successfully returned; otherwise, the method returns an appropriate error code.
  \remarks
  The method returns the model extents only if the model was created by calling the setGeomResource() method.
  The method accepts an instance of the OdGeExtents3d class, fills it with the data about the model's extents and
  returns it to a calling subroutine.

</member>
        <member name="M:OdIfcFile.getContextSelected(OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Returns true if IfcGeometricRepresentationContext is selected to build geometry.
  \param idCtx [in] Object ID of geometric context to test.

</member>
        <member name="M:OdIfcFile.unresolveEntities">
\details
  Unresolve entities in the IFC model.
  \returns Returns eOk if the unresolve was successfull; otherwise, the method returns an appropriate error code.

</member>
        <member name="M:OdIfcFile.getActiveView">
\details
  Retrieves the current active view of the IFC file object.
  \returns Returns a raw pointer to the <exref target="https://docs.opendesign.com/tv/OdGsView.html">OdGsView</exref> object that represents the currently active view.

</member>
        <member name="M:OdIfcFile.setActiveView(OdGsView*)">
\details
  Sets a new active view for the IFC file's content.
  \param pActiveView [in] A raw pointer to the <exref target="https://docs.opendesign.com/tv/OdGsView.html">OdGsView</exref> object.

</member>
        <member name="M:OdIfcFile.getProjectId">
\details
  Retrieves the IFC model's root entity.
  \returns Returns the identifier of the root entity of the model.
  \remarks
  Each valid IFC file must have exactly one root entity.

</member>
        <member name="M:OdIfcFile.writeFile(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
\details
  Writes data from the file object to a physical file.
  \param filename     [in] A string that contains the full path to the output file to write data.
  \param saveLogFile  [in] A flag that determines whether the log file should be also written (if equal to true) or not (if equal to false).
  \returns Returns eOk if the data was successfully written; otherwise, the method returns an appropriate error.

</member>
        <member name="M:OdIfcFile.readFile(OdSmartPtr&lt;OdStreamBuf&gt;)">
\details
  Reads data from a specified IFC file.
  \param fileName [in] A string that contains the full path to the input file to read data from.
  \returns Returns eOk if the data was successfully read; otherwise, the method returns an appropriate error.

</member>
        <member name="M:OdIfcFile.readFile(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Reads data from a specified IFC file.
  \param fileName [in] A string that contains the full path to the input file to read data from.
  \returns Returns eOk if the data was successfully read; otherwise, the method returns an appropriate error.

</member>
        <member name="M:OdIfcFile.detach">
\details
  Closes associated model and detaches an associated repository with model from an OdIfcFile. The work with repository and model
  can be continued at low-level way.
  \returns Returns a smart pointer to unattached Repository instance.

</member>
        <member name="M:OdIfcFile.initialize(OdDAI.Repository*)">
\details
  Initializes OdIfcFile instance with repository if it contains appropriate information for IFC format
  (single model of supported IFC schema), the model is become opened on read-only access by default and will keep this access
  right on the time when its repository attached to OdIfcFile.
  \param pRepo [in] Repository to attach to the OdIfcFile.
  \returns Returns eOk if the Repository was successfully attached to the OdIfcFile.

</member>
        <member name="M:OdIfcFile.initialize(InitialSchema)">
\details
  Initializes the IFC file object with a specified scheme.
  \param modelScheme [in] A string that contains the scheme name.
  \returns Returns eOk if the file was successfully initialized; otherwise, the method returns an appropriate error.

</member>
        <member name="M:OdIfcFile.setFileName(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assigns a name (file name) to the OdIfcFile container.

</member>
        <member name="M:OdIfcFile.getFileName">
Retrieves the current name (file name) of a physical file associated with the repository object.
\returns Returns a string that contains the file name.

</member>
        <member name="M:OdIfcFile.#ctor">
\details
  Creates a new IFC file object with default parameters.

</member>
        <member name="T:OdIfcFile">
\details
A class that implements working with an IFC file header and data sections (header and model).

</member>
        <member name="M:OdIfc.OdIfcGeomModule.getIfcEntResolver">
\details 
  Retrieves the current entity resolver object assigned to the module.
  \returns Returns a raw pointer to the entity resolver object.

</member>
        <member name="M:OdIfc.OdIfcGeomModule.uninitApp">
\details 
  De-initializes the IFC geometry module.

</member>
        <member name="M:OdIfc.OdIfcGeomModule.initApp">
\details 
  Initializes the IFC geometry module.

</member>
        <member name="T:OdIfc.OdIfcGeomModule">
\details 
A class that implements a module for working with IFC geometry. 

</member>
        <member name="T:OdIfcEntResolver">
\details
  Creates the entry point function for a custom application.

\details
  Speeds up DLL loading on Windows. Refer to Win SDK documentation on DllMain() for more details.


\details
An abstract class that provides an interface for the model's entity resolving functionality.

</member>
        <member name="M:odrxInitStaticModuleMap(STATIC_MODULE_DESC*)">
\details
  Defines the start of the static module map, which contains entries for all custom ODA Platform modules 
  that are linked in statically to a client application.

\details
  Defines the entry in the static module map, which contains entries for all custom ODA Platform modules 
  that are linked in statically to a client application.

  \param AppName [in]  Registered application name, that can be later passed to 
              OdRxDynamicLinker::loadModule to load the static application.
  \param ModuleClassName [in] Name of the C++ class derived from OdRxModule, that 
                      implements support for this module.

\details

\details
  Defines the end of the static module map, which contains entries for all custom ODA Platform modules 
  that are linked in statically to a client application.

\details
  Declare the static module map that will be defined in some other place in binary.

</member>
        <member name="M:OdTfSchemaManagerInterface.unloadSchema(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Unload registered schema.
  \param schemeName [in] scheme name.

</member>
        <member name="M:OdTfSchemaManagerInterface.convertSchema(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Convert the xml scheme to binary schema.
  \param schemeName [in] xml scheme name.
  Note: binary scheme will be save in the same folder where situated xml schema, but with file type .tsbf

</member>
        <member name="M:OdTfSchemaManagerInterface.registerSchema(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdTf.SaveType)">
\details
  Try to register the xml scheme or binary schema.
  \param schemeName [in] xml/binary schema name.
  Returns true if the schema is registered. Return false if the schema was registered early.

</member>
        <member name="M:OdTfSchemaManagerInterface.registerSchema(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Try to register the xml scheme or binary schema.
  \param schemeName [in] xml/binary schema name.
  Returns true if the schema is registered. Return false if the schema was registered early.
  \note Name of schema must have one of types (.tsbf | .txds)

</member>
        <member name="M:OdIfcUnitConverter.appendUnit(OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Appends new convertible unit.
    \param unitName [in] Name of convertible unit.
    \param unitId [in] Id of corresponding IfcConversionBasedUnit.

</member>
        <member name="M:OdIfcUnitConverter.convertToSIUnit(OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
\details
    Performs an attempt to convert specified unit to the SI unit.
    \param unitName [in] Name of unit to be converted.
    \param val [in] Unit value.
    \returns Returns a result of conversion.

</member>
        <member name="M:OdIfcUnitConverter.#ctor(OdIfcFile*)">
\details
    Creates a new IFC converter object.
    \param pFile [in] A raw pointer to an IfcFile object.

</member>
        <member name="T:OdIfcUnitConverter">
\details
A class that implements conversion of different units to the SI units.

</member>
        <member name="M:OdIfcModelContext.setDefaultEntityColor(OdCmEntityColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Sets a new default model color.
    \param color [in] An instance of the <exref target="https://docs.opendesign.com/tkernel/OdCmEntityColor.html">OdCmEntityColor</exref> object that represents the new default color.

</member>
        <member name="M:OdIfcModelContext.getDefaultEntityColor">
\details 
    Retrieves the current default model color.
    \returns Returns an instance of the <exref target="https://docs.opendesign.com/tkernel/OdCmEntityColor.html">OdCmEntityColor</exref> object that contains the current default color for the model.

</member>
        <member name="M:OdIfcModelContext.setDeviationParams(OdIfcDeviationParams)">
\details 
    Sets new deviation parameters for the model context.
    \param params [in] Deviation parameters to be set.

</member>
        <member name="M:OdIfcModelContext.#ctor(OdIfcDeviationParams,OdCmEntityColor)">
\details 
    Creates a new model context object with specified deviation parameters and color.
    \param params [in] Deviation parameters.
    \param color  [in] Default model color value.

</member>
        <member name="T:OdIfcModelContext">
\details 
  A class that implements working with an IFC model context.

</member>
        <member name="M:OdIfcDeviationParams.setMaxPerCircle(System.UInt16)">
\details 
    Sets a new maximum number of circle segments.
    \param maxPerCircle [in] A new maximum quantity of circle segments to be set.

</member>
        <member name="M:OdIfcDeviationParams.getMaxPerCircle">
\details 
    Retrieves the current maximum number of circle segments.
    \returns Returns an unsigned 16-bit integer value that represents the current maximum quantity of circle segments.

</member>
        <member name="M:OdIfcDeviationParams.setMinPerCircle(System.UInt16)">
\details 
    Sets a new minimum number of circle segments.
    \param minPerCircle [in] A new minimum quantity of circle segments to be set.

</member>
        <member name="M:OdIfcDeviationParams.getMinPerCircle">
\details 
    Retrieves the current minimum number of circle segments.
    \returns Returns an unsigned 16-bit integer value that represents the current minimum quantity of circle segments.

</member>
        <member name="M:OdIfcDeviationParams.setDeviation(System.Double)">
\details 
    Sets a new deviation value for the parameters set.
    \param deviation [in] A new deviation value to be set.

</member>
        <member name="M:OdIfcDeviationParams.getDeviation">
\details 
    Retrieves the current deviation value.
    \returns Returns a double value that represents the current deviation value. 

</member>
        <member name="M:OdIfcDeviationParams.#ctor(System.Double,System.UInt16,System.UInt16)">
\details 
    Creates a new set of deviation parameters with the specified values.
    \param deviation    [in] A deviation value.
    \param minPerCircle [in] A minimum number of segments to divide the circle into.
    \param maxPerCircle  [in] A maximum number of segments to divide the circle into.

</member>
        <member name="T:OdIfcDeviationParams">
\details 
  A class that implements working with IFC deviation parameters.

</member>
        <member name="M:OdIfc.OdIfcEntity.subWorldDraw(OdGiWorldDraw*)">
\details 
    Draws a graphical entity representation that is independent of any viewport context. 
    \param wd [in] A raw pointer to the object that encapsulates parameters of viewport-independent vectorization.
    \returns Returns true if drawing was successful; otherwise, the method returns false.

</member>
        <member name="M:OdIfc.OdIfcEntity.subSetAttributes(OdGiDrawableTraits*)">
\details 
    Sets the values of the entity's sub-entity traits. 
    \param traits [out] A raw pointer to the traits to be filled and returned to a calling subroutine.
    \returns Returns the result of setting the values.

</member>
        <member name="M:OdIfc.OdIfcEntity.gsNode">
\details
    Retrieves the current Gs node object of the entity.
    \returns Returns a raw pointer to the <exref target="https://docs.opendesign.com/tv/OdGsCache.html">OdGsCache</exref> object associated with the entity.

</member>
        <member name="M:OdIfc.OdIfcEntity.setGsNode(OdGsCache*)">
\details 
    Sets a new Gs node cache for the entity.
    \param pGsNode [in] A raw pointer to an <exref target="https://docs.opendesign.com/tv/OdGsCache.html">OdGsCache</exref> object.

</member>
        <member name="M:OdIfc.OdIfcEntity.unresolve">
\details
   Unresolves the entity.

</member>
        <member name="M:OdIfc.OdIfcEntity.resolve(OdIfc.IfcOpResult,System.Void*)">
\details 
    Resolves the entity and returns the result of the entity composition to a calling subroutine.
    \param resolved [in]  A resolution operation result.
    \param resPtr   [out] A raw pointer that references the entity composition result value.

</member>
        <member name="M:OdIfc.OdIfcEntity.putAttr(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets a new value of an attribute that is specified by its name.
    \param explicitAttrName [in] An ANSI string that contains the attribute name.
    \param val              [in] A new attribute value to be set.
    \returns Returns true if the attribute value was successfully set; otherwise, the method returns false.

</member>
        <member name="M:OdIfc.OdIfcEntity.unsetAttr(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
    Clears the attribute value. 
    \param explicitAttrName [in] An ANSI string that contains the attribute name.

</member>
        <member name="M:OdIfc.OdIfcEntity.testAttr(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
    Retrieves whether the attribute value is set or is unset.
    \param explicitAttrName [in] An ANSI string that contains the attribute name.
    \returns Returns true if the attribute has a value; otherwise, the method returns false (the attribute value is not set).

</member>
        <member name="M:OdIfc.OdIfcEntity.getAttr(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
    Retrieves the current value of an attribute specified by its name.
    \param attrName [in] An ANSI string that contains the attribute name.
    \returns Returns the current value of the attribute.
    \remarks 
    The method provides late binding access to the attribute value by its name. 
    Attributes of select and aggregate data types are also supported.

</member>
        <member name="M:OdIfc.OdIfcEntity.isKindOf(OdIfc.OdIfcEntityType)">
\details
   Retrieves whether the entity belongs to a specified entity type.
   \param entityType [in] An entity type.
   \returns Returns true if the entity belongs to the specified type; otherwise, the method returns false.

</member>
        <member name="M:OdIfc.OdIfcEntity.Dispose">
\details 
    Destroys the entity object.
    \remarks 
    All attached compound objects are deleted as well.

</member>
        <member name="M:OdIfc.OdIfcEntity.#ctor">
\details 
    Creates a new entity object with default parameters.

</member>
        <member name="T:OdIfc.OdIfcEntity">
\details
  A class that represents an entity instance of an IFC file and provides IFC-specific functionality.

</member>
        <member name="T:OdIfc.IfcOpResult">
\details 
  Types of results of IFC file operations.

</member>
        <member name="M:OdDAI.Model.repository(OdDAI.Repository*)">
details
    Sets a repository that contains the model.

</member>
        <member name="M:OdDAI.Model.name(OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets a name of the model.

</member>
        <member name="M:OdDAI.Model.getIsLoading">
\details
    Retrieves if a model is in loading from file state.
    \returns Returns true if Model is in the process of file loading.

</member>
        <member name="M:OdDAI.Model.PromoteModelToReadWrite">
\details
    Function shall change the access mode of the specified SDAI-model from readonly to read-write.

</member>
        <member name="M:OdDAI.Model.closeModel">
\details
    Function shall end access to the specified SDAI-model.


\details
    Function shall end access to the specified SDAI-model.

</member>
        <member name="M:OdDAI.Model.mode">
\details
    Get access mode for an SDAI-model
    \returns Returns current access mode.

</member>
        <member name="M:OdDAI.Model.unloadEntityExtent(OdSmartPtr&lt;OdDAI.Entity&gt;)">
\details
    Unload application instances by type 
    \param entityDef [in] An entity.
    \returns Returns true if objects were unloaded successfully, and false in other case.

</member>
        <member name="M:OdDAI.Model.unloadEntityExtent(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
** \details
** \details
\details
    Unload application instances by type name
    \param entityName [in] An entity's name.
    \returns Returns true if objects were unloaded successfully, and false in other case.

</member>
        <member name="M:OdDAI.Model.getEntityExtent(OdSmartPtr&lt;OdDAI.Entity&gt;)">
\details
    Retrieves the collection of entity instances with entity type which is kind of entityName.
    \param entityName [in] An entity's name.
    \returns Returns a smart pointer to entity extent that keeps the collection of entity instances.

\details
    Retrieves the collection of entity instances with entity type which is subtype of entityDef.
    \param entityDef [in] An smart pointer to entity definition.
    \returns Returns a smart pointer to entity extent that keeps the collection of entity instances.

</member>
        <member name="M:OdDAI.Model.newIterator">
\details
    Creates an iterator to get sequential access to all entities of the model.
    \returns Returns a smart pointer to the model's instance iterator.

</member>
        <member name="M:OdDAI.Model.insertEntityInstance(OdSmartPtr&lt;OdDAI.ApplicationInstance&gt;,OdDbHandle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Inserts a newly created entity instance to the model.
    \param pInstanceToInsert [in] A smart pointer to the entity instance to be inserted.
    \param insertHandle      [in] A handle of the parent object where to insert the entity instance.
    \returns Returns an identifier of the inserted entity instance.
    \remarks
    If the entity being inserted already belongs to another model or it has been already appended or inserted before, the method returns a NULL object identifier.
    If the specified database handle already exists in the model, the entity defined with this handle gets a new handle value
    and the inserted entity (specified with the pInstanceToInsert parameter) takes the passed handle value (the insertHandle parameter value).

</member>
        <member name="M:OdDAI.Model.createEntityInstance(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
    Creates a new instance of a specified entity type.
    \param entityTypeName [in] A string that contains the type name of the new entity to be created.
    \returns Returns a smart pointer to the created entity instance.
    \remarks
    If the current schema does not support the specified type, the method returns a NULL smart pointer.
    In this case the isNull() method of the smart pointer object returns true.
    The created entity is not attached to the model.

</member>
        <member name="M:OdDAI.Model.createEntityInstance(OdSmartPtr&lt;OdDAI.Entity&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Creates a new instance of a specified entity type.
    \param entityDef [in] entity definition that contains the type name of the new entity to be created.
    \returns Returns a smart pointer to the created entity instance.
    \remarks
    If the current schema does not support the specified type, the method returns a NULL smart pointer.
    In this case the isNull() method of the smart pointer object returns true.
    The created entity is not attached to the model.

</member>
        <member name="M:OdDAI.Model.underlyingSchemaName">
\details
    Retrieves the name of the model's underlying schema.
    \returns Returns the name of the model's underlying schema.

</member>
        <member name="M:OdDAI.Model.underlyingSchema">
\details
    Retrieves the underlying schema definition of the model.
    \returns Returns a smart pointer to the model's underlying schema definition.

</member>
        <member name="M:OdDAI.Model.getEntityDefinition(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
    Retrieves an entity definition by its name. 
    \param entityName [in] The name of an entity definition.
    \returns Returns a raw pointer to the entity definition.
    \remarks 
    If there is no entity definition with the specified name, the method returns a NULL pointer.

</member>
        <member name="M:OdDAI.Model.RenameModel(OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Function shall assign a new name to the specified SDAI-model.
    \param modelName [in] new name of SDAI-model.

</member>
        <member name="M:OdDAI.Model.initialize(OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdSmartPtr&lt;OdDAI.Schema&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdDAI.Repository*)">
\details
    Initializes the model object and creates a minimal model hierarchy based on a schema with the specified name.
    \param ifcSchema [in] A string that contains the schema's name.
    \param pFiler    [in] A smart pointer to an IFC filer object that is created during the initialization operation.

</member>
        <member name="M:OdDAI.Model.initialize(OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdDAI.Repository*)">
\details
    Initializes the model object and creates a minimal model hierarchy based on a schema with the specified name.
    \param ifcSchema [in] A string that contains the schema's name.

</member>
        <member name="T:OdDAI.Model">
\details 
  A class that implements functionality for working with models.

</member>
        <member name="M:OdDAI.OdEntityExtent.load">
\details
    Loads all enitites from this entity extent container.
    \returns Returns eOk if success, otherwise it should return an error code

</member>
        <member name="M:OdDAI.OdEntityExtent.unload">
\details
    Unloads all enitites from this entity extent container.
    \returns Returns eOk if success, otherwise it should return an error code

</member>
        <member name="M:OdDAI.OdEntityExtent.name">
\details
    Returns the type name of the entity definition of this entity extent.

</member>
        <member name="M:OdDAI.OdEntityExtent.definition(OdSmartPtr&lt;OdDAI.Entity&gt;)">
\details
    Sets the entity definition of this entity extent container (folder).

    \param definition [in] An entity definition that is the parent definition for all entity instances contained in this entity extent.

</member>
        <member name="M:OdDAI.OdEntityExtent.definition">
\details
    Returns a smart pointer to the entity definition of this entity extent.

</member>
        <member name="M:OdDAI.OdEntityExtent.instances">
\details
    Returns an aggregate of object ids of entity instances for the folder.

</member>
        <member name="T:OdDAI.OdEntityExtent">
\details
  This class represents a container (folder) that contains entities that
  are a certain schema entity type.

</member>
        <member name="M:OdDAI.InstanceIterator.id">
\details
    Retrieves the identifier of the iterator object.
    \returns Returns the iterator's identifier.

</member>
        <member name="M:OdDAI.InstanceIterator.step">
\details
    Moves to the next instance in the list.

</member>
        <member name="M:OdDAI.InstanceIterator.done">
\details
    Retrieves whether the end of the instance list is reached.
    \returns Returns true if the end of the instance list is reached; otherwise the method returns false.

</member>
        <member name="M:OdDAI.InstanceIterator.Dispose">
\details
    Destroys the iterator object.

</member>
        <member name="T:OdDAI.InstanceIterator">
\details
  An abstract class that provides the interface of an iterator through entities of the model.
  An iterator allows you to get sequential access to entities that are contained in any collection.

</member>
        <member name="M:getIfcFormatter">
** { Secret } */
</member>
        <member name="T:OdUnitsFormatter">
** { Secret } */
</member>
        <member name="M:OdIfcCoreModule.isCDAEnabled">
\details
  Retrieves if CDA is allowed for OdDAI host module.
  \returns Returns true if CDA is enabled.

</member>
        <member name="M:OdIfcCoreModule.uninitApp">
\details 
  De-initializes the core IFC module.

</member>
        <member name="M:OdIfcCoreModule.initApp">
\details 
  Initializes the core IFC module.

</member>
        <member name="T:OdIfcCoreModule">
\details
An abstract class that provides the interface for a module that implements core IFC functionality.

</member>
        <member name="M:odIfcIsCDAInitialized">
\details
Retrieves whether the Common Data Access functionality is initialized for ODA IFC SDK.
\returns The function returns true if the CDA is initialized and can be used for IFC data.

</member>
        <member name="M:odIfcIsGeomResourceInitialized">
\details 
Retrieves whether the IFC geometry module is loaded and initialized. 
\returns The function returns true if the IFC geometry module is initialized; otherwise, the function returns false.

</member>
        <member name="M:odIfcInitModelerGeometry(ModelerType)">
\details
Initializes IFC SDK Modeler functionality.
\param modelerType[in] Modeler type which will be used to create geometry.
\returns Returns eOk if IFC SDK Modeler was successfully initialized; otherwise, the function returns an appropriate error code.

</member>
        <member name="M:odIfcUninitialize">
\details 
De-initializes IFC SDK functionality.
\returns Returns eOk if IFC SDK was successfully de-initialized; otherwise, the function returns an appropriate error code.
\remarks 
The function checks whether the needed modules are loaded and decreases the reference counters for them. 
If a reference counter for any appropriate module becomes equal to zero, the function unloads the module.
If no IFC-related modules are loaded, the function returns the eNullPtr error code.

</member>
        <member name="M:odIfcInitialize(System.Boolean,System.Boolean,ModelerType)">
\details 
Initializes IFC SDK functionality.
\param initCDA [in] A flag that determines whether Common Data Access (CDA) functionality should be provided for IFC data.
\param initIfcGeomResource [in] A flag that determines whether geometry resources are initialized as well (if equal to true) or not (if equal to false).
\param modelerType [in] Modeler type which will be used to create geometry.
\returns Returns eOk if IFC SDK was successfully initialized; otherwise, the function returns an appropriate error code.
\remarks 
The function checks whether all needed modules are loaded and loads them if they are not. 
If at least one of the necessary modules is not loaded, the function returns the eNullPtr error code.
It the bInitIfcGeomResource parameter value is equal to false, the IFC geometry library is unavailable, 
therefore the model cannot be visualized. In this mode only data management functionality is available.

</member>
        <member name="T:ModelerType">
\details
Defines available modeler types

</member>
        <member name="T:InitialSchema">
\details
Enumeration for default database content initialization modes.

</member>
        <member name="F:kScmIfc4x3">
Default database content has the Ifc4x3 version.
</member>
        <member name="F:kScmIfc4x2">
Default database content has the Ifc4x2 version.
</member>
        <member name="F:kScmIfc4x1">
Default database content has the Ifc4x1 version.
</member>
        <member name="F:kScmIfc4">
Default database content has the Ifc4 version.
</member>
        <member name="F:kScmIfc2x3">
Default database content has the Ifc2x3 version.
</member>
        <member name="F:kScmUndefined">
Database content is not initialized.
</member>
        <member name="M:OdIfc.Utils.getAllRepresentationContexts(OdIfcFile!System.Runtime.CompilerServices.IsConst*)">
\details
    Collectd OdDAIObjectIds of all IfcGeometricRepresentationContext instances in a model of IFC file.
    \param pIfcFile [in] Pointer to OdIfcFile that keeps IFC model.
    \returnt Returns an array of OdDAIObjectId of all geometric representation contexts of a model.

</member>
        <member name="M:OdIfc.Utils.getDefaultRepresentationContextsSelection(OdIfcFile!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
\details
    Tries to collect OdDAIObjectIds of all IfcGeometricRepresentationContext instances needed to get
    geometrical representation of a model of IFC file.
    \param pIfcFile [in] Pointer to OdIfcFile that keeps IFC model.
    \param onlyBody [in] If true, selects only sub contexts that have identifier "Body".
    \returnt Returns an array of OdDAIObjectId of geometric representation context to get representations from,
      or empty array if nothing was selected by default.

</member>
        <member name="M:OdIfc.Utils.assignGlobalId(OdIfc.OdIfcEntity*)">
\details
    Assigns generated globalId to the attribute 'GlobalId' of entity derived from IfcRoot.
    \param pInst [in] Pointer to the IFC entity instance.
    \returns Returns true is GlobalId assigned successfully, otherwise returns false.

</member>
        <member name="M:OdIfcGUID.generate">
\details
  Generates a new IFC GUID object (pseudo constructor).
  \returns Returns the generated object.

</member>
        <member name="M:OdIfcGUID.isValid">
\details
  Determines whether the IFC GUID value is valid.
  \returns Returns true if the value is valid; otherwise the method returns false.

</member>
        <member name="M:OdIfcGUID.c_str">
\details
  Returns a const pointer to underlying string.

</member>
        <member name="M:OdIfcGUID.op_Implicit~System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*">
\details 
  Converts the IFC GUID object's value to a C++ character array.

</member>
        <member name="M:OdIfcGUID.op_Implicit~System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*">
\details 
  Converts the IFC GUID object's value to a constant C++ character array.

</member>
        <member name="M:OdIfcGUID.op_LessThan(OdIfcGUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Inequality operator for IFC GUID objects.
  \param other [in] Another IFC GUID value to be compared with (right-hand operand.
  \returns Returns true if the IFC GUID object is not equal to another IFC GUID object; otherwise, the method returns false.

</member>
        <member name="M:OdIfcGUID.op_Inequality(OdIfcGUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
  Inequality operator for IFC GUID objects.
  \param other [in] Another IFC GUID value to be compared with (right-hand operand.
  \returns Returns true if the IFC GUID object is not equal to another IFC GUID object; otherwise, the method returns false.

</member>
        <member name="M:OdIfcGUID.op_Equality(OdIfcGUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
  Comparison operator for IFC GUID objects.
  \param other [in] Another IFC GUID value to be compared with (right-hand operand.
  \returns Returns true if the IFC GUID object is equal to another IFC GUID object; otherwise, the method returns false.

</member>
        <member name="M:OdIfcGUID.op_Assign(OdGUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Assignment operator for IFC GUID objects.
  \param other [in] A new GUID value to be assigned.
  \returns Returns a reference to the IFC GUID object modified with the assignment operation.

</member>
        <member name="M:OdIfcGUID.op_Assign(OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
  Assignment operator for IFC GUID objects.
  \param s [in] A new IFC GUID value to be assigned represented as an ANSI string.
  \returns Returns a reference to the IFC GUID object modified with the assignment operation.

</member>
        <member name="M:OdIfcGUID.#ctor(OdGUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Creates a new IFC GUID object with existing OdGUID value.

</member>
        <member name="M:OdIfcGUID.#ctor">
\details
  Creates a new IFC GUID object with default parameters.

</member>
        <member name="T:OdIfcGUID">
\details
A class that implements generating and storing global unique identifiers (GUID) for IFC objects.

</member>
        <member name="M:OdDAIHostModule.isCDAEnabled">
\details 
  Retrieves if CDA is allowed for OdDAI host module.
  \returns Returns true if CDA is enabled.

</member>
        <member name="M:OdDAIHostModule.registerSchemaModule(OdExpSchemaModule*)">
\details
  Register .exprt module.
  \returns Returns eOk if .exprt module was successfully registered.

</member>
        <member name="T:OdDAI.OdSDAIModule">
\details
A class that implements a DAI module for data access.

</member>
        <member name="M:oddaiCloseCurrentSession">
\details
Closes currently opened session.

</member>
        <member name="M:oddaiCreateSession">
\details
Returns a smart pointer to a newly created session, if session wasn't created before.

</member>
        <member name="M:oddaiSession">
\details
Returns a smart pointer to currently opened session.

</member>
        <member name="M:oddaiGetSchema(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
Returns a smart pointer to a schema definition by the name of the schema.
If the schema isn't supported (or isn't registered in schemas dictionary),
NULL will be returned.

</member>
        <member name="M:oddaiUnregisterSchemas">
\details
Unregisters all schema-dependent modules.

</member>
        <member name="M:oddaiUnregisterSchema(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
Unregisters a schema-dependent module.

</member>
        <member name="M:OdDAI.Session.deleteNPL(OdDAI.List&lt;OdDAIObjectId&gt;*)">
\details
    Deletes an instance of Non-Persistent List.

</member>
        <member name="M:OdDAI.Session.createNPL">
\details
    Creates an instance of Non-Persistent List.
    returns

</member>
        <member name="M:OdDAI.Session.deleteRepoRecord(OdSmartPtr&lt;OdDAI.Repository&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Deletes repository record from the session container. 

</member>
        <member name="M:OdDAI.Session.closeRepo(OdSmartPtr&lt;OdDAI.Repository&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Closes an opened repository assigned with this session.
    

</member>
        <member name="M:OdDAI.Session.openRepo(OdSmartPtr&lt;OdDAI.Repository&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\delete
    Opens an unopened repository which exists in the current session. 

</member>
        <member name="M:OdDbBaseHostAppServices.getAppUserName(Oda.UserNameFormat)">
\details
  Returns user name in the requested format

</member>
        <member name="M:OdDbBaseHostAppServices.setEnv(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Set environment variable with new value.

</member>
        <member name="M:OdDbBaseHostAppServices.getEnv(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Get environment variable. If key varName doesn't exist, returns eKeyNotFound.


</member>
        <member name="M:OdDbBaseHostAppServices.brepBuilder(OdBrepBuilder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,BrepType)">
\details
    Initialize brep builder with product specific implementation. Return eNotImplementedYet by default.

    \param brepBuilder [in]  instance of brep builder class.
    \param bbType [in] type of brep.


</member>
        <member name="M:OdDbBaseHostAppServices.numThreads(OdDb.MultiThreadedMode)">
\details
    Returns the number of threads for required multi-threaded mode.

</member>
        <member name="M:OdDbBaseHostAppServices.getMtMode">
\details
    MtMode controls if multi-threading is used (bit-coded) See OdDb::MultiThreadedMode
  <table><b>Value</b><b>Description</b>
   0              Multi-threaded file loading and regeneration are disabled.
   1              Multi-threaded file loading is enabled.
   2              Multi-threaded regeneration is enabled.
   3              Multi-threaded file loading and regeneration are enabled.
  </table></member>
        <member name="M:OdDbBaseHostAppServices.getTempPath">
\details
    Returns the path to the temporary files folder.

</member>
        <member name="M:OdDbBaseHostAppServices.gsBitmapDevice(OdRxObject*,OdRxObject*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
    Returns a the gsBitmapDevice associated with this HostAppServices object.

    \param pViewObj [in]  OdAbstractViewPE compatible object (OdGsView, OdDbViewport or etc.).
    \param pDb [in]  Pointer to the database context.
    \param flags [in]  Bitmap device flags.

</member>
        <member name="M:OdDbBaseHostAppServices.fileDialog(System.Int32,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Prompts the user for a filename, and returns their response.

    \param flags [in]  Dialog behavior.
    \param dialogCaption [in]  Dialog caption.
    \param defExt [in]  Default file extension without "."
    \param defFilename [in]  Default filename.
    \param filter [in]  Filter pattern.

    \remarks
    flags must be one of the following:

    <table>
    Name                  Value   Description
    kGfpForOpen           0       For Open.
    kGfpForSave           1       For Save.
    kGfpOverwritePrompt   2       Enable overwrite prompt displaying when exist file selected for saving.
    </table>

    This function is intended for the selection of filenames via dialog boxes,
    although other methods may be used.

    *  Returns "canceled" if the user cancels the request.
    *  Returns "unsupported" if the application does not support this user input.

    \remarks
    The default implementation of this function does nothing but return "unsupported".

</member>
        <member name="M:OdDbBaseHostAppServices.collectFilePathsInDirectory(OdArray&lt;OdString,OdObjectsAllocator&lt;OdString&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Collects TrueType font paths.

    \param res [out]      Array of full file names of TrueType fonts.
    \param sPath [in]    Array of folders paths with TrueType files.
    \param sFilter [in]  File name filter.

    \sa
    Font Handling

</member>
        <member name="M:OdDbBaseHostAppServices.getSystemFontFolders(OdArray&lt;OdString,OdObjectsAllocator&lt;OdString&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Collects folders with TrueType fonts.

    \param aDirs [out]   Array names of folders.

    \sa
    Font Handling

</member>
        <member name="M:OdDbBaseHostAppServices.getSubstituteFontByChar(OdFont!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt16,OdRxObject*)">
\details
    Returns the typeface name of the TTF font which has the character.

    \param pFont [in]        Current font.
    \param unicodeChar [in]  Current symbol.
    \param pDb [in]          Pointer to the database context.

    \sa
    Font Handling

    \remarks
    The default implementation uses Windows API for getting the font.

</member>
        <member name="M:OdDbBaseHostAppServices.getSubstituteFont(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdFontType)">
\details
    Returns the font to be used when the specified font is not found.

    \param fontName [in]  Font name.
    \param fontType [in]  Font type.

    \remarks
    fontType must be one of the following:

    <table>
    Name                    Value    Description
    kFontTypeUnknown        0        Unknown.
    kFontTypeShx            1        SHX font.
    kFontTypeTrueType       2        TrueType font.
    kFontTypeShape          3        Shape file.
    kFontTypeBig            4        BigFont file.
    </table>

    The default implementation of this function calls getAlternateFontName for
    fonts that are not of type kFontTypeShape or kFontTypeBig. When they are,
    and empty string is returned.

    Client code could override this function to perform custom substitution
    for these types of fonts.

    \sa
    Font Handling

</member>
        <member name="M:OdDbBaseHostAppServices.getPreferableFont(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdFontType)">
\details
    Returns the preferable font name for the specified font name and type.


    \param fontName [in]  Font name.
    \param fontType [in]  Font type.

    \remarks
    This function is called as the first step in the process of resolving a font file.
    The default implementation tries to locate a font mapping file by calling
    getFontMapFileName, and substitutes the font name based on the contents of this
    file.

    fontType must be one of the following:

    <table>
    Name                    Value    Description
    kFontTypeUnknown        0        Unknown.
    kFontTypeShx            1        SHX font.
    kFontTypeTrueType       2        TrueType font.
    kFontTypeShape          3        Shape file.
    kFontTypeBig            4        BigFont file.
    </table>

    \sa
    Font Handling

</member>
        <member name="M:OdDbBaseHostAppServices.getFontMapFileName">
\details
    Returns the name of the font mapping file used by the getPreferableFont function.

    \sa
    Font Handling

    \remarks
    The default implementation of this function does nothing but return an empty string.
    It will be fully implemented in a future release.

</member>
        <member name="M:OdDbBaseHostAppServices.getAlternateFontName">
\details
    Returns the font file to be used when a given font file is
    not found by the ODA Platform.

    \sa
    Font Handling

</member>
        <member name="M:OdDbBaseHostAppServices.ttfFileNameByDescriptor(OdTtfDescriptor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Locates the TTF or TTC file containing the specified font description.

    \param description [in]  Font description.
    \param filename [out]  Receives the name of the TrueType font file.

    \returns
    Returns true and the filename if and only if the font file was found.

    \remarks
    The non-Windows builds of this function do nothing but return.

</member>
        <member name="M:OdDbBaseHostAppServices.auditPrintReport(OdAuditInfo*,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
\details
    Print the audit report for the specified AuditInfo object.

    \param pAuditInfo [in]  Pointer to an OdDbAuditInfo object.
    \param strLine [in]  The string to print.
    \param printDest [in]  Print destination.

    \remarks
    The default implementation of this function does nothing but return.

</member>
        <member name="M:OdDbBaseHostAppServices.newUndoStream">
\details
  Returns an alternate stream object for undo/redo operations.

  \remarks
  The default implementation of this function always returns a null SmartPointer.
  It may return null in the user application. In this case the default memory based stream will be used.
  In fact this stream will be used for the current undo/redo step. Other steps can be controlled by
  OdDbUndoController.

</member>
        <member name="M:OdDbBaseHostAppServices.newUndoController">
\details
    Returns an alternate UndoController object for the ODA Platform.

    \remarks
    The default implementation of this function always returns a null SmartPointer.

    Each database requires at most 2 undo controllers (for undo and redo).

</member>
        <member name="M:OdDbBaseHostAppServices.formatMessage(System.UInt32,BTEllipsis)">
\details
    Returns a formatted message corresponding to the specified error code(s).
    \param errorCode [in]  Error code.

</member>
        <member name="M:OdDbBaseHostAppServices.getErrorDescription(System.UInt32)">
\details
    Returns the error description associated with the specified error code.
    \param errorCode [in]  Error code.

    \remarks
    The default implementation of this function returns formatMessage(errorCode).

</member>
        <member name="M:OdDbBaseHostAppServices.warning(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,OdResult)">
\details
    Displays the specified warning message.

    \param warnVisGroup [in]  Group of warning message visibility (always visible if empty).
    \param warningOb [in]  Warning object.

</member>
        <member name="M:OdDbBaseHostAppServices.warning(OdResult)">
\details
    Displays the specified warning message.

    \param warningOb [in]  Warning object.

</member>
        <member name="M:OdDbBaseHostAppServices.warning(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Displays the specified warning message.

    \param warnVisGroup [in]  Group of warning message visibility (always visible if empty).
    \param message [in]  Warning message.

    \remarks
    This function calls odSystemServices()-&gt;warning(message) to display the warning.

</member>
        <member name="M:OdDbBaseHostAppServices.warning(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Displays the specified warning message.

    \param message [in]  Warning message.

    \remarks
    This function calls odSystemServices()-&gt;warning(message) to display the warning.

</member>
        <member name="M:OdDbBaseHostAppServices.versionString">
\details
    Returns the release version string of the client application.

    \remarks
    The default implementation of this function returns oddbGetLibraryInfo()-&gt;getLibVersion().

</member>
        <member name="M:OdDbBaseHostAppServices.releaseMinorVersion">
\details
    Returns the release minor version of the client application.

    \remarks
    The default implementation of this function returns TD_MINOR_VERSION.

</member>
        <member name="M:OdDbBaseHostAppServices.releaseMajorVersion">
\details
    Returns the release major version of the client application.

    \remarks
    The default implementation of this function returns TD_MAJOR_VERSION.

</member>
        <member name="M:OdDbBaseHostAppServices.releaseMajorMinorString">
\details
    Returns the release major and minor version string of the client application.

    \remarks
    The default implementation of this function returns oddbGetLibraryInfo()-&gt;getLibVersion().

</member>
        <member name="M:OdDbBaseHostAppServices.prodcode">
\details
    Returns the name of the client product code.

    \remarks
    This function is typically used for populating "About" information.

    prodcode() returns one of the following:

    <table>
    Name          Value   Description
    kProd_ACAD    1       Plain
    kProd_LT      2       Lite
    kProd_OEM     3       OEM
    kProd_OdDb    4       ..
    </table>

    \remarks
    The default implementation of this function returns kProd_OEM, and should not be overridden.

</member>
        <member name="M:OdDbBaseHostAppServices.companyName">
\details
    Returns the name of the client company.

    \remarks
    This function is typically used for populating "About" information.

    \remarks
    The default implementation of this function returns oddbGetLibraryInfo()-&gt;getCompanyName().

</member>
        <member name="M:OdDbBaseHostAppServices.product">
\details
    Returns the name of the client product.

    \remarks
    This function is typically used for populating "About" information.

    \remarks
    The default implementation of this function returns program().

</member>
        <member name="M:OdDbBaseHostAppServices.program">
\details
    Returns the name of the client program.

    \remarks
    This function is typically used for populating "About" information.

    \remarks
    The default implementation of this function returns oddbGetLibraryInfo()-&gt;getLibName()

</member>
        <member name="M:OdDbBaseHostAppServices.releaseProgressMeter(OdDbHostAppProgressMeter*)">
\details
    Notification function called whenever the specified ProgressMeter object is no longer needed.

    \param pProgressMeter [in]  Pointer to the ProgressMeter object no longer needed.

    \remarks
    The default implementation of this function does nothing but return.

</member>
        <member name="M:OdDbBaseHostAppServices.newProgressMeter">
\details
    Returns an instance of an OdDbHostAppProgressMeter.

</member>
        <member name="M:OdDbBaseHostAppServices.findFile(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxObject*,OdDbBaseHostAppServices.FindFileHint)">
\details
    Returns the fully qualified path to the specified file.

    \param filename [in]  Name of the file to find.
    \param pDb [in]  Pointer to the database context.
    \param hint [in]  Hint that indicates the type of file that is required.

    \returns
    Returns an empty string if the file is not found.

    This function is called by the ODA Platform when the database needs access to a
    file, such as a font file, a template file, etc.

    pDb == 0 specifies that this file search is not related to a database.

    If pDb != 0, call pDb-&gt;getFilename() to determine the path to the DWG
    file associated with the database.

    The typical search order is as follows:

    1.  The filename itself.
    2.  The current directory.
    3.  The drawing directory (for shx font, image, and xref files).
    4.  The directories listed in the ACAD environment variable.
    5.  The Windows fonts directory (only for TTF fonts on Windows).

    hint must be one of the following:

    <table>
    Name                    Value     Description Extension
    kDefault                0         Any file.                         any
    kFontFile               1         Can be either SHX or TTF file.    SHX or TTF
    kCompiledShapeFile      2         SHX file.                         SHX
    kTrueTypeFontFile       3         TTF file.                         TTF
    kEmbeddedImageFile      4         Image file.                       ISM
    kXRefDrawing            5         Drawing template file.            DWT
    kPatternFile            6         Pattern file (PAT)                PAT
    kTXApplication          7         ODA Xtension file.            TX
    kFontMapFile            8         FontMap file                      FMP
    kUnderlayFile           9         Underlay file
    kTextureMapFile        10
    </table>

    \remarks
    The client application can, in fact return any non-null string, so long as
    the application can handle that string in OdDbSystemServices::createFile.

</member>
        <member name="D:OdDbUndoControllerPtr">
\details
  This template class is a specialization of the OdSmartPtr class for OdDbUndoController object pointers.

</member>
        <member name="M:OdBrepBuilder.setFaceColor(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdCmEntityColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Sets face color.
  Return eNotApplicable if not supported in implementation or face color is part of material.

</member>
        <member name="M:OdBrepBuilder.setEdgeColor(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdCmEntityColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Sets edge color.
  Return value:
    eNotApplicable if setEdgeColor not supported in implementation.
    eInvalidInput if color method not supported in implementation.

</member>
        <member name="M:OdBrepBuilder.setFaceMaterialMapping(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGiMapper!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Sets material mapping for face.
  Return eNotApplicable if not supported in implementation or material mapping is part of material.

</member>
        <member name="M:OdBrepBuilder.addCoedge(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdBrepBuilder.EntityDirection,OdGeCurve2d!System.Runtime.CompilerServices.IsConst*)">
\details
    Add a co-edge associated to a previously added edge. 
    A co-edge represents the use of an edge on one of the edge's faces.

    \remarks:
    OdError(eInvalidInput) exception will be thrown if type of parametric curve(pParCur) is not supported by BrepBuilder implementation.

</member>
        <member name="M:OdGeCurve3d.convertTo2d(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
\details
    Returns pointer to 2d variant of the curve (z-coordinate will be ignored).
    
    \param tol [in]  Tolerance used in case of interpolation.
    \param sameParametrization [in]  Necessity of parametrization preserving during conversion.

    \remarks
    If it is possible, then curve will be converted analytically (i.e. 3d line segment becomes 2d line segment, etc), otherwise it will be projected onto XY-plane.

</member>
        <member name="M:OdGeCurve3d.appendSamplePoints(OdGeInterval!System.Runtime.CompilerServices.IsConst*,System.Double,OdArray&lt;OdGePoint3d,OdMemoryAllocator&lt;OdGePoint3d&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdArray&lt;System.Double,OdMemoryAllocator&lt;System.Double&gt;&gt;*)">
\details
    Appends sample points along this curve and their parameter values to the specified arrays.

    \param paramInterval [in]  Pointer to the parametric interval.
    \param approxEps [in]  Approximate spacing along a curve.
    \param pointArray [out]  Receives an array of sample points.
    \param pParamArray [out]  Receives an array of parameters at each point.

    \remarks
    If paramInterval is null, the current curve interval will be used.

</member>
        <member name="M:OdGeCurve3d.appendSamplePoints(System.Int32,OdArray&lt;OdGePoint3d,OdMemoryAllocator&lt;OdGePoint3d&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdArray&lt;System.Double,OdMemoryAllocator&lt;System.Double&gt;&gt;*)">
\details
    Appends sample points along this curve and their parameter values to the specified arrays.

    \param numSample [in]  Number of samples.
    \param pointArray [out]  Receives an array of sample points.
    \param pParamArray [out]  Receives an array of parameters at each point.

</member>
        <member name="M:OdGeCurve3d.getSamplePoints(OdGeInterval!System.Runtime.CompilerServices.IsConst*,System.Double,OdArray&lt;OdGePoint3d,OdMemoryAllocator&lt;OdGePoint3d&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdArray&lt;System.Double,OdMemoryAllocator&lt;System.Double&gt;&gt;*)">
\details
    Returns sample points along this curve and their parameter values in the specified arrays.
    Not implemented for third-party use only.

    \param paramInterval [in]  Pointer to the parametric interval.

    \remarks
    If paramInterval is null, the current curve interval will be used.

</member>
        <member name="M:OdGeCurve3d.getSamplePoints(System.Double,System.Double,System.Double,OdArray&lt;OdGePoint3d,OdMemoryAllocator&lt;OdGePoint3d&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdArray&lt;System.Double,OdMemoryAllocator&lt;System.Double&gt;&gt;*)">
\details
    Returns sample points along this curve and their parameter values in the specified arrays.
    Not implemented for third-party use only.

</member>
        <member name="M:OdGeCurve3d.op_Assign(OdGeCurve3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
    \details The assignment operator for the OdGeCurve3d class.
    \param curve [in]  Input 3D curve.

    \remarks
    Assigns input 3D curve to this curve.

</member>
        <member name="M:OdGeCurve3d.getSamplePoints(System.Int32,OdArray&lt;OdGePoint3d,OdMemoryAllocator&lt;OdGePoint3d&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdArray&lt;System.Double,OdMemoryAllocator&lt;System.Double&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns sample points along this curve and their parameter values in the specified arrays.

    \param numSample [in]  Number of samples.
    \param pointArray [out]  Receives an array of sample points.
    \param paramArray [out]  Receives an array of parameters at each point.

</member>
        <member name="M:OdGeCurve3d.getSamplePoints(System.Int32,OdArray&lt;OdGePoint3d,OdMemoryAllocator&lt;OdGePoint3d&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns sample points along this curve and their parameter values in the specified arrays.

    \param numSample [in]  Number of samples.
    \param pointArray [out]  Receives an array of sample points.


</member>
        <member name="M:OdGeCurve3d.getSamplePoints(System.Double,System.Double,System.Double,OdArray&lt;OdGePoint3d,OdMemoryAllocator&lt;OdGePoint3d&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdArray&lt;System.Double,OdMemoryAllocator&lt;System.Double&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
\details
    Returns sample points along this curve and their parameter values in the specified arrays.

    \param fromParam [in]  Starting parameter value.
    \param toParam [in]  Ending parameter value.
    \param approxEps [in]  Approximate spacing along a curve.
    \param pointArray [out]  Receives an array of sample points.
    \param paramArray [out]  Receives an array of parameters at each point.
    \param forceResampling [in]  sample points are forced to be regenerated.

</member>
        <member name="M:OdGeCurve3d.evalPoint(System.Double,System.Int32,OdArray&lt;OdGeVector3d,OdMemoryAllocator&lt;OdGeVector3d&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the point on this curve corresponding to the specified parameter value,
    and the derivatives at that point.

    \param param [in]  Parameter to be evaluated.
    \param numDeriv [in]  Number of derivatives to be computed.
    \param derivatives [out]  Receives an array of derivatives at the point corresponding to param.

</member>
        <member name="M:OdGeCurve3d.evalPoint(System.Double)">
\details
    Returns the point on this curve corresponding to the specified parameter value.

    \param param [in]  Parameter to be evaluated.

</member>
        <member name="M:OdGeCurve3d.midPoint(System.Double)">
\details 
    Calculates a point from the curve interval that corresponds to the specified coefficient.
  
    \param coef [in] Coefficient from the interval [0; 1].
    \returns Point from the curve interval that corresponds to the coefficient parameter.

    \remarks
    The value of the coef variable must be within [0; 1], where 
    * 0 is the beginning of the curve interval, 
    * 0.5 is the middle of the curve interval, 
    * 1 is the end of the curve interval. 
    Otherwise, an exception eNotApplicable will be thrown.

    \remarks
    The curve must have a bounded interval otherwise, an exception 
    eCurveEndsMissed will be thrown.  

</member>
        <member name="M:OdGeCurve3d.hasMidPoint(OdGePoint3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
\details 
    Checks the boundaries of the curve interval and calculates a point from the curve interval that corresponds to the specified coefficient.

    \param point [out] Receives the point from the curve interval that corresponds to the coefficient.
    \param coef   [in] Coefficient from the interval [0; 1]. 
    \returns true if and only if the parametric interval of the curve is 
      bounded and the value of the coef variable lies within [0; 1].

    \remarks
    The value of the coef variable must be within [0; 1], where 
    * 0 is the beginning of the curve interval, 
    * 0.5 is the middle of the curve interval, 
    * 1 is the end of the curve interval.

</member>
        <member name="M:OdGeCurve3d.hasEndPoint(OdGePoint3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true, and the end point,  if and only if the parametric interval of this curve has an upper bound.

    \param endPoint [out]  Receives the end point.

</member>
        <member name="M:OdGeCurve3d.hasStartPoint(OdGePoint3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true, and the start point, if and only if the parametric interval of this curve has a lower bound.

    \param startPoint [out]  Receives the start point.

</member>
        <member name="M:OdGeCurve3d.getLocalClosestPoints(OdGeCurve3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePointOnCurve3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePointOnCurve3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeInterval!System.Runtime.CompilerServices.IsConst*,OdGeInterval!System.Runtime.CompilerServices.IsConst*,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the point on this curve locally closest to the specified curve, 
    and the point on the other curve locally closest to this curve.

    \param curve [in]  Any 3D curve.
    \param approxPntOnThisCrv [in/out] Approximate point on this curve.
    \param approxPntOnOtherCrv [in/out] Approximate point on other curve.
    \param pInterval1 [in] Pointer to the interval in which the point on this curve must lie.
    \param pInterval2 [in] Pointer to the interval in which the point on the other curve must lie.
    \param tol [in] Geometric tolerance.

</member>
        <member name="M:OdGeCurve3d.getLocalClosestPoints(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePointOnCurve3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeInterval!System.Runtime.CompilerServices.IsConst*,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the point on this curve locally closest to the specified point.

    \param point [in]  Any 3D point.
    \param approxPntOnThisCrv [in/out] Approximate point on this curve.
    \param pInterval1 [in] Pointer to the interval in which the point on this curve must lie.
    \param tol [in] Geometric tolerance.

</member>
        <member name="M:OdGeCurve3d.explode(OdArray&lt;OdSharedPtr&lt;OdGeCurve3d&gt;,OdObjectsAllocator&lt;OdSharedPtr&lt;OdGeCurve3d&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdArray&lt;System.Int32,OdMemoryAllocator&lt;System.Int32&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeInterval!System.Runtime.CompilerServices.IsConst*)">
\details
    Explodes this curve over the specified interval.

    \param explodedCurves [out]  Receives an array of pointers to the subcurves from the explosion.
    \param newExplodedCurves [out]  Receives an array of flags which, if true, correspond to those explodedCurves the caller must delete.
    \param pInterval [in]  Pointer to the interval to be exploded. Defaults to entire curve.

    \remarks
    The original curve is not changed.

</member>
        <member name="M:OdGeCurve3d.getSplitCurves(System.Double,OdGeCurve3d**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeCurve3d**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns pointers to the two curves that result from splitting this curve at the point corresponding 
    to param.

    \param param [in]  The parameter value corresponding to the split point.
    \param piece1 [out]  Receives a pointer to the first curve.
    \param piece2 [out]  Receives a pointer to the second curve.

    \remarks
    If param corresponds to a point not on this curve,
    or to the start point or end point of this curve,
    piece1 and piece2 are set to NULL.

    The curves pointed to by piece1 and piece2 
    are created with the new command, and must be deleted by the caller. 

</member>
        <member name="M:OdGeCurve3d.isDegenerate(OdGeEntity3d**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if this curve degenerates, and returns
    the entity to which this curve degenerates.

    \param pConvertedEntity [out]  Receives a pointer to the object to which this curve degenerates.
    \param tol [in]  Geometric tolerance.

    \remarks
    If isDegenerate returns true, the returned object was created with the new operator, and it is the responsibility of the caller to delete it.

</member>
        <member name="M:OdGeCurve3d.isDegenerate(OdGe.EntityId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if this curve degenerates, and returns
    the type of entity to which this curve degenerates.

    \param degenerateType [out]  Receives the type of curve to which this curve degenerates.
    \param tol [in]  Geometric tolerance.

    \remarks
    If isDegenerate returns true, the returned object was created with the new operator, and it is the responsibility of the caller to delete it.

</member>
        <member name="M:OdGeCurve3d.area(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Determines the area of this curve between the specified parameters. 
    Returns true (and a value) if and only if this curve is planar. 

    \param startParam [in]  Starting parameter value.
    \param endParam [in]  Ending parameter value.
    \param value [out]  Receives the area.
    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeCurve3d.paramAtLength(System.Double,System.Double,System.Boolean,System.Double)">
\details
    Returns the parameter of the point a specified distance 
    from the starting point corresponding to datumParam.

    \param datumParam [in]  Parameter corresponding to the start point.
    \param length [in]  Distance along curve from the start point.
    \param posParamDir [in]  True if and only if returned parameter is to be greater than dataParam.
    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeCurve3d.length(System.Double)">
\details
    Returns the length of this curve.

    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeCurve3d.length(System.Double,System.Double,System.Double)">
\details
    Returns the length of this curve over the specified parameter range.

    \param fromParam [in]  Starting parameter value.
    \param toParam [in]  Ending parameter value.
    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeCurve3d.isPeriodic(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if this curve is periodic for the specified period.

    \param period [out]  Receives the period of this curve. 

</member>
        <member name="M:OdGeCurve3d.isCoplanarWith(OdGeCurve3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePlane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns True if the specified curve entity is coplanar with 
    this curve and returns the common plane.

    \param curve [in]  Any 3D curve.
    \param plane [out]  Receives the plane of the curves.
    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeCurve3d.isLinear(OdGeLine3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true, and a linear entity coincident with this curve,
    if and only if this curve is linear.

    \param line [out]  Receives the line coincident with this curve.
    \param tol [in]  Geometric tolerance.

    \remarks
    An infinite line is returned, even if this curve is bounded.
    
    \remarks
    As implemented, this function does nothing but
    return false.
    It will be fully implemented in a future release.
    

</member>
        <member name="M:OdGeCurve3d.isPlanar(OdGePlane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if this curve is planar, and returns
    the plane of this curve.

    \param plane [out]  Receives the plane of this curve.
    \param tol [in]  Geometric tolerance.

    \remarks
    Lines are considered planar the returned plane is an
    arbitrary plane containing the line.

</member>
        <member name="M:OdGeCurve3d.isClosed(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if this curve is closed within the specified tolerance.

    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeCurve3d.getTrimmedOffset(System.Double,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdArray&lt;OdSharedPtr&lt;OdGeCurve3d&gt;,OdObjectsAllocator&lt;OdSharedPtr&lt;OdGeCurve3d&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.OffsetCrvExtType,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns one or more trimmed offset curves.

    \param distance [in]  Offset distance.
    \param planeNormal [in]  A normal to the plane of this curve.
    \param offsetCurveList [out]  Receives an array of trimmed offset curves.
    \param extensionType [in]  How curves will be extended at discontinuities of type C1.
    \param tol [in]  Geometric tolerance.

    \remarks
    The offsets are trimmed to eliminate self-intersecting loops.

    The curve is assumed to be planar, and planeNomal is assumed to be 
    normal to the curve plane.

    the direction of positive offset at any point on this curve
    is the cross product of planeNormal and the tangent to the
    curve at that point.

    The new operator is used to create the curves returned by 
    offsetCurveList. It is up to the caller to delete these curves.

    \remarks
    Currently not implemented. 

    Throws:
    <table>
    Exception    
    eNotImplemented
    </table></member>
        <member name="M:OdGeCurve3d.paramOf(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeInterval!System.Runtime.CompilerServices.IsConst*,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the parameter value of a point.

    \param point [in]  Point to be evaluated.
    \param range [in]  Interval on curve.
    \param tol [in]  Geometric tolerance.

    \remarks
    The returned parameters specify a point within tol of point.
    If point is not on this curve, end or start of interval will be setted.
    In case of uvBox == NULL paramOf(point, rng, tol) is called in which rng - native range of curve.
    If you are not sure the point is on this curve, use
    isOn () instead of this function.

</member>
        <member name="M:OdGeCurve3d.paramOf(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the parameter value of a point.

    \param point [in]  Point to be evaluated.
    \param tol [in]  Geometric tolerance.

    \remarks
    The returned parameters specify a point within tol of point.
    If point is not on this curve, the results are unpredictable.
    If you are not sure the point is on this curve, use 
    isOn () instead of this function.

    \remarks
    If projection of the point does not lie in range-interval, the closest bound of the interval is returned.
    In case of uvBox == NULL paramOf(point, tol) is called.

</member>
        <member name="M:OdGeCurve3d.isOn(System.Double,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Determines if an input parameter value is within a valid parametric range of the curve.
    \param param    [in]  Input parameter value.
    \param tol      [in]  Geometric tolerance.
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve3d.isOn(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
     Determines if a point lies on a curve.
     \param point [in]  Input point.
     \param param [out]  Output parameter value of point if the point lies on the curve.
     \param tol   [in]  Geometric tolerance.
     \remarks
     By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve3d.orthoProject(OdGePlane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
     Returns the entity that is the orthogonal projection of the curve onto the projection plane.
     \param projectionPlane  [in]  Plane on which the curve is to be projected.
     \param tol              [in]  Geometric tolerance.
     \remarks
     The returned entity can be a different type than the original curve and can even not be a curve.
     \remarks
     By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve3d.project(OdGePlane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
     Returns the entity that is the projection of the curve onto the projection plane in the specified direction.
     \param projectionPlane  [in]  Plane on which the curve is to be projected.
     \param projectDirection [in]  Direction in which the curve is to be projected.
     \param tol              [in]  Geometric tolerance.
     \remarks
     The projectDirection vector must not be parallel to the projection plane.
     \remarks
     The returned entity can be a different type than the original curve and can even not be a curve.
     \remarks
     By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve3d.getGeomExtents(OdGeInterval!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeMatrix3d!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns bounding box of the whole curve or a part of it.
    The box is axis-aligned in the specified local coordinate system.
    It is guaranteed to enclose the curve, but not guaranteed to be tight/minimal.

    \param range [in]  The part of the curve to be bounded.
    \param coordSystem [in]  The local coordinate system in which box extents are computed.

    \remarks
    If range is unbounded (e.g. by default), then bounding box of the whole curve (which range can be
    obtained by getInterval method) is computed. Otherwise bounding box is computed only for the set of
    points with parameter in the specified range.
    If coordSystem is NULL (e.g. by default), then bounding box is aligned with global coordinate axes.
    Otherwise, the box will be axis-aligned in the local coordinate system specified by coordSystem matrix.

</member>
        <member name="M:OdGeCurve3d.orthoBoundBlock">
\details
    Returns the bounding box whose edges are aligned with the coordinate axes.

    \param range [in]  Interval of this curve to be bounded.

</member>
        <member name="M:OdGeCurve3d.boundBlock(OdGeInterval!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the oriented bounding box of curve.

    \param range [in]  Sub-interval of this curve to be bounded.

    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

    Throws:
    <table>
    Exception    
    eNotImplemented
    </table></member>
        <member name="M:OdGeCurve3d.boundBlock">
\details
    Returns the oriented bounding box of curve.

    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

    Throws:
    <table>
    Exception    
    eNotImplemented
    </table></member>
        <member name="M:OdGeCurve3d.getNormalPoint(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePointOnCurve3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true, and the point on this curve whose normal vector passes through the specified point,
    if and only if a normal point was found.

    \param point [in]  Any 3D point.
    \param pntOnCrv [out]  Receives the normal point.
    \param tol [in]  Geometric tolerance.

    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

    Throws:
    <table>
    Exception    
    eNotImplemented
    </table></member>
        <member name="M:OdGeCurve3d.getProjClosestPointTo(OdGeCurve3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePointOnCurve3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePointOnCurve3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the point on this curve closest to the specified curve, 
    and the point on the other curve closest to this curve, when this curve
    is projected in the specified direction.

    \param curve [in]  Any 3D curve.
    \param projectDirection [in]  Projection Direction.
    \param pntOnThisCrv [out]  Receives the closest point on this curve.
    \param pntOnOtherCrv [out]  Receives the closest point on other curve.
    \param tol [in]  Geometric tolerance.
   
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

    Throws:
    <table>
    Exception    
    eNotImplemented
    </table></member>
        <member name="M:OdGeCurve3d.getProjClosestPointTo(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePointOnCurve3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the point on this curve closest to the specified point when this curve
    is projected in the specified direction.

    \param point [in]  Any 3D point.
    \param projectDirection [in]  Projection Direction.
    \param pntOnCrv [out]  Receives the closest point on this curve.
    \param tol [in]  Geometric tolerance.
   
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

    Throws:
    <table>
    Exception    
    eNotImplemented
    </table></member>
        <member name="M:OdGeCurve3d.projClosestPointTo(OdGeCurve3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the point on this curve closest to the specified curve, 
    and the point on the other curve closest to this curve, when this curve
    is projected in the specified direction.

    \param curve [in]  Any 3D curve.
    \param projectDirection [in]  Projection Direction.
    \param pntOnOtherCrv [out]  Receives the closest point on other curve.
    \param tol [in]  Geometric tolerance.
   
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

    Throws:
    <table>
    Exception    
    eNotImplemented
    </table></member>
        <member name="M:OdGeCurve3d.projClosestPointTo(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the point on this curve closest to the specified point when this curve
    is projected in the specified direction.

    \param point [in]  Any 3D point.
    \param projectDirection [in]  Projection Direction.
    \param tol [in]  Geometric tolerance.
   
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

    Throws:
    <table>
    Exception    
    eNotImplemented
    </table></member>
        <member name="M:OdGeCurve3d.getClosestPointTo(OdGeCurve3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePointOnCurve3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePointOnCurve3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the point on this curve closest to the specified curve, 
    and the point on the other curve closest to this curve.

    \param curve [in]  Any 3D curve.
    \param pntOnThisCrv [out]  Receives the closest point on this curve.
    \param pntOnOtherCrv [out]  Receives the closest point on other curve.
    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeCurve3d.getClosestPointTo(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePointOnCurve3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the point on this curve closest to the specified point.

    \param point [in]  Any 3D point.
    \param pntOnCrv [out]  Receives the closest point on this curve.
    \param tol [in]  Geometric tolerance.

    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve3d.closestPointTo(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeInterval!System.Runtime.CompilerServices.IsConst*,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the point on this curve closest to the specified point.

    \param point [in]  Any 3D point.
    \param param [out]  uv-coord of closest point.
    \param range [in]  interval of closest point.
    \param tol [in]  Geometric tolerance.

    \remarks
    Native interval is not considered.
    If projection of the point does not lie in range-interval, the closest bound of the interval is returned.
    In case of uvBox == NULL closestPointTo(point, range, tol) is called where range is a native curves interval.
    An unbounded interval should not be used here.

</member>
        <member name="M:OdGeCurve3d.closestPointTo(OdGeCurve3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the point on this curve closest to the specified curve, and the point
    on the other curve closest to this curve.

    \param curve [in]  Any 3D curve.
    \param pntOnOtherCrv [out]  Receives the closest point on other curve.
    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeCurve3d.closestPointTo(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the point on this curve closest to the specified point.

    \param point [in]  Any 3D point.
    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeCurve3d.distanceTo(OdGeCurve3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the distance to the point on this curve closest to the specified curve.

    \param curve [in]  Any 3D curve.
    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeCurve3d.distanceTo(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the distance to the point on this curve closest to the specified point.

    \param point [in]  Any 3D point.
    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeCurve3d.setInterval">
\details
    Sets the parametric interval of this curve.

    \param interval [in]  Parametric interval of this curve
    
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

    Throws:
    <table>
    Exception    
    eNotImplemented
    </table></member>
        <member name="M:OdGeCurve3d.reverseParam">
\details
    Reverses the parameter direction this curve.   

    \remarks
    The point set of this curve is unchanged.

    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

    Throws:
    <table>
    Exception    
    eNotImplemented
    </table></member>
        <member name="M:OdGeCurve3d.getInterval(OdGeInterval*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the parametric interval of this curve.

    \param interval [out]  Receives the parametric interval of this curve.

    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve3d.getInterval(OdGeInterval*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the parametric interval of this curve.

    \param interval [out]  Receives the parametric interval of this curve.

    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="D:OdGeVector3dArray">
\details
    This template class is a specialization of the OdArray class template for 3D vectors.

</member>
        <member name="M:OdDbHostAppProgressMeter.setLimit(System.Int32)">
\details
    Notification function called to specify the maximum number of times this
    ProgressMeter object will be incremented.

    \param max [in]  Maximum meterProgress calls.

</member>
        <member name="M:OdDbHostAppProgressMeter.meterProgress">
\details
    Notification function called to increment this ProgressMeter object.

    \remarks
    The completion percentage may be calculated by dividing the number of times
    this function is called by the value set by setLimit.

    \remarks
    Throwing an exception indicates that the operation associated with this ProgressMeter object
    should be halted.

</member>
        <member name="M:OdDbHostAppProgressMeter.stop">
\details
    Notification function called to terminate this ProgressMeter object.

</member>
        <member name="M:OdDbHostAppProgressMeter.start(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Notification function called to initialize this ProgressMeter object.
    \param displayString [in]  String to be displayed.

</member>
        <member name="M:OdDbHostAppProgressMeter.Dispose">
\details
    Virtual destructor.

</member>
        <member name="D:OdDbBaseMaterialPEPtr">
\details
  This template class is a specialization of the OdSmartPtr class for OdDbBaseMaterialPE object pointers.

</member>
        <member name="M:OdDbBaseMaterialPE.isDefault(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Determines whether a material object is internal.
    
    \param obj [in]  A pointer to a material object.
  
    \returns Returns true if the material object has been marked as internal, otherwise returns false.

</member>
        <member name="M:OdDbBaseMaterialPE.name(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the name of a specified material object.

    \param obj [in]  A pointer to a material object.

</member>
        <member name="D:OdDbBaseHatchPEPtr">
\details
This template class is a specialization of the OdSmartPtr class for OdDbHatchPE object pointers.

</member>
        <member name="M:OdDbBaseHatchPE.isReallyHatch(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Determines whether a specified hatch is a real hatch.
    
    \param pHatch     [in]  A pointer to a hatch object.
    
    \returns Returns true if a hatch is a real hatch, otherwise returns false.
    
    \remarks
    For .dwg functionality a hatch is always a hatch protocol extension, but for .dgn functionality a hatch protocol extension can be added to any entity.

</member>
        <member name="M:OdDbBaseHatchPE.isSolidFill(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Determines whether a specified hatch is a solid hatch.
    
    \param pHatch     [in]  A pointer to a hatch object.
    
    \returns Returns true if a hatch is a solid hatch, otherwise returns false.

</member>
        <member name="M:OdDbBaseHatchPE.isGradient(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Determines whether a specified hatch is a gradient hatch.
    
    \param pHatch     [in]  A pointer to a hatch object.
    
    \returns Returns true if a hatch is a gradient hatch, otherwise returns false.

</member>
        <member name="M:OdDbBaseHatchPE.hatchStyle(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Returns the style of a specified hatch.
    
    \param pHatch     [in]  A pointer to a hatch object.

</member>
        <member name="M:OdDbBaseHatchPE.getLoopAt(OdRxObject!System.Runtime.CompilerServices.IsConst*,System.Int32,OdArray&lt;OdGePoint2d,OdMemoryAllocator&lt;OdGePoint2d&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdArray&lt;System.Double,OdMemoryAllocator&lt;System.Double&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Returns curves of a loop, determined by its index, in a specified hatch.
    
    \param pHatch     [in]  A pointer to a hatch object.
    \param loopIndex  [in]  An index of a hatch loop.
    \param edgePtrs   [out] A reference to an OdGeCurve2d object array to store information about the curves that form the loop.

</member>
        <member name="M:OdDbBaseHatchPE.getLoopAt(OdRxObject!System.Runtime.CompilerServices.IsConst*,System.Int32,OdArray&lt;OdGeCurve2d**,OdObjectsAllocator&lt;OdGeCurve2d**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Returns curves of a loop, determined by its index, in a specified hatch.
    
    \param pHatch     [in]  A pointer to a hatch object.
    \param loopIndex  [in]  An index of a hatch loop.
    \param edgePtrs   [out] A reference to an OdGeCurve2d object array to store information about the curves that form the loop.

</member>
        <member name="M:OdDbBaseHatchPE.loopTypeAt(OdRxObject!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\details 
    Returns the type of loop, determined by its index, in a specified hatch.
    
    \param pHatch     [in] A pointer to a hatch object.
    \param loopIndex  [in] An index of a hatch loop.

</member>
        <member name="M:OdDbBaseHatchPE.numLoops(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Returns the quantity of loops in a specified hatch.
    
    \param pHatch [in] A pointer to a hatch object.

</member>
        <member name="T:OdDbBaseHatchPE.HatchLoopType">
\details 
    Determines types of hatch loops.

</member>
        <member name="T:OdDbBaseHatchPE.HatchStyle">
\details 
    Determines hatch style values.

</member>
        <member name="D:OdDbBaseLongTransactionPEPtr">
\details
  This template class is a specialization of the OdSmartPtr class for OdDbBaseLongTransactionPE object pointers.

</member>
        <member name="M:OdDbBaseLongTransactionPE.newWorkSetIterator(OdRxObject!System.Runtime.CompilerServices.IsConst*,System.Boolean,System.Boolean)">
\details 
    Creates an iterator for a specified long transaction workset.
    
    \param pLT          [in] A pointer to a long transaction object.
    \param incRemoved   [in] A flag that determines whether the iterator includes removed objects (if equal to true).
    \param incSecondary [in] A flag that determines whether the iterator includes secondary objects (if equal to true).

</member>
        <member name="M:OdDbBaseLongTransactionPE.workSetHas(OdRxObject!System.Runtime.CompilerServices.IsConst*,OdDbStub*)">
\details 
    Determines whether a specified long transaction object contains a specified object in its workset.
    
    \param pLT [in] A pointer to a long transaction object.
    \param pId [in] A pointer to an identifier of an object.
    
    \returns Returns true if the long transaction workset contains the object specified with the identifier pId parameter. Otherwise returns false.

</member>
        <member name="M:OdDbBaseLongTransactionPE.getDatabase(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Returns a pointer to the database, to which a specified long transaction object belongs.
    
    \param pLT [in] A pointer to a long transaction object.

</member>
        <member name="M:OdDbBaseLongTransactionPE.destinationBlock(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Returns a pointer to the identifier of a block where entities have been copied.
    
    \param pLT [in] A pointer to a long transaction object.

</member>
        <member name="D:OdDbBaseSortEntsPEPtr">
\details
  This template class is a specialization of the OdSmartPtr class for OdDbBaseSortEntsPE object pointers.

</member>
        <member name="M:OdDbBaseSortEntsPE.blockId(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Returns a pointer to the identifier of a specified sorted entity protocol extension instance.
    
    \param pSortents [in] A pointer to a sorted entity protocol extension instance.

</member>
        <member name="D:OdDbBaseBlockRefPEPtr">
\details
  This template class is a specialization of the OdSmartPtr class for OdDbBaseBlockRefPE object pointers.

</member>
        <member name="M:OdDbBaseBlockRefPE.isSelfReferential(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
  Returns whether create child entity node if entity is self dependent.

  \param pEntity [in] A pointer to a entity.

  \returns Returns true if it is possible to create child entity node if entity is self dependent, 
  \otherwise returns false.

</member>
        <member name="M:OdDbBaseBlockRefPE.isBasic(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Returns whether a specified block reference is a basic one.
    
    \param pBlockRef [in] A pointer to a block reference.
    
    \returns Returns true if the block reference is a basic one, otherwise returns false.

</member>
        <member name="M:OdDbBaseBlockRefPE.isMInsert(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Returns whether a specified block reference is an array of block references (an instance of the OdMInsertBlock class).
    
    \param pBlockRef [in] A pointer to a block reference.
    
    \returns Returns true if the block reference is an array of block references, otherwise returns false.

</member>
        <member name="M:OdDbBaseBlockRefPE.isGeneric(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Returns whether a specified block reference is generic.
    
    \param pBlockRef [in] A pointer to a block reference.
    
    \returns Returns true if the block reference is a generic one, otherwise returns false.
    
    \remarks 
    Gs system will not process a drawable as a block reference if this method returns false. 
    Therefore the method can be used to filter out incompatible entities inherited from the OdDbBaseBlockRef class.

</member>
        <member name="M:OdDbBaseBlockRefPE.isAttribute(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Returns whether a specified object is an attribute.
    
    \param pAttrib [in] A pointer to an object.

</member>
        <member name="M:OdDbBaseBlockRefPE.newAttribIterator(OdRxObject!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
\details 
    Returns the newly created attribute iterator for a specified block reference.
    
    \param pBlockRef    [in] A pointer to a block reference.
    \param bSkipErased  [in] A flag that determines whether erased elements should be skipped when moving through the iterator. If the parameter value is equal to true, erased elements are skipped.

</member>
        <member name="M:OdDbBaseBlockRefPE.blockTransform(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Returns the transformation matrix for a specified block reference. 
    
    \param pBlockRef [in] A pointer to a block reference.

</member>
        <member name="M:OdDbBaseBlockRefPE.blockId(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Returns the identifier of a specified block reference. 
    
    \param pBlockRef [in] A pointer to a block reference.

</member>
        <member name="D:OdDbBaseBlockPEPtr">
\details
  This template class is a specialization of the OdSmartPtr class for OdDbBaseBlockPE object pointers.

</member>
        <member name="M:OdDbBaseBlockPE.getName(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the name of block.

    \param pBlock [in] A pointer to a block.

</member>
        <member name="M:OdDbBaseBlockPE.isAnonymous(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns true if and only if block is an anonymous block.

    \param pBlock [in] A pointer to a block.

</member>
        <member name="M:OdDbBaseBlockPE.getLayoutId(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Returns a specified block's layout identifier.
    
    \param pBlock [in] A pointer to a block.

</member>
        <member name="M:OdDbBaseBlockPE.xrefDatabase(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Returns a referenced database for a specified block.
    
    \param pBlock [in] A pointer to a block.

</member>
        <member name="M:OdDbBaseBlockPE.isFromExternalReference(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Determines whether a specified block is an external reference.
    
    \param pBlock [in] A pointer to a block.
    
    \returns Returns true if the block is an external reference, otherwise returns false.

</member>
        <member name="M:OdDbBaseBlockPE.isBlockReferenceAdded(OdRxObject*)">
\details 
    Determines whether a block reference has been added to a specified block.
    
    \param pBlock [in] A pointer to a block.
    
    \returns Returns true if a block reference has been added, otherwise returns false.

</member>
        <member name="D:OdDbSetBasePlotSettingsPEPtr">
\details
  This template class is a specialization of the OdSmartPtr class for OdDbSetBasePlotSettingsPE object pointers.

</member>
        <member name="M:OdDbSetBasePlotSettingsPE.setScaleFactor(OdRxObject*,System.Double)">
\details
    Sets the scale factor, as a floating point value, for the specified PlotSettings object.
    
    \param pPlotSettings [in]  Pointer to the PlotSettings object.
    \param dScaleFactor [in]  Scale factor.

</member>
        <member name="M:OdDbSetBasePlotSettingsPE.setStdScaleType(OdRxObject*,OdDbBaseLayoutPE.StdScaleType)">
\details
    Sets the standard scale type for the specified PlotSettings object.
    
    \param pPlotSettings [in]  Pointer to the PlotSettings object.
    \param scaleType [in]  Standard scale type to be set.

    \returns Returns eOk if successful or an appropriate error code otherwise.

</member>
        <member name="M:OdDbSetBasePlotSettingsPE.setStyleSheet(OdRxObject*,OdString)">
\details
    Sets the current style sheet for the specified PlotSettings object.
    
    \param pPlotSettings [in]  Pointer to the PlotSettings object.
    \param styleSheet [in]  Name of current style sheet.

    \returns Returns eOk if successful or an appropriate error code otherwise.

</member>
        <member name="M:OdDbSetBasePlotSettingsPE.setPrintScale(OdRxObject*,System.Double,System.Double)">
\details
    Sets the custom print scale for the specified PlotSettings object.
    
    \param pPlotSettings [in]  Pointer to the PlotSettings object.
    \param numerator [in]  PaperSpace units.
    \param denominator [in]  Media units.
    
    \remarks
    The custom print scale always reflects the scale that this PlotSettings object will use to plot.

    \returns Returns eOk if successful or an appropriate error code otherwise.

</member>
        <member name="M:OdDbSetBasePlotSettingsPE.setPlotView(OdRxObject*,OdDbStub*)">
\details
    Sets the plot view for the specified PlotSettings object.
    
    \param pPlotSettings [in]  Pointer to the PlotSettings object.
    \param plotViewId [in]  Plot view Object Id to set.
  
    \returns Returns eOk if successful or an appropriate error code otherwise.

</member>
        <member name="M:OdDbSetBasePlotSettingsPE.setPlotWindowArea(OdRxObject*,System.Double,System.Double,System.Double,System.Double)">
\details
    Sets the corners of the plot window area for the specified PlotSettings object.

    \param pPlotSettings [in]  Pointer to the PlotSettings object.
    \param xMin [in]  X-coordinate of the lower-left corner.      
    \param yMin [in]  Y-coordinate of the lower-left corner.      
    \param xMax [in]  X-coordinate of the upper-right corner.      
    \param yMax [in]  Y-coordinate of the upper-right corner.      
    
    \remarks
    The corners define the area to be plotted if and only if plotType == kWindow.

    \returns Returns eOk if successful or an appropriate error code otherwise.

</member>
        <member name="M:OdDbSetBasePlotSettingsPE.setPlotType(OdRxObject*,OdDbBaseLayoutPE.PlotType)">
\details
    Sets the plot type for the specified PlotSettings object.

    \param pPlotSettings [in]  Pointer to the PlotSettings object.
    \param plotType [in]  Plot type.

    \remarks
    plotType must be one of the following:
    
    <table>
    Name        Value   Description
    kDisplay    0       Display
    kExtents    1       Extents
    kLimits     2       Limits
    kView       3       View
    kWindow     4       Window
    kLayout     5       Layout
    </table>

    \returns Returns eOk if successful or an appropriate error code otherwise.

</member>
        <member name="M:OdDbSetBasePlotSettingsPE.setPlotRotation(OdRxObject*,OdDbBaseLayoutPE.PlotRotation)">
\details
    Sets the plot rotation for the specified PlotSettings object.

    \param pPlotSettings [in]  Pointer to the PlotSettings object.
    \param plotRotation [in]  Plot rotation.
    
    \remarks
    plotRotation must be one of the following:
    
    <table>
    Name         Value    Description
    k0degrees    0        No rotation
    k90degrees   1        90° CCW
    k180degrees  2        Inverted°
    k270degrees  3        90° CW
    </table>

    \returns Returns eOk if successful or an appropriate error code otherwise.

</member>
        <member name="M:OdDbSetBasePlotSettingsPE.setPlotPaperUnits(OdRxObject*,OdDbBaseLayoutPE.PlotPaperUnits)">
\details
    Sets the plot paper units for the specified PlotSettings object.

    \param pPlotSettings [in]  Pointer to the PlotSettings object.
    \param plotPaperUnits [in]  Plot paper units.
        
    \remarks
    The plot paper units determine the units of the margins, offsets, paper size, and drawing units.
    
    plotPaperUnits must be one of the following:
    
    <table>
    Name            Value   Description
    kInches         0       Inches
    kMillimeters    1       Millimeters
    kPixels         2       Pixels
    </table>

	\returns Returns eOk if successful or an appropriate error code otherwise.

</member>
        <member name="M:OdDbSetBasePlotSettingsPE.setOrigin(OdRxObject*,OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets the plot origin for the specified PlotSettings object.

    \param pPlotSettings [in] Pointer to the PlotSettings object.
    \param origin [in]  Plot origin.
        
    \remarks
    The plot origin is measured with respect to the plot margin. All distances are returned in millimeters, regardless of the drawing units.

    \returns Returns eOk if successful or an appropriate error code otherwise.

</member>
        <member name="M:OdDbSetBasePlotSettingsPE.setMediaName(OdRxObject*,OdString)">
\details
    Sets the canonical (locale-independent) media name for the specified PlotSettings object.

    \param pPlotSettings [in]  Pointer to the PlotSettings object.
    \param mediaName [in]  Canonical media name (case-sensitive).
    
    \remarks
    The canonical media name is locale-independent.
    \returns Returns eOk if successful or an appropriate error code otherwise.

</member>
        <member name="M:OdDbSetBasePlotSettingsPE.setPlotPaperSize(OdRxObject*,System.Double,System.Double)">
\details
    Sets the size of the paper for the specified PlotSettings object.
	
    \param pPlotSettings [in] Pointer to the PlotSettings object.
    \param paperWidth [in] Sets the paper width. 
    \param paperHeight [in] Sets the paper height.

    \remarks
    Paper size is the physical paper size and includes margins.
    All distances are returned in millimeters, regardless of the drawing units. 

    \returns Returns eOk if successful or an appropriate error code otherwise.

</member>
        <member name="M:OdDbSetBasePlotSettingsPE.setMargins(OdRxObject*,System.Double,System.Double,System.Double,System.Double)">
\details
    Sets the margins of the paper for the specified PlotSettings object.
    
	  \param pPlotSettings [in] Pointer to the PlotSettings object.
    \param left [in] Sets the left margin. 
    \param Bottom [in] Sets the bottom margin.
    \param right [in] Sets the right margin. 
    \param top [in] Sets the top margin.
    
    \remarks
    Margins are measured from their respective edges to the plot area and are independent of plot rotation.
    All distances are returned in millimeters, regardless of the drawing units. 

	\returns Returns eOk if successful or an appropriate error code otherwise.

</member>
        <member name="M:OdDbSetBasePlotSettingsPE.setPlotLayoutFlags(OdRxObject*,System.Int16)">
\details
    Sets plot layout flags for the specified PlotSettings object.

    \param pPlotSettings [in] Pointer to the PlotSettings object.
    \param flags [in] Plot layout flags to be set.

	  \returns Returns eOk if successful or an appropriate error code otherwise. 

</member>
        <member name="M:OdDbSetBasePlotSettingsPE.setPlotCfgName(OdRxObject*,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets the plot device name for the specified PlotSettings object.

    \param pPlotSettings [in]  Pointer to the PlotSettings object.
    \param plotCfgName [in]  Name of the system printer or plot configuration PC3 file.

	  \returns Returns eOk if successful or an appropriate error code otherwise. 

</member>
        <member name="D:OdDbBaseLayoutPEPtr">
\details
  This template class is a specialization of the OdSmartPtr class for OdDbBaseLayoutPE object pointers.

</member>
        <member name="M:OdDbBaseLayoutPE.getStdScaleType(OdRxObject!System.Runtime.CompilerServices.IsConst*,OdDbBaseLayoutPE.StdScaleType*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the standard scale type for this PlotSettings object (DXF 75).
    
    \remarks
    stdScaleType() returns one of the of the following
    
    <table>
    Name            Value   Scale
    kScaleToFit     0       Scaled to Fit
    k1_128in_1ft    1       1/128=1'
    k1_64in_1ft     2       1/64=1'
    k1_32in_1ft     3       1/32=1'
    k1_16in_1ft     4       1/16=1'
    k3_32in_1ft     5       3/32=1'
    k1_8in_1ft      6       1/8=1'
    k3_16in_1ft     7       3/16=1'
    k1_4in_1ft      8       1/4=1'
    k3_8in_1ft      9       3/8=1'
    k1_2in_1ft      10      1/2=1'
    k3_4in_1ft      11      3/4=1'
    k1in_1ft        12      1=1'
    k3in_1ft        13      3=1'
    k6in_1ft        14      6=1'
    k1ft_1ft        15      1'=1'
    k1_1            16      1:1
    k1_2            17      1:2
    k1_4            18      1:4
    k1_5            19      1:5
    k1_8            20      1:8
    k1_10           21      1:10
    k1_16           22      1:16
    k1_20           23      1:20
    k1_30           24      1:30
    k1_40           25      1:40
    k1_50           26      1:50
    k1_100          27      1:100
    k2_1            28      2:1
    k4_1            29      4:1
    k8_1            30      8:1
    k10_1           31      10:1
    k100_1          32      100:1
    k1000_1         33      1000:1
    k1and1_2in_1ft  34      1.5"=1'
    </table></member>
        <member name="M:OdDbBaseLayoutPE.getApproxExtents(OdRxObject!System.Runtime.CompilerServices.IsConst*,OdGePoint3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Returns the approximate extents of a specified layout.
    
    \param        [in] A pointer to a layout object.
    \param extMin [in] A reference to an OdGePoint3d object to store and return the left lower corner of the extents rectangle.
    \param extMax [in] A reference to an OdGePoint3d object to store and return the right upper corner of the extents rectangle.

</member>
        <member name="M:OdDbBaseLayoutPE.scalePSLinetypes(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Determines whether generation of linetypes for polylines is used in paper space for the specified layout.
    
    \param [in]  A pointer to a layout object.

</member>
        <member name="M:OdDbBaseLayoutPE.getBlockId(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Returns the block identifier for a specified layout.
    
    \param [in]  A pointer to a layout object.

</member>
        <member name="M:OdDbBaseLayoutPE.plotPaperUnits(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Returns the current plot units for a specified layout in paper space.
    
    \param [in]  A pointer to a layout object.

</member>
        <member name="M:OdDbBaseLayoutPE.getPlotPaperSize(OdRxObject!System.Runtime.CompilerServices.IsConst*,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Returns the current paper size for a specified layout.
    
    \param   [in]  A pointer to a layout object.
    \param x [out] A reference to be used for returning the paper width value.
    \param y [out] A reference to be used for returning the paper height value.

</member>
        <member name="M:OdDbBaseLayoutPE.getPlotOrigin(OdRxObject!System.Runtime.CompilerServices.IsConst*,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Returns the current origin plot for a specified layout.
    
    \param   [in]  A pointer to a layout object.
    \param x [out] A reference to be used for returning the X coordinate of the layout's plot origin.
    \param y [out] A reference to be used for returning the Y coordinate of the layout's plot origin.

</member>
        <member name="M:OdDbBaseLayoutPE.getPlotWindowArea(OdRxObject!System.Runtime.CompilerServices.IsConst*,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Returns the current information about the plot window area for a specified layout.
    
    \param      [in]  A pointer to a layout object.
    \param xmin [out] A reference to be used for returning the X coordinate of the window area's lower left corner.
    \param ymin [out] A reference to be used for returning the Y coordinate of the window area's lower left corner.
    \param xmax [out] A reference to be used for returning the X coordinate of the window area's upper right corner.
    \param ymax [out] A reference to be used for returning the Y coordinate of the window area's upper right corner.

</member>
        <member name="M:OdDbBaseLayoutPE.getPlotViewName(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Returns a plot viewport name for a specified layout.
    
    \param A pointer to a layout object.

</member>
        <member name="M:OdDbBaseLayoutPE.plotType(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Returns the current plot type for a specified layout.
    
    \param [in]  A pointer to a layout object.

</member>
        <member name="M:OdDbBaseLayoutPE.getCustomPrintScale(OdRxObject!System.Runtime.CompilerServices.IsConst*,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Returns a custom print scale value for a specified layout.
    
    \param [in]  A pointer to a layout object.
    \param numerator    [out] A reference to a double value to store and return the real world units.
    \param denominator  [out] A reference to a double value to store and return the drawing units.

</member>
        <member name="M:OdDbBaseLayoutPE.getStdScale(OdRxObject!System.Runtime.CompilerServices.IsConst*,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Returns the standard scale value for a specified layout.
    
    \param        [in]  A pointer to a layout object.
    \param scale  [out] A reference to a double value to store and return the scale value.

</member>
        <member name="M:OdDbBaseLayoutPE.useStandardScale(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Determines whether a standard scale is used for a specified layout.
    
    \param [in] A pointer to a layout object.
    
    \returns Returns true if a standard scale is used for the layout, otherwise returns false.

</member>
        <member name="M:OdDbBaseLayoutPE.getGeomExtents(OdRxObject!System.Runtime.CompilerServices.IsConst*,OdGeExtents3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns current geometry extents of a specified layout object.
    
    \param     [in]   A pointer to a layout object.
    \param ext [out]  A reference to an OdGeExtents3d object to store and retrieve the layout's geometry extents.

</member>
        <member name="M:OdDbBaseLayoutPE.isOverallVPortErased(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Determines whether the overall viewport of a layout is erased.
    
    \param [in] A pointer to a layout object.
    
    \returns Returns true if the overall viewport of the layout is erased, otherwise returns false.

</member>
        <member name="M:OdDbBaseLayoutPE.getLeftMargin(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the current left margin value for a specified layout.
    
    \param [in] A pointer to a layout object.

</member>
        <member name="M:OdDbBaseLayoutPE.getBottomMargin(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the current bottom margin value for a specified layout.
    
    \param [in] A pointer to a layout object.

</member>
        <member name="M:OdDbBaseLayoutPE.getRightMargin(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the current right margin value for a specified layout.
    
    \param [in] A pointer to a layout object.

</member>
        <member name="M:OdDbBaseLayoutPE.getTopMargin(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the current top margin value for a specified layout.
    
    \param [in] A pointer to a layout object.

</member>
        <member name="M:OdDbBaseLayoutPE.plotRotation(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the current plot rotation mode for a specified layout.
    
    \param [in] A pointer to a layout object.

</member>
        <member name="M:OdDbBaseLayoutPE.getPaperSize(OdRxObject!System.Runtime.CompilerServices.IsConst*,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the current paper size for a specified layout.
    
    \param             [in]  A pointer to a layout object.
    \param paperWidth  [out] A reference for storing and retrieving paper width value.
    \param paperHeight [out] A reference for storing and retrieving paper height value.

</member>
        <member name="M:OdDbBaseLayoutPE.paperName(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the name of the paper orientation for a specified layout (for example, "A4"). 
    
    \param [in] A pointer to a layout object.

</member>
        <member name="M:OdDbBaseLayoutPE.showPlotStyles(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Determines whether plot styles should be shown for a specified layout.
    
    \param [in] A pointer to a layout object.
    
    \returns Returns true if plot styles should be shown, otherwise returns false.

</member>
        <member name="M:OdDbBaseLayoutPE.printLineweights(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Determines whether lineweights should be printed for a specified layout.
    
    \param [in] A pointer to a layout object.
    
    \returns Returns true if lineweights should be printed, otherwise returns false.

</member>
        <member name="M:OdDbBaseLayoutPE.isModelLayout(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Determines whether a specified layout belongs to model space.
    
    \param [in] A pointer to a layout object.
    
    \returns Returns true if the layout belongs to model space, otherwise returns false.

</member>
        <member name="M:OdDbBaseLayoutPE.name(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Returns the current name of a specified layout.
    
    \param [in] A pointer to a layout object.

</member>
        <member name="T:OdDbBaseLayoutPE.StdScaleType">
\details
    Determines standard scale types.

</member>
        <member name="T:OdDbBaseLayoutPE.PlotType">
\details
    Determines the plot types.

</member>
        <member name="T:OdDbBaseLayoutPE.PlotRotation">
\details 
    Determines the types of plot rotations.

</member>
        <member name="T:OdDbBaseLayoutPE.PlotPaperUnits">
\details 
    Determines the plot paper units.

</member>
        <member name="M:OdDbBaseAnnotationScalePE.scaleRatio(OdRxObject!System.Runtime.CompilerServices.IsConst*,System.Double*)">
\details
    Returns the scale ratio value for a given viewport.
    
    \param obj [in]  Viewport object.
           scale [out] Scale ratio.

</member>
        <member name="D:OdDbBaseVisualStylePEPtr">
\details
  This template class is a specialization of the OdSmartPtr class for OdDbBaseVisualStylePE object pointers.

</member>
        <member name="M:OdDbBaseVisualStylePE.isInternal(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Determines whether a visual style object is internal.
    
    \param obj [in]  A pointer to a visual style object.
  
    \returns Returns true if the visual style object has been marked as internal, otherwise returns false.

</member>
        <member name="M:OdDbBaseVisualStylePE.name(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the name of a specified visual style object.

    \param obj [in]  A pointer to a visual style object.

</member>
        <member name="D:OdDbBaseLayerPEPtr">
\details
  This template class is a specialization of the OdSmartPtr class for OdDbBaseLayerPE object pointers.

</member>
        <member name="M:OdDbBaseLayerPE.getLineType(OdRxObject*,OdGiLinetype*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the current linetype for the specified layer.
    
    \param obj    [in]  A pointer to a layer object.
    \param LType  [out] An object of the OdGiLinetype class to store and return the information about layer's linetype.
    
    \returns Returns true if the linetype has been successfully retrieved from the layer object, otherwise returns false.

</member>
        <member name="M:OdDbBaseLayerPE.setIsFrozen(OdRxObject*,System.Boolean)">
\details
    Sets the frozen status of this Layer.

    \param obj    [in]  A pointer to a layer object.
    \param frozen [in]  A new frozen status value (true to freeze, false to thaw).

</member>
        <member name="M:OdDbBaseLayerPE.setIsOff(OdRxObject*,System.Boolean)">
\details
    Sets the on / off status of this Layer.

    \param obj [in]  A pointer to a layer object.
    \param off [in]  A new on / off status value (true for off, false for on).

</member>
        <member name="M:OdDbBaseLayerPE.isFrozen(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Determines whether a specified layer is frozen. 
    
    \param obj [in]  A pointer to a layer object.
    
    \returns Returns true if the layer is frozen, otherwise returns false.

</member>
        <member name="M:OdDbBaseLayerPE.isOff(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Determines whether a specified layer object is off.
    
    \param obj [in]  A pointer to a layer object.
    
    \returns Returns true if the layer is off, otherwise returns false.

</member>
        <member name="M:OdDbBaseLayerPE.name(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the name of a specified layer object.

    \param obj [in]  A pointer to a layer object.

</member>
        <member name="D:OdDbBaseDatabasePEPtr">
\details
    This template class is a specialization of the OdSmartPtr class for OdDbBaseDatabasePE object pointers.

</member>
        <member name="M:OdDbBaseDatabasePE.getDatabasePartialViewingMode(OdRxObject*)">
\details
    Returns database Partial Viewing Mode

</member>
        <member name="M:OdDbBaseDatabasePE.createMaterial(OdDbStub**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxObject*,OdRxObject*,OdGiMaterialTraits!System.Runtime.CompilerServices.IsConst*,OdGiMapper!System.Runtime.CompilerServices.IsConst*,OdCmEntityColor!System.Runtime.CompilerServices.IsConst*)">
\details 
    Create new material.
    \param material        [out] A pointer to a new created material.
    \param pSourceDb       [in]  A pointer to a source database object.
    \param pDestinationDb  [in]  A pointer to a destination database object.
    \param pMaterialTraits [in]  A pointer to a material info.
    \param pMaterialMapper [in]  A pointer to a material mapper.
    \param pMaterialColor  [in]  A pointer to a material color.
    

</member>
        <member name="M:OdDbBaseDatabasePE.removeDatabaseUnloadReactor(OdRxObject*,OdRxObject*)">
\details 
    Removes a database unload reactor from a specified database.
    This method should be reimplemented to provide a custom reaction for a database unload event.
    \param pDb      [in] A pointer to a database object.
    \param pReactor [in] A pointer to a reactor object to be removed.

</member>
        <member name="M:OdDbBaseDatabasePE.addDatabaseUnloadReactor(OdRxObject*,OdRxObject*,OdDbBaseDatabasePE.DatabaseUnloadReactor*)">
\details 
    Adds a new database unload reactor object to a specified database.
    \param pDb              [in] A pointer to a database object.
    \param pPrevReactor     [in] A pointer to a previous reactor object. If equal to NULL, then it is a new reactor.
    \param pReactorRedirect [in] A pointer to a database object.
    \remarks 
    There can be more than one database unload reactor. When a database unload event occurs, reactors run according to the order they have been added. 

</member>
        <member name="M:OdDbBaseDatabasePE.DatabaseUnloadReactor.goodbye(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
        Implements reactions for a database unload event.
        This method should be reimplemented to provide a custom reaction for a database unload event.
        \param pDb [in] A pointer to a database object.

</member>
        <member name="M:OdDbBaseDatabasePE.DatabaseUnloadReactor.Dispose">
\details 
        Destroys the database unload reactor object.

</member>
        <member name="T:OdDbBaseDatabasePE.DatabaseUnloadReactor">
\details 
    Class implements a reaction mechanism (reactor) for a database unload event.

</member>
        <member name="M:OdDbBaseDatabasePE.getCurrentLongTransation(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Returns an identifier of the current long transaction in a specified database.
    \param pId [in]  A pointer to a database.

</member>
        <member name="M:OdDbBaseDatabasePE.openObject(OdDbStub*)">
\details 
    Returns a smart pointer to the object determined with its identifier.
    \param pId [in]  A pointer to an object's identifier.

</member>
        <member name="M:OdDbBaseDatabasePE.isAProxy(OdRxObject*)">
\details 
    Determines whether a specified object is a proxy object.
    \returns Returns true if the object is a proxy one, otherwise returns false.

</member>
        <member name="M:OdDbBaseDatabasePE.setMultiThreadedRender(OdRxObject*,System.Boolean)">
\details 
    Switches multi-threaded rendering on or off for a specified database.
    \param db   [in]  A pointer to a database.
    \param bOn  [in]  A value to be set (true if you want to switch multi-threaded rendering on or false in the other case).

</member>
        <member name="M:OdDbBaseDatabasePE.xrefBlockId(OdRxObject*)">
\details 
    Returns the identifier of the XRef block for a specified database.
    \param db [in]  A pointer to a database.

</member>
        <member name="M:OdDbBaseDatabasePE.currentLayoutId(OdRxObject*)">
\details 
    Returns the identifier of the current layout for a specified database.
    \param db [in]  A pointer to a database.

</member>
        <member name="M:OdDbBaseDatabasePE.getPaperBlockId(OdRxObject*)">
\details 
    Returns the identifier of the paper space block for a specified database.
    \param db [in]  A pointer to a database.

</member>
        <member name="M:OdDbBaseDatabasePE.getModelBlockId(OdRxObject*)">
\details 
    Returns the identifier of the model space block for a specified database.
    \param db [in]  A pointer to a database.

</member>
        <member name="M:OdDbBaseDatabasePE.getCodePage(OdRxObject*)">
\details 
    Returns the code page identifier for a specified database.
    \param db [in]  A pointer to a database.

</member>
        <member name="M:OdDbBaseDatabasePE.getOwner(OdDbStub*)">
\details 
    Returns an identifier of an owner object for a specified database object.
    \param id [in]  A database object identifier.

</member>
        <member name="M:OdDbBaseDatabasePE.getDatabase(OdDbStub*)">
\details 
    Returns a pointer to a database that a specified object belongs to.
    \param id [in]  A database object identifier.

</member>
        <member name="M:OdDbBaseDatabasePE.getHandle(OdDbStub*)">
\details 
    Returns a handle of an object using its identifier.
    \param id [in]  A database object identifier.

</member>
        <member name="M:OdDbBaseDatabasePE.getObject(OdRxObject*,System.UInt64)">
\details 
    Returns an identifier of a specified database object using its 64-bit handle.
    \param db       [in]  A pointer to a database.
    \param handle [in]  A database object handle.

</member>
        <member name="M:OdDbBaseDatabasePE.getId(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details 
    Returns an object's identifier.
    \param obj [in]  A pointer to an object in a database.

</member>
        <member name="M:OdDbBaseDatabasePE.getTextStyleById(OdRxObject*,OdDbStub*,OdGiTextStyle*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Searches for a text style object by its identifier in the specified database. 
    \param db       [in]  A pointer to a database.
    \param pLTypeId [in]  A text style identifier to be searched for.
    \param LType    [out] A reference to an OdGiTextStyle object to store found text style information.

    \returns Returns true if the text style object was found with the specified identifier, otherwise returns false. 

</member>
        <member name="M:OdDbBaseDatabasePE.getLineTypeById(OdRxObject*,OdDbStub*,OdGiLinetype*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Searches for a linetype object by its identifier in the specified database. 
    \param db       [in]  A pointer to a database.
    \param pLTypeId [in]  A linetype identifier to be searched for.
    \param LType    [out] A reference to an OdGiLinetype object to store found linetype information.

    \returns Returns true if the linetype object was found with the specified identifier, otherwise returns false. 

</member>
        <member name="M:OdDbBaseDatabasePE.getMeasurement(OdRxObject*)">
\details 
    Returns the measurement system that is used for linetypes and hatches for the specified database. 
    \param db   [in] A pointer to a database.
    \remarks 
    See OdDb::MeasurementValue enumeration for additional information about valid measurement values. 

</member>
        <member name="M:OdDbBaseDatabasePE.baseFormatter(OdRxObject*)">
\details 
    Returns the current units formatter for the specified database. 
    \param db   [in] A pointer to a database.

</member>
        <member name="M:OdDbBaseDatabasePE.getUnits(OdRxObject*)">
\details 
    Returns the drawing units that are used for automatic scaling of blocks, xrefs and images that are inserted into or attached to the specified database. 
    \param db   [in] A pointer to a database.
    \remarks 
    See OdDb::UnitsValue enumeration for additional information about units.

</member>
        <member name="M:OdDbBaseDatabasePE.getVersionGuid(OdRxObject*)">
\details 
    Returns the specified database's version GUID. 
    The version GUID uniquely identifies the database version. It is updated each time database changes are saved.
    \param db   [in] A pointer to a database.

</member>
        <member name="M:OdDbBaseDatabasePE.getFingerPrintGuid(OdRxObject*)">
\details 
    Returns the specified database's fingerprint GUID. 
    The fingerprint GUID uniquely identifies the database. It is created when the database is created.
    \param db   [in] A pointer to a database.

</member>
        <member name="M:OdDbBaseDatabasePE.getUpdateTime(OdRxObject*)">
\details 
    Returns the specified database's last update date and time.
    \param db   [in] A pointer to a database.

</member>
        <member name="M:OdDbBaseDatabasePE.getCreationTime(OdRxObject*)">
\details 
    Returns the specified database's creation date and time.
    \param db   [in] A pointer to a database.

</member>
        <member name="M:OdDbBaseDatabasePE.getFirstLayoutId(OdRxObject*)">
\details 
    Returns an identifier of a layout related to model space of the specified database.
    \param db   [in] A pointer to a database.

</member>
        <member name="M:OdDbBaseDatabasePE.getFirstLayout(OdRxObject*)">
\details 
    Returns a layout that is related to model space of the specified database.
    \param db   [in] A pointer to a database.

</member>
        <member name="M:OdDbBaseDatabasePE.findLayoutNamed(OdRxObject*,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Returns a pointer to an identifier of a layout with a specified name from the specified database.
    \param db   [in] A pointer to a database.
    \param name [in] A name of a layout.
    \remarks 
    If a layout with the specified name is not found, a NULL pointer is returned.

</member>
        <member name="M:OdDbBaseDatabasePE.findLayoutIdByViewport(OdRxObject*,OdDbStub*)">
\details 
    Returns a pointer to an identifier of a layout related to a specified viewport from the specified database.
    \param db           [in] A pointer to a database.
    \param pViewportId  [in] A viewport identifier.
    \remarks 
    If a layout related to the specified viewport is not found, a NULL pointer is returned.

</member>
        <member name="M:OdDbBaseDatabasePE.findLayoutByViewport(OdRxObject*,OdDbStub*)">
\details 
    Returns a layout related with a specified viewport from the specified database.
    \param db           [in] A pointer to a database.
    \param pViewportId  [in] A viewport identifier.
    \remarks 
    If a layout with the specified viewport is not found, a NULL pointer is returned.

</member>
        <member name="M:OdDbBaseDatabasePE.getLayout(OdRxObject*,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Returns a layout with a specified name from the specified database.
    \param pDb    [in] A pointer to a database.
    \param name   [in] A name of a layout to be retrieved.
    \remarks 
    If layout with the specified name is not found, NULL pointer is returned.

</member>
        <member name="M:OdDbBaseDatabasePE.layouts(OdRxObject*)">
\details 
    Returns layouts for the specified database.
    
    \param db   [in] A pointer to a database.
    
    \returns Returns an iterator for accessing the layout objects dictionary.

</member>
        <member name="M:OdDbBaseDatabasePE.setCurrentLayout(OdRxObject*,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Sets the current layout for the specified database.
    
    \param db   [in] A pointer to a database.
    \param name [in] A name of a layout to be set as current.

</member>
        <member name="M:OdDbBaseDatabasePE.currentLayout(OdRxObject*)">
\details 
    Returns the current layout for the specified database.
    \param pDb [in] A pointer to a database.
    
    \remarks 
    In this case the term "layout" means an abstraction that corresponds to a "sheet" in a sheet set manager, "page" in a .pdf or .dwf file, and "layout"+"block table record" in a .dwg file.

</member>
        <member name="M:OdDbBaseDatabasePE.getVisualStyleId(OdRxObject*,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns an object identifier of a visual style with a specified name from a specified database.
    \param db   [in] A pointer to a database, from which the visual style data will be retrieved.
    \param name [in] A visual style name.
    
    \returns Returns the visual style object identifier if it was found or OdDbObjectId::kNull value in the other case.

</member>
        <member name="M:OdDbBaseDatabasePE.visualStyles(OdRxObject*)">
\details 
    Returns a smart pointer to the iterator of the specified database's visual styles.
    
    \param db [in] A pointer to a drawing database, from which the method retrieves information about visual styles. 

</member>
        <member name="M:OdDbBaseDatabasePE.layers(OdRxObject*)">
\details 
    Returns a smart pointer to the iterator of the specified database's layers.
    
    \param db [in] A pointer to a drawing database, from which the method retrieves information about layers. 

</member>
        <member name="M:OdDbBaseDatabasePE.loadPlotstyleTableForActiveLayout(OdGiDefaultContext*,OdRxObject*)">
\details 
    Loads plot styles of the active layout to a specified Gi context object. 
    
    \param pDwgContext [in] A pointer to a Gi context object. Plot styles will be loaded into it. 
    \param db          [in] A pointer to a drawing database. 

</member>
        <member name="M:OdDbBaseDatabasePE.zoomToExtents(OdGsDCRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGsDevice*,OdRxObject*,OdGeBoundBlock3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsLong,OdDbStub*)">
\details
    Makes the specified Gs device render the current layout zoomed to extents.
    \param outputRect   [out] A rectangle, which determines the printable area in device units.
    \param pDevice      [in]  A pointer to a device to render the current layout with.
    \param db           [in]  A pointer to a drawing database.
    \param plotExtents  [out] Eye coordinate system plotting extents of the device viewport.
    \param extentsFlags [in]  Extents flags.
    \param objectId     [in]  Object identifier. 
    
    \remarks 
    If no viewport is found, the method throws an exception. 

</member>
        <member name="M:OdDbBaseDatabasePE.applyLayoutSettings(OdGsDCRect*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGsDevice*,OdRxObject*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details 
    Sets current layout plot settings (such as paper size, rotation, scale, etc.) to a specified Gs device. 
    
    \param clipBox      [out] A visible rectangle to be returned.
    \param pDevice      [in]  A pointer to a device to apply plot settings to.
    \param db           [in]  A pointer to a drawing database.
    \param extentsFlags [in]  Extents flags.
    \param dpi          [in]  Resolution value.

</member>
        <member name="M:OdDbBaseDatabasePE.getNextViewForActiveLayout(OdGiDefaultContext*,OdDbStub*)">
\details 
    Gets the next view associated with the active layout. 
  
    \param pGiCtx [in] A pointer to a default Gi context object.
    \remarks 
    This functionality currently is not implemented.  

</member>
        <member name="M:OdDbBaseDatabasePE.setupPalette(OdGsDevice*,OdGiDefaultContext*,OdDbStub*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details 
    Sets up a palette associated with a specified device layout. 
    
    \param device     [in] A pointer to a device. 
    \param giContext  [in] A pointer to a Gi context.
    \param pGiCtx     [in] A pointer to a database layout identifier. 
    \param palBg      [in] A background color of the palette.
    
    \remarks 
    To overwrite the default DB-palette color, use a non-zero value for the alpha component of RGBA color.

</member>
        <member name="M:OdDbBaseDatabasePE.setupLayoutView(OdGsDevice*,OdGiDefaultContext*,OdDbStub*)">
\details 
    Sets up Gs views for a specified device according to the specified database layout data.
    
    \param pDevice  [in] A pointer to a device.
    \param pGiCtx   [in] A pointer to a Gi context object with active layout data. 
    \param pGiCtx   [in] A pointer to a database layout identifier. 
    
    \returns A smart pointer to an OdGsDevice object with view set up. 

</member>
        <member name="M:OdDbBaseDatabasePE.setupActiveLayoutViews(OdGsDevice*,OdGiDefaultContext*)">
\details 
    Sets up Gs views for a specified device, according to the active database layout data.
    
    \param pDevice  [in] A pointer to the device.
    \param pGiCtx   [in] A pointer to the Gi context object with active layout data. 
    
    \returns A smart pointer to an OdGsDevice object with views set up. 

</member>
        <member name="M:OdDbBaseDatabasePE.createTextIterator(OdRxObject*,System.UInt16!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Boolean,OdGiTextStyle!System.Runtime.CompilerServices.IsConst*)">
\details
  Creates a TextIterator object for the specified data.

  \param textString [in]  Text string to be parsed.
  \param length     [in]  Length of string in bytes.
  \param raw        [in]  If and only if true, character sequences in the form of %%c will be treated as raw text.
  \param codePageId [in]  Object ID of the code page for the text.
  \param pTextStyle [in]  Pointer to the TextStyle object associated with the specified text.

  \returns
  Returns a SmartPointer to the new OdDbTextIterator object.

</member>
        <member name="M:OdDbBaseDatabasePE.putNamedViewInfo(OdRxObject*,OdDbStub*,OdArray&lt;OdString,OdObjectsAllocator&lt;OdString&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdArray&lt;OdGePoint3d,OdMemoryAllocator&lt;OdGePoint3d&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Retrieves information about viewports for a specified database and layout. 
    
    \params pDb       [in] A pointer to a database.
    \params layoutId  [in] A layout identifier.
    \params layoutId  [out] An array of viewport names. Filled and returned by the method.
    \params layoutId  [out] An array of viewport points. Filled and returned by the method.

</member>
        <member name="M:OdDbBaseDatabasePE.createGiContext(OdRxObject*)">
\details
    Creates a Gi context object for a specified database.
    
    \param pDb [in] A pointer to a database to create a context object for.

</member>
        <member name="M:OdDbBaseDatabasePE.undo(OdRxObject*)">
\details
  Performs an undo operation on this database object.

  \remarks
  All operations performed since the last call to startUndoRecording will be undone.
  At least 1 undo step is always supported for internal needs.

</member>
        <member name="M:OdDbBaseDatabasePE.evaluateFields(OdRxObject*,System.Int32)">
\details
    Evaluates fields in database.
    \param pDb [in]  Pointer to the database for which fields are to be evaluated
    \param nContext [in]  Input context in which the field is evaluated, which can be a predefined *OdDbField::EvalContext* enum flag or a user-defined context flag; this context flag is passed to the evaluator

</member>
        <member name="M:OdDbBaseDatabasePE.startUndoRecord(OdRxObject*)">
\details
      Starts undo recording of this database object.

</member>
        <member name="M:OdDbBaseDatabasePE.abortTransaction(OdRxObject*)">
\details
    Aborts (rolls back) the current database transaction.
    
    \param pDb [in] A pointer to a database where the transaction should be aborted.

</member>
        <member name="M:OdDbBaseDatabasePE.startTransaction(OdRxObject*)">
\details
    Starts a database transaction.
    
    \param pDb [in] A pointer to a database where the transaction should be started.

</member>
        <member name="M:OdDbBaseDatabasePE.getFilename(OdRxObject*)">
\details
      Returns the name of the file associated with this database object.

</member>
        <member name="M:OdDbBaseDatabasePE.appServices(OdRxObject*)">
\details
      Returns the OdDbBaseHostAppServices object associated with this database object.

</member>
        <member name="T:OdDbBaseDatabasePE.ExtentsFlags">
\details 
    Determines extents parameter values.

</member>
        <member name="D:OdDbBaseDatabasePtr">
\details
  This template class is a specialization of the OdSmartPtr class for OdDbBaseDatabase object pointers.

</member>
        <member name="D:OdUnitsFormatterPtr">
\details
  This template class is a specialization of the OdSmartPtr class for OdDbUnitsFormatter object pointers.

</member>
        <member name="M:OdUnitsFormatter.unformatA(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the specified string as an angular value.
    \param string [in]  String to unformat.
    \remarks
    All angles are expressed as radians.

</member>
        <member name="M:OdUnitsFormatter.formatA(System.Double,OdUnitsFormatter.AUnits,System.Int32,System.Int32,System.Int32,System.UInt16!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the specified angular value as a string.
    \param value [in]  Value to format.
    \param aUnits [in]  Angle units. 
    \param precision [in]  Number of decimal places.
    \param dimzin [in]  A combination of ZeroSuppressionFlags.
    \param unitMode [in]  UNITMODE value.
    \param decsep [in]  Decimal separator.
    \remarks
    * A zero value for decsep specifies the default separator is to be used.
    \remarks
    All angles are expressed as radians.

</member>
        <member name="M:OdUnitsFormatter.unformatL(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the specified length string as a length value.
    \param string [in]  String to unformat.

</member>
        <member name="M:OdUnitsFormatter.formatL(System.Double,OdUnitsFormatter.LUnits,System.Int32,System.Int32,System.Int32,System.UInt16!System.Runtime.CompilerServices.IsConst*,System.UInt16!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the specified distance value as a string.
    \param value [in]  Value to format.
    \param lUnits [in]  Length units. 
    \param precision [in]  Number of decimal places.
    \param dimzin [in]  A combination of ZeroSuppressionFlags.
    \param unitMode [in]  UNITMODE value.
    \param decsep [in]  Decimal separator.
    \param thsep [in]  Thousands separator.
    \remarks
    * A zero value for decsep specifies the default seoarator is to be used.
    * A zero value for thsep specifies that no separator is to be used.

</member>
        <member name="M:OdUnitsFormatter.unformatAngle(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the specified string as an angle value.
    \param string [in]  String to unformat.
    \remarks
    The returned value depends on the ANGBASE system variable.
    \remarks
    All angles are expressed in radians.

</member>
        <member name="M:OdUnitsFormatter.formatAngle(System.Double)">
\details
    Returns the specified angle value as a string.
    \param value [in]  Value to format.
    \remarks
    The returned value depends on the ANGBASE, AUNITS, AUPREC, DIMZIN, and UNITMODE system variables.
    \remarks
    All angles are expressed in radians.

</member>
        <member name="M:OdUnitsFormatter.unformatLinear(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the specified string as a distance value.
    \param string [in]  String to unformat.
    \remarks
    The returned value depends on the UNITMODE system variable.

</member>
        <member name="M:OdUnitsFormatter.formatLinear(System.Double)">
\details
    Returns the specified distance value as a string.
    \param value [in]  Value to format.
    \remarks
    The returned value depends on the DIMZIN, LUNITS, LUPREC, and UNITMODE system variables.

</member>
        <member name="M:OdUnitsFormatter.unformatCmColor(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the specified string as an wrapped OdCmColorBase object.
    \param string [in]  String to unformat.

</member>
        <member name="M:OdUnitsFormatter.formatCmColor(OdCmColorBase!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the specified color value or OdCmColorBase object as a string.
    \param value [in]  Value to format.

</member>
        <member name="M:OdTimeStamp.packedValue">
\details
    Returns this TimeStamp object as long.
    
    \remarks
    packedValue returns the number of seconds elapsed since midnight, January 1, 1970, Universal (Greenwich Mean) Time.
    
    If this TimeStamp object contains a date before midnight, January 1, 1970,  UTC, 
    or after 3:14:07 on January 19, 2038, UT, packedValue() returns -1.

</member>
        <member name="M:OdTimeStamp.strftime(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns this TimeStamp object as a user-formatted string.
    
    \param timeString [out]  Receives the formatted time string.
    \param format [in]  Format string.
    
    \remarks
    The formatting codes for the format string are as follows; the # suppresses leading zeros:

    <table>
    Code          Description
    %a            Short weekday 
    %A            Full weekday 
    %b            Short month 
    %B            Full month 
    %c            Short date and time for current locale
    %#c           Long date and time for current locale 
    %d            Day of month (01 - 31) 
    %#d           Day of month (1 - 31) 
    %H            Hour in 24 hour format (00 - 23) 
    %#H           Hour in 24 hour format (0 - 23) 
    %I            Hour in 12 hour format (01 - 12) 
    %#I           Hour in 12 hour format (1 - 12) 
    %j            Day of year (001 - 366) 
    %#j           Day of year (1 - 366) 
    %m            Month (01 - 12) 
    %#m           Month (1 - 12) 
    %M            Minute (00 - 59) 
    %#M           Minute (0 - 59) 
    %p            AM/PM indicator for current local
    %S            Second (00 - 59) 
    %#S           Second (0 - 59) 
    %U            Week of the year, first day of week is Sunday (00 - 53) 
    %#U           Week of the year, first day of week is Sunday (0 - 53) 
    %w            Weekday, Sunday is 0, (0 - 6) 
    %#w           Weekday, Sunday is 0, (0 - 6) 
    %W            Week of the year, first day of week is Monday (00 - 53) 
    %#W           Week of the year, first day of week is Monday (0 - 53) 
    %x            Date for the current locale 
    %X            Time for the current locale 
    %y            Year without century (00 - 99) 
    %#y           Year without century (0 - 99) 
    %Y            Year with century  
    %Y            Year with century, no leading zeros 
    %z            Time-zone name  
    %Z            Time zone abbreviation
    </table></member>
        <member name="T:OdString">
\details
    Returns this TimeStamp object as standard formatted string.
    
    \param timeString [out]  Receives the formatted time string.
    
    \remarks
    The returned string is always 24 characters in length, and is in the form
    
                  Tue Oct 11 08:06:22 2005

</member>
        <member name="M:OdTimeStamp.subtract(OdTimeStamp!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
      Subtracts the specified TimeStamp object from this TimeStamp object, and returns the difference.
      
      \param tStamp [in]  TimeStamp.

</member>
        <member name="M:OdTimeStamp.add(OdTimeStamp!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
      Adds the specified TimeStamp object to this TimeStamp object, and returns the sum.
      
      \param tStamp [in]  TimeStamp.

</member>
        <member name="M:OdTimeStamp.setJulianFraction(System.Double)">
\details
	  Sets the fraction of the Julian date of this TimeStamp object.
	  \param julianFraction [in]  Julian fraction.
	  \remarks
	  The Julian fraction is the fraction of the day since midnight.

</member>
        <member name="M:OdTimeStamp.julianFraction">
\details
	  Returns the fraction of the Julian date of this TimeStamp object.

	  \remarks
	  The Julian fraction is the fraction of the day since midnight.

</member>
        <member name="M:OdTimeStamp.setJulianDate(System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
	  Sets the Julian Date for this TimeStamp object.

	  \param julianDay [in]  Julian day.
	  \param msecsPastMidnight [in]  Milliseconds past midnight.

</member>
        <member name="M:OdTimeStamp.setMsecsPastMidnight(System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
	  Sets the milliseconds past midnight for this TimeStamp object.
	  
	  \param msecsPastMidnight [in]  Milliseconds past midnight.

</member>
        <member name="M:OdTimeStamp.msecsPastMidnight">
\details
	  Returns the milliseconds past midnight for this TimeStamp object.

</member>
        <member name="M:OdTimeStamp.setJulianDay(System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
	  Sets the Julian day of this TimeStamp object.
	  
	  \param julianDay [in]  Julian day.

</member>
        <member name="M:OdTimeStamp.julianDay">
\details
	  Returns the Julian day of this TimeStamp object.

</member>
        <member name="M:OdTimeStamp.universalToLocal">
\details
	  Converts this TimeStamp object from Universal (Greenwich Mean) Time to local time.

</member>
        <member name="M:OdTimeStamp.localToUniversal">
\details
	  Converts this TimeStamp object from local time to Universal (Greenwich Mean) Time.

</member>
        <member name="M:OdTimeStamp.getUniversalTime">
\details
	  Sets this TimeStamp object to the workstation date in Universal (Greenwich Mean) Time.

</member>
        <member name="M:OdTimeStamp.getLocalTime">
\details
	  Sets this TimeStamp object to the workstation date in local time.

</member>
        <member name="M:OdTimeStamp.setToZero">
\details
	  Sets this TimeStamp object to Midnight, January 1, 1970, UTC.

</member>
        <member name="M:OdTimeStamp.setMillisecond(System.Int16)">
\details
	  Sets the millisecond of this TimeStamp object.
	  \param millisecond [in]  Millisecond.

</member>
        <member name="M:OdTimeStamp.millisecond">
\details
	  Returns the millisecond of this TimeStamp object.

</member>
        <member name="M:OdTimeStamp.setSecond(System.Int16)">
\details
	  Sets the second of this TimeStamp object.
	  \param second [in]  Second.

</member>
        <member name="M:OdTimeStamp.second">
\details
	  Returns the second of this TimeStamp object.

</member>
        <member name="M:OdTimeStamp.setMinute(System.Int16)">
\details
	  Sets the minute of this TimeStamp object.
	  \param minute [in]  Minute.

</member>
        <member name="M:OdTimeStamp.minute">
\details
	  Returns the minute of this TimeStamp object.

</member>
        <member name="M:OdTimeStamp.setHour(System.Int16)">
\details
	  Sets the hour of this TimeStamp object.
	  \param hour [in]  Hour.

</member>
        <member name="M:OdTimeStamp.hour">
\details
	  Returns the hour of this TimeStamp object.

</member>
        <member name="M:OdTimeStamp.setTime(System.Int16,System.Int16,System.Int16,System.Int16)">
\details
	  Sets the time of this TimeStamp object.
	  \param hour [in]  Hour.
	  \param minute [in]  Minute.
	  \param second [in]  Second.
	  \param millisecond [in]  Millisecond.

</member>
        <member name="M:OdTimeStamp.getTime(System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
	  Returns the time of this TimeStamp object.
	  \param hour [out]  Receives the hour.
	  \param minute [out]  Receives the minute.
	  \param second [out]  Receives the second.
	  \param millisecond [out]  Receives the millisecond.

</member>
        <member name="M:OdTimeStamp.setYear(System.Int16)">
\details
	  Sets the year of this TimeStamp object.
	  \param year [in]  Year.

</member>
        <member name="M:OdTimeStamp.year">
\details
	  Returns the year of this TimeStamp object.

</member>
        <member name="M:OdTimeStamp.setDay(System.Int16)">
\details
	  Sets the day of this TimeStamp object.
	  \param day [in]  Day.

</member>
        <member name="M:OdTimeStamp.day">
\details
	  Returns the day of this TimeStamp object.

</member>
        <member name="M:OdTimeStamp.setMonth(System.Int16)">
\details
	  Sets the month of this TimeStamp object.
	  \param month [in]  Month.

</member>
        <member name="M:OdTimeStamp.month">
\details
	  Returns the month of this TimeStamp object.

</member>
        <member name="M:OdTimeStamp.setDate(System.Int16,System.Int16,System.Int16)">
\details
	  Sets the date of this TimeStamp object.
	  \param month [in]  Month.
	  \param day [in]  Day.
	  \param year [in]  Year.

</member>
        <member name="M:OdTimeStamp.getDate(System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
	  Returns the date of this TimeStamp object.
	  \param month [out]  Receives the month.
	  \param day [out]  Receives the day.
	  \param year [out]  Receives the year.

</member>
        <member name="M:OdTimeStamp.#ctor">
\param init [in]  Initial value.
    
    \remarks
    The default constructor initializes the Julian date and time to midnight, January 1, 1970,  UTC.
    
    init must be one of the following:
    
    <table>
    Name                 Value    Description
    kInitZero            1        Midnight, January 1, 1970, UTC.
    kInitLocalTime       2        Workstation date in local time.
    kInitUniversalTime   3        Workstation date in Universal (Greenwich Mean) Time.
    </table></member>
        <member name="M:OdGeBoundBlock3d.setToBoxOrtho">
\details
    Call setToBox(true) if axes is parallel to world coordinate space axes.

</member>
        <member name="M:OdGeBoundBlock3d.setToBoxOrtho(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Call setToBox(true) if axes is parallel to world coordinate space axes.

</member>
        <member name="M:OdGeBoundBlock3d.center">
\details
    Returns the center of the bounding block.

</member>
        <member name="M:OdGeBoundBlock3d.maxPoint">
    \details Gets the maximum point of the OdGeBoundBlock3d object.

    \remarks
    The max point of the object extents is one of two points that are used to construct a bounding block. 
    The max point has greater values for each coordinate axis compared to the min point.

</member>
        <member name="M:OdGeBoundBlock3d.minPoint">
    \details Gets the minimum point of the OdGeBoundBlock3d object.

    \remarks
    The min point of the object extents is one of two points that are used to construct a bounding block. 
    The min point has minor values for each coordinate axis compared to the max point.

</member>
        <member name="M:OdGeBoundBlock3d.op_Assign(OdGeBoundBlock3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
    \details The assignment operator for the OdGeBoundBlock3d class.
    \param block [in]  Input OdGeBoundBlock3d object.

    \remarks
    Makes this block identical to the input block.

</member>
        <member name="M:OdGeBoundBlock3d.setToBox(System.Boolean)">
\details
    Sets this bounding block to a coordinate-aligned box, or a
    parallelogram bounding block. Returns a reference to this 
    bounding block.

    \param toBox [in]  If true, sets this bounding block to a 
    coordinate-aligned otherwise, sets it to a 
    parallelepiped bounding block.

</member>
        <member name="M:OdGeBoundBlock3d.isBox">
\details
    Returns true if and only if this bounding block is a
    coordinate-aligned box.

</member>
        <member name="M:OdGeBoundBlock3d.isDisjoint(OdGeBoundBlock3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if specified bounding block
    does not intersect this bounding block.

    \param block [in]  Any 3D bounding block.

</member>
        <member name="M:OdGeBoundBlock3d.contains(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if this point is
    contained in the bounding block.

    \param point [in]  Any 3D point.

</member>
        <member name="M:OdGeBoundBlock3d.swell(System.Double)">
\details
    Moves the walls of the bounding block the specified distance.

    \param distance [in]  Distance.

</member>
        <member name="M:OdGeBoundBlock3d.extend(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Extends the bounding block to contain
    the specified point.

    \param point [in]  Any 3D point.

</member>
        <member name="M:OdGeBoundBlock3d.set(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets the bounding block to a parallelepiped bounding block.

    \param base [in]  Base of parallelepiped bounding block.
    \param side1 [in]  First side of parallelepiped bounding block.
    \param side2 [in]  Second side of parallelepiped bounding block.
    \param side3 [in]  Third side of parallelepiped bounding block.

</member>
        <member name="M:OdGeBoundBlock3d.set(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets the bounding block to a coordinate-aligned box.

    \param p1 [in]  First point of a coordinate-aligned box.
    \param p2 [in]  Second point of a coordinate-aligned box.

</member>
        <member name="M:OdGeBoundBlock3d.get(OdGePoint3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns base and sides of bounding block.

    \param base [out]  Receives the base of the bounding box.
    \param side1 [out]  Receives the first side.
    \param side2 [out]  Receives the second side.
    \param side3 [out]  Receives the third side.

</member>
        <member name="M:OdGeBoundBlock3d.getMinMaxPoints(OdGePoint3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the extents of the bounding block.

    \param p1 [out]  Receives the first corner of the extents.
    \param p2 [out]  Receives the second corner of the extents.

</member>
        <member name="M:OdGeBoundBlock3d.#ctor(OdGeMatrix3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeExtents3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  \param lcs [in]  Receives local coordinate system (must be orthogonal)
  \param localBox [in]  Receives axis-aligned box in the specified lcs.

</member>
        <member name="M:OdGeBoundBlock3d.#ctor(OdGeBoundBlock3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details Constructor for the OdGeBoundBlock3d class.
\param source [in]  Object to be cloned.

\remarks
Copies the input OdGeBoundBlock3d object.

</member>
        <member name="M:OdGeBoundBlock3d.#ctor(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
    \details Constructor for the OdGeBoundBlock3d class.
    \param point1 [in]  First point of a coordinate-aligned box.
    \param point2 [in]  Second point of a coordinate-aligned box.

    \remarks
    The constructor constructs a box bounded by two input points.

</member>
        <member name="M:OdGeBoundBlock3d.#ctor(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details Constructor for the OdGeBoundBlock3d class.
\param base [in]  Base of a parallelogram bounding block.
\param side1 [in]  First side of a parallelogram bounding block.
\param side2 [in]  Second side of a parallelogram bounding block.
\param side3 [in]  Third side of a parallelogram bounding block.

\remarks
The constructor constructs a parallelogram with given point and three sides.

</member>
        <member name="M:OdGeBoundBlock3d.#ctor">
\details 
    The default constructor for the OdGeBoundBlock3d class. Constructs a parallelepiped reduced to the coordinate origin.
    \remarks
    A parallelepiped is a parallelogram extruded in an arbitrary direction. 

</member>
        <member name="M:OdGeExtents3d.op_Inequality(OdGeExtents3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Comparison operator for the OdGeExtents3d object.
    
    \returns
    A boolean value that indicates whether the input Extents object is not identical to this Extents object.

</member>
        <member name="M:OdGeExtents3d.op_Equality(OdGeExtents3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Comparison operator for the OdGeExtents3d object.
    
    \returns
    A boolean value that indicates whether the input Extents object is identical to this Extents object.

</member>
        <member name="M:OdGeExtents3d.isEqualTo(OdGeExtents3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Checks if this Extents object is equal to the passed Extents object.
    
    \param extents [in]  A 3D Extents object to be compared for equality.
    \param tol [in]  Geometric tolerance.
    
    \remarks
    This method compares this object to the passed object by testing the equivalence of their definition points. 
    If the points match within the range specified by tolerance, this method returns true. Otherwise, it returns false.

</member>
        <member name="M:OdGeExtents3d.setFrom2d(OdGeExtents2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeExtents3d.Convert2dPlane)">
\details
    Sets minimum and maximum points for this Extents object from a passed 2D Extents object.
    
    \param extents [in]  A 2D Extents object from which conversion is calculated.
    \param plane [in]  Plane on which the 2D Extents object lies.
    
    \remarks
    This method sets 0 to the coordinate on the axis that is absent in the passed 2D Extents object.

</member>
        <member name="M:OdGeExtents3d.convert2d(OdGeExtents2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeExtents3d.Convert2dPlane)">
\details
    Converts this 3D Extents object to a 2D Extents object.
    
    \param extents [out]  Resulting converted 2D Extents object.
    \param plane [in]  Plane according to which conversion is calculated.
    
    \remarks
    This method sets minimum and maximum 2D points of this Extents object, eliminating one of the axes.

</member>
        <member name="T:OdGeExtents3d.Convert2dPlane">
\details
    Types of 2D planes.

</member>
        <member name="M:OdGeExtents3d.diagonal">
\details
    Returns the vector from minimum to maximum point.

</member>
        <member name="M:OdGeExtents3d.center">
\details
    Returns a center point of this Extents object.

</member>
        <member name="M:OdGeExtents3d.isWithinRange(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
\details
   Checks whether the box intersects the sphere with specified center and radius.
   
   \param pt [in]  A 3D point that represents the sphere center.
   \param radius [in]  A radius of the sphere.   

</member>
        <member name="M:OdGeExtents3d.intersectWith(OdGeExtents3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeExtents3d*)">
\details
    Determines the intersection of the specified Extents object with this one,
    and returns the resulting intersection box.
    
    \param extents [in]  Any 3D Extents object.
    \param pResult [out]  Receives extents of the intersection.
    
    \remarks
    pResult object should be created by the caller. Possible return values are as follows.
    
    @untitled table
    kIntersectUnknown   Either or both extents boxes are invalid
    kIntersectNot       The extents boxes are NOT intersecting
    kIntersectOpIn      The specified Extents object is completely within this one
    kIntersectOpOut     This Extents object is completely within the specified one
    kIntersectOk        The extents boxes are intersecting, and a result is returned
    

</member>
        <member name="T:OdGeExtents3d.IntersectionStatus">
\details
  Types of intersection results.

</member>
        <member name="M:OdGeExtents3d.distanceTo(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Returns 0.0 if point is inside the box or euclidean distance in other case

</member>
        <member name="M:OdGeExtents3d.isDisjointEuclidean(OdGeExtents3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Same as isDisjoint, but checks precisely whether minimal Euclidean distance is greater than tolerance.

</member>
        <member name="M:OdGeExtents3d.isDisjoint(OdGeExtents3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if specified Extents object
    does not intersect this one.

    \param extents [in]  Any 3D Extents object.

</member>
        <member name="M:OdGeExtents3d.contains(OdGeExtents3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if this Extents object contains the specified extents.
    
    \param extents [in]  A 3D Extents object that is tested to be within this extents.
    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeExtents3d.contains(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if this Extents object contains the specified point.
    
    \param point [in]  A 3D point that is presumably contained inside this extents.
    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeExtents3d.transformBy(OdGeMatrix3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Applies the 3D transformation matrix to the extents.

    \param xfm [in]  3D transformation matrix.

</member>
        <member name="M:OdGeExtents3d.expandBy(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Updates the extents of this Extents object by the specified vector.
    \param vect [in]  A 3D vector that defines where new points are located.

</member>
        <member name="M:OdGeExtents3d.isValidExtents">
\details
    Returns true if and only if this Extents object contains valid extents.
    
    \remarks
    Extents are valid if and only if each member of the minimum extents 
    is less than or equal to the corresponding member of maximum extents.

</member>
        <member name="M:OdGeExtents3d.addExt(OdGeExtents3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Updates the extents of this Extents object with the specified array of points.

    \param points [in]  Array of 3D points to define the extents.

</member>
        <member name="M:OdGeExtents3d.addPoints(OdArray&lt;OdGePoint3d,OdMemoryAllocator&lt;OdGePoint3d&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Updates the extents of this Extents object with the specified point.

    \param point [in]  A 3D point that is added to define new extents.

</member>
        <member name="M:OdGeExtents3d.addPoint(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Updates the extents of this Extents object with the specified point.

    \param point [in]  Any 3D point.

</member>
        <member name="M:OdGeExtents3d.comparingSet(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets the minimum and maximum points for this Extents object to
    that of the box defined by pt1 and pt2.
    
    \param pt1 [in]  First point that defines the extents.
    \param pt2 [in]  Second point that defines the extents.

    \remarks
    The passed first and second points are only needed to define a box. The points
    themselves do not necessarily need to be minimum and maximum points. The
    coordinates of the passed points are compared and then set to real minimum and maximum points.

</member>
        <member name="M:OdGeExtents3d.set(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets the minimum and maximum points for this Extents object.
    
    \param min [in]  Minimum point.
    \param max [in]  Maximum point.

</member>
        <member name="M:OdGeExtents3d.op_Subscript(System.Int32)">
\details
    Returns the vertex of the box depending on index.
    Minimum vertex is returned when iIndex = 0, maximum vertex otherwise.

</member>
        <member name="M:OdGeExtents3d.maxPoint">
\details
    Returns the maximum point of this Extents object.

</member>
        <member name="M:OdGeExtents3d.minPoint">
\details
    Returns the minimum point of this Extents object.

</member>
        <member name="F:OdGeExtents3d.kInvalid">
\details
    The invalid extents.

</member>
        <member name="M:OdGeExtents3d.#ctor(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Constructor for the OdGeExtents3d class.
    \param min [in]  Minimum point.
    \param max [in]  Maximum point.

</member>
        <member name="M:OdGeExtents3d.#ctor">
\details
    Default constructor for the OdGeExtents3d class.

</member>
        <member name="M:OdGeMatrix3d.op_FunctionCall(System.Int32,System.Int32)">
\details
    Returns or references entry[row][column] as matrix(row,column).

    \param row [in]  Row.
    \param column [in]  Column.


\details
  Returns a matrix element specified with row and column.

  \param row    [in]  Row of a matrix. Must be in range from 0 to 3.
  \param column [in]  Column of a matrix. Must be in range from 0 to 3.


\details
  Returns a reference to a matrix element specified with row and column.

  \param row    [in]  Row of a matrix. Must be in range from 0 to 3.
  \param column [in]  Column of a matrix. Must be in range from 0 to 3.

</member>
        <member name="M:OdGeMatrix3d.op_Subscript(System.Int32)">
\details
    Returns or references entry[row] as matrix[row].

    \param row [in]  Row.


\details
  Returns a pointer to a constant matrix row.

  \param row [in]  Row of a matrix. Must be in range from 0 to 3.


\details
  Returns a pointer to a matrix row.

  \param row [in]  Row of a matrix. Must be in range from 0 to 3.

</member>
        <member name="M:OdGeMatrix3d.convertToLocal(OdGeVector3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Transforms the plane specified by a normal and an elevation. 
    \remarks
    Returns the normal and elevation of the transformed plane, as well as 
    a 2D transformation matrix for transforming points in the
    original plane coordinates to the transformed plane coordinates.

    \param normal [in/out] Normal to the plane.
    \param elevation [in/out] Elevation of the plane.

</member>
        <member name="M:OdGeMatrix3d.norm">
\details
    Returns the largest absolute value of the linear part of this matrix.

</member>
        <member name="M:OdGeMatrix3d.scale">
\details
    Returns the scale factor of this matrix.
    
    \remarks
    The scale factor is the square root of the longest column vector
    of the linear part of this matrix.

</member>
        <member name="M:OdGeMatrix3d.planeToWorld(OdGePlane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the matrix which maps
    the plane coordinate system to the WCS.
      
    \param plane [in]  The plane.   

</member>
        <member name="M:OdGeMatrix3d.planeToWorld(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the matrix which maps
    the plane coordinate system to the WCS.
    
    \param normal [in]  The normal to the plane.    
    
    \remarks
    If normal is specified, the origin of the plane is (0,0,0)    

</member>
        <member name="M:OdGeMatrix3d.worldToPlane(OdGePlane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the matrix which maps the WCS to
    the plane coordinate system.
    
    \param plane [in]  The plane.   

</member>
        <member name="M:OdGeMatrix3d.worldToPlane(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the matrix which maps the WCS to
    the plane coordinate system.
    
    \param normal [in]  The normal to the plane.    
    
    \remarks
    If normal is specified, the origin of the plane is (0,0,0).   

</member>
        <member name="M:OdGeMatrix3d.alignCoordSys(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerService">
\details
    Returns the matrix which maps
    the coordinate system defined by fromOrigin, fromXAxis, fromYAxis, and fromZAxis,
    to the coordinate system 
    defined by toOrigin, toXAxis, toYAxis, and toZAxis.
    
    \param fromOrigin [in]  Origin of the initial coordinate system.
    \param fromXAxis [in]  X-axis of the initial coordinate system.
    \param fromYAxis [in]  Y-axis of the initial coordinate system.
    \param fromZAxis [in]  Z-axis of the initial coordinate system.
    \param toOrigin [in]  Origin of the initial coordinate system.
    \param toXAxis [in]  X-axis of the initial coordinate system.
    \param toYAxis [in]  Y-axis of the initial coordinate system.
    \param toZAxis [in]  Z-axis of the initial coordinate system.

</member>
        <member name="M:OdGeMatrix3d.projection(OdGePlane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the matrix which parallel
    projects onto the specified plane in the 
    specified direction.
   
    \param projectionPlane [in]  Projection plane.
    \param projectDir [in]  Projection direction.

</member>
        <member name="M:OdGeMatrix3d.mirroring(OdGeLine3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the matrix which mirrors
    about the specified object, and returns a reference
    to this matrix.

    \param mirrorLine [in]  Mirror line entity.

</member>
        <member name="M:OdGeMatrix3d.mirroring(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the matrix which mirrors
    about the specified object, and returns a reference
    to this matrix.
    
    \param mirrorPoint [in]  Mirror point.

</member>
        <member name="M:OdGeMatrix3d.mirroring(OdGePlane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the matrix which mirrors
    about the specified object, and returns a reference
    to this matrix.
    
    \param mirrorPlane [in]  Mirror plane.

</member>
        <member name="M:OdGeMatrix3d.scaling(OdGeScale3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the matrix which scales
    by scale about center, and returns a reference
    to this matrix.
    
    \param scale [in]  Scale factor.
    \param center [in]  Center of scaling.

</member>
        <member name="M:OdGeMatrix3d.scaling(System.Double,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the matrix which scales
    by scale about center, and returns a reference
    to this matrix.
    
    \param scale [in]  Scale factor.
    \param center [in]  Center of scaling.

</member>
        <member name="M:OdGeMatrix3d.rotation(System.Double,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the matrix which rotates
    by angle about an axis passing through center, and returns a reference
    to this matrix.
    
    \param angle [in]  Rotation angle.
    \param axis [in]  Rotation axis.
    \param center [in]  Center of rotation.

</member>
        <member name="M:OdGeMatrix3d.translation">
\details
    Returns the translation vector of this matrix.

</member>
        <member name="M:OdGeMatrix3d.translation(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the matrix of the translation by vect.
    
    \param vect [in]  Translation vector.

</member>
        <member name="M:OdGeMatrix3d.setToPlaneToWorld(OdGePlane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the matrix which maps
    the plane coordinate system to the WCS, and returns a reference to this matrix.
    
    \param plane [in]  The plane. 

</member>
        <member name="M:OdGeMatrix3d.setToPlaneToWorld(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the matrix which maps
    the plane coordinate system to the WCS, and returns a reference to this matrix.
    
    \param normal [in]  The normal to the plane.    
    
    \remarks
    If normal is specified, the origin of the plane is (0,0,0).    

</member>
        <member name="M:OdGeMatrix3d.setToWorldToPlane(OdGePlane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the matrix which maps the WCS to
    the plane coordinate system, and returns a reference to this matrix.
    
    \param plane [in]  The plane.

</member>
        <member name="M:OdGeMatrix3d.setToWorldToPlane(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the matrix which maps the WCS to
    the plane coordinate system, and returns a reference to this matrix.
    
    \param normal [in]  The normal to the plane.    
    
    \remarks
    If normal is specified, the origin of the plane is (0,0,0).    

</member>
        <member name="M:OdGeMatrix3d.setToAlignCoordSys(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerSe">
\details
    Sets this matrix to the matrix which maps
    the coordinate system defined by fromOrigin, fromXAxis, fromYAxis, and fromZAxis,
    to the coordinate system 
    defined by toOrigin, toXAxis, toYAxis, and toZAxis, and returns a reference
    to this matrix.
    
    \param fromOrigin [in]  Origin of the initial coordinate system.
    \param fromXAxis [in]  X-axis of the initial coordinate system.
    \param fromYAxis [in]  Y-axis of the initial coordinate system.
    \param fromZAxis [in]  Z-axis of the initial coordinate system.
    \param toOrigin [in]  Origin of the initial coordinate system.
    \param toXAxis [in]  X-axis of the initial coordinate system.
    \param toYAxis [in]  Y-axis of the initial coordinate system.
    \param toZAxis [in]  Z-axis of the initial coordinate system.

</member>
        <member name="M:OdGeMatrix3d.setToProjection(OdGePlane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the matrix which parallel
    projects onto the specified plane in the 
    specified directionm and returns a reference
    to this matrix.
   
    \param projectionPlane [in]  Projection plane.
    \param projectDir [in]  Projection direction.

</member>
        <member name="M:OdGeMatrix3d.setToMirroring(OdGeLine3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the matrix which mirrors
    about the specified object, and returns a reference
    to this matrix.
    
    \param mirrorLine [in]  Mirror line entity.

</member>
        <member name="M:OdGeMatrix3d.setToMirroring(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the matrix which mirrors
    about the specified object, and returns a reference
    to this matrix.

    \param mirrorPoint [in]  Mirror point.

</member>
        <member name="M:OdGeMatrix3d.setToMirroring(OdGePlane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the matrix which mirrors
    about the specified object, and returns a reference
    to this matrix.
    
    \param mirrorPlane [in]  Mirror plane.

</member>
        <member name="M:OdGeMatrix3d.setToScaling(OdGeScale3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the matrix which scales
    by scale about center, and returns a reference
    to this matrix.
    
    \param scale [in]  Scale factor.
    \param center [in]  Center of scaling.

</member>
        <member name="M:OdGeMatrix3d.setToScaling(System.Double,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the matrix which scales
    by scale about center, and returns a reference
    to this matrix.
    
    \param scale [in]  Scale factor.
    \param center [in]  Center of scaling.

</member>
        <member name="M:OdGeMatrix3d.setToRotation(System.Double,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the matrix which rotates
    by angle about an axis passing through center, and returns a reference
    to this matrix.
    
    \param angle [in]  Rotation angle.
    \param axis [in]  Rotation axis.
    \param center [in]  Center of rotation.

</member>
        <member name="M:OdGeMatrix3d.setToTranslation(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the matrix which translates
    by vect, and returns a reference
    to this matrix.
    
    \param vect [in]  Translation vector.

</member>
        <member name="M:OdGeMatrix3d.getCsZAxis">
\details
    Returns the Z-axis of the coordinate system 
    to which this matrix maps the WCS.

</member>
        <member name="M:OdGeMatrix3d.getCsYAxis">
\details
    Returns the Y-axis of the coordinate system 
    to which this matrix maps the WCS.

</member>
        <member name="M:OdGeMatrix3d.getCsXAxis">
\details
    Returns the X-axis of the coordinate system 
    to which this matrix maps the WCS.

</member>
        <member name="M:OdGeMatrix3d.getCsOrigin">
\details
    Returns the origin of the coordinate system 
    to which this matrix maps the WCS.

</member>
        <member name="M:OdGeMatrix3d.getCoordSystem(OdGePoint3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the origin, X-axis, Y-axis, and Z-axis of the coordinate system 
    to which this matrix maps the WCS.
    
    \param origin [out]  Receives the origin of the coordinate system.
    \param xAxis [out]  Receives the X-axis of the coordinate system.
    \param yAxis [out]  Receives the Y-axis of the coordinate system.
    \param zAxis [out]  Receives the Z-axis of the coordinate system.

</member>
        <member name="M:OdGeMatrix3d.setCoordSystem(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the matrix which maps
    the WCS to the coordinate system 
    defined by origin, X-axis, Y-axis, and Z-axis, and returns a reference
    to this matrix.
    
    \param origin [in]  Origin of the coordinate system.
    \param xAxis [in]  X-axis of the coordinate system.
    \param yAxis [in]  Y-axis of the coordinate system.
    \param zAxis [in]  Z-axis of the coordinate system.

</member>
        <member name="M:OdGeMatrix3d.setTranslation(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets the translation part of the matrix to the specified vector.
    
    \param vect [in]  Translation vector.

</member>
        <member name="M:OdGeMatrix3d.det">
\details
    Returns the determinant of this matrix.

</member>
        <member name="M:OdGeMatrix3d.isPerspective(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Indicates whether a matrix can be used for perspective projections.
    
    \param tol [in]  Geomentric tolerance.
    
    \remarks
    Returns true if [3][0] or [3][1] or [3][2] elements have non-zero values considering passed tolerance.

</member>
        <member name="M:OdGeMatrix3d.isScaledOrtho(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only the column vectors of the linear part of
    this matrix are mutually perpendicular within the
    specified tolerance.
    
    \param tol [in]  Geomentric tolerance.

</member>
        <member name="M:OdGeMatrix3d.isUniScaledOrtho(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only the columns vectors of the linear part of
    this matrix are of equal length and mutually perpendicular within the
    specified tolerance. 

    \param tol [in]  Geomentric tolerance.

</member>
        <member name="M:OdGeMatrix3d.isEqualTo(OdGeMatrix3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if matrix is identical to this one,
    within the specified tolerance.

    \param matrix [in]  Matrix to be compared.
    \param tol [in]  Geomentric tolerance.

</member>
        <member name="M:OdGeMatrix3d.op_Inequality(OdGeMatrix3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Inequality operator. 

</member>
        <member name="M:OdGeMatrix3d.op_Equality(OdGeMatrix3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Equality operator. 

</member>
        <member name="M:OdGeMatrix3d.transpose">
\details
    Returns the transpose of this matrix. 

</member>
        <member name="M:OdGeMatrix3d.transposeIt">
\details
    Sets this matrix to its transpose, and returns
    a reference to this matrix. 

</member>
        <member name="M:OdGeMatrix3d.isSingular(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if this matrix is singular.
    
    \remarks
    * A matrix is singular if and only if its determinant == 0.
    * A singular matrix cannot be inverted.

</member>
        <member name="M:OdGeMatrix3d.inverse(OdGeMatrix3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
\details
    Returns true if and only if this matrix has an inverse,
    and the inverse of this matrix.
    
    \param inverseMatrix [out]  Receives the inverse matrix.
    \param tol [in]  Geometric tolerance. 

</member>
        <member name="M:OdGeMatrix3d.invert">
\details
    Sets this matrix to its inverse, and returns
    a reference to this matrix. 

</member>
        <member name="M:OdGeMatrix3d.setToProduct(OdGeMatrix3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeMatrix3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the product matrix1 * matrix2, and returns
    a reference to this matrix. 
    
    \param matrix1 [in]  First 3D matrix that is multiplied.
    \param matrix2 [in]  Second 3D matrix that is multiplied.

</member>
        <member name="M:OdGeMatrix3d.postMultBy(OdGeMatrix3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the product (this matrix) * rightSide, and returns
    a reference to this matrix. 
    
    \param rightSide [in]  3D matrix that will be multiplied with this matrix.

</member>
        <member name="M:OdGeMatrix3d.preMultBy(OdGeMatrix3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the product leftSide * (this matrix), and returns
    a reference to this matrix. 
    
    \param leftSide [in]  3D matrix that will be multiplied with this matrix.

</member>
        <member name="M:OdGeMatrix3d.op_MultiplicationAssignment(OdGeMatrix3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the product (this matrix) * matrix, and returns
    a reference to this matrix. 

</member>
        <member name="M:OdGeMatrix3d.op_Multiply(OdGeMatrix3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the product (this matrix) * matrix. 

</member>
        <member name="M:OdGeMatrix3d.validateZero(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets any values within tol of 0 to 0.

</member>
        <member name="M:OdGeMatrix3d.setToIdentity">
\details
    Sets this matrix to the identity matrix, and returns a reference to this matrix.

</member>
        <member name="M:OdGeMatrix3d.#ctor">
\details
    Default constructor for the OdGeMatrix3d class.
    
    \remarks
    Constructs a matrix for 3D transformation operations and sets it to identity.

</member>
        <member name="M:OdGeMatrix2d.op_FunctionCall(System.Int32,System.Int32)">
\details
    Returns or references entry[row][column] as matrix(row,column).

    \param row [in]  Row.
    \param column [in]  Column.

</member>
        <member name="M:OdGeMatrix2d.op_Subscript(System.Int32)">
\details
    Returns or references entry[row] as matrix[row].

    \param row [in]  Row.

</member>
        <member name="M:OdGeMatrix2d.alignCoordSys(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the matrix which maps
    the  coordinate system defined by fromOrigin, fromXAxis, and fromYAxis,
    to the coordinate system 
    defined by toOrigin, toXAxis, and toYAxis.
    
    \param fromOrigin [in]  Origin of the initial coordinate system.
    \param fromXAxis [in]  X-axis of the initial coordinate system.
    \param fromYAxis [in]  Y-axis of the initial coordinate system.
    \param toOrigin [in]  Origin of the initial coordinate system.
    \param toXAxis [in]  X-axis of the initial coordinate system.
    \param toYAxis [in]  Y-axis of the initial coordinate system.

</member>
        <member name="M:OdGeMatrix2d.mirroring(OdGeLine2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the matrix which mirrors
    about the specified object.
   
    \param mirrorLine [in]  Mirror line entity.

</member>
        <member name="M:OdGeMatrix2d.mirroring(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the matrix which mirrors
    about the specified object.
   
    \param mirrorPoint [in]  Mirror point.

</member>
        <member name="M:OdGeMatrix2d.scaling(System.Double,OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the matrix which scales
    by scale about center.
    
    \param scale [in]  Scale factor.
    \param center [in]  Center of scaling.

</member>
        <member name="M:OdGeMatrix2d.rotation(System.Double,OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the matrix which rotates
    by angle about center.
    
    \param angle [in]  Rotation angle.
    \param center [in]  Center of rotation.

</member>
        <member name="M:OdGeMatrix2d.setToAlignCoordSys(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the matrix which maps
    the coordinate system defined by fromOrigin, fromXAxis, and fromYAxis,
    to the coordinate system 
    defined by toOrigin, toXAxis, and toYAxis, and returns a reference
    to this matrix.
    
    \param fromOrigin [in]  Origin of the initial coordinate system.
    \param fromXAxis [in]  X-axis of the initial coordinate system.
    \param fromYAxis [in]  Y-axis of the initial coordinate system.
    \param toOrigin [in]  Origin of the initial coordinate system.
    \param toXAxis [in]  X-axis of the initial coordinate system.
    \param toYAxis [in]  Y-axis of the initial coordinate system.

</member>
        <member name="M:OdGeMatrix2d.setToMirroring(OdGeLine2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the matrix which mirrors
    about the specified object, and returns a reference
    to this matrix.

    \param mirrorLine [in]  Mirror line entity.

</member>
        <member name="M:OdGeMatrix2d.setToMirroring(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the matrix which mirrors
    about the specified object, and returns a reference
    to this matrix.
    
    \param mirrorPoint [in]  Mirror point.

</member>
        <member name="M:OdGeMatrix2d.setToScaling(System.Double,OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the matrix which scales
    by scale about center, and returns a reference
    to this matrix.
    
    \param scale [in]  Scale factor.
    \param center [in]  Center of scaling.

</member>
        <member name="M:OdGeMatrix2d.setToRotation(System.Double,OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the matrix which rotates
    by angle about center, and returns a reference
    to this matrix.
    
    \param angle [in]  Rotation angle.
    \param center [in]  Center of rotation.

</member>
        <member name="M:OdGeMatrix2d.setToTranslation(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the matrix which translates
    by vect, and returns a reference
    to this matrix.
    
    \param vect [in]  Translation vector.

</member>
        <member name="M:OdGeMatrix2d.getCoordSystem(OdGePoint2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the origin, X-axis, and Y-axis of the coordinate system 
    to which this matrix maps the WCS.
    
    \param origin [out]  Receives the origin of the coordinate system.
    \param xAxis [out]  Receives the X-axis of the coordinate system.
    \param yAxis [out]  Receives the Y-axis of the coordinate system.

</member>
        <member name="M:OdGeMatrix2d.setCoordSystem(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the matrix which maps
    the WCS to the coordinate system 
    defined by origin, X-axis, and Y-axis, and returns a reference
    to this matrix.
    
    \param origin [in]  Origin of the coordinate system.
    \param xAxis [in]  X-axis of the coordinate system.
    \param yAxis [in]  Y-axis of the coordinate system.

</member>
        <member name="M:OdGeMatrix2d.isConformal(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if an only if this matrix is conformal (isUniScaledOrtho()),
    and returns the scale factor, angle of rotation,
    the presence of a mirror component to the matrix,
    and the direction of reflection.
          
    \param scale [out]  Receives the scale factor.
    \param angle [out]  Receives the angle of rotation.
    \param isMirror [out]  Receives true if andn only if the matrix has a mirror component.
    \param reflex [in]  Direction of reflection.
    
    \remarks
    reflex is valid if and only if isMirror is true.

</member>
        <member name="M:OdGeMatrix2d.translation(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the matrix of the translation by vector.
    
    \param vector [in]  Translation vector.

</member>
        <member name="M:OdGeMatrix2d.translation">
\details
      Returns the translation vector of this matrix.

</member>
        <member name="M:OdGeMatrix2d.setTranslation(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets the translation part of the matrix to the specified vector.
    
    \param vect [in]  Translation vector.

</member>
        <member name="M:OdGeMatrix2d.det">
\details
    Returns the determinant of this matrix.

</member>
        <member name="M:OdGeMatrix2d.scale">
\details
    Returns the scale factor of this matrix.
    
    \remarks
    The scale factor is the square root of the longest column vector
    of the linear part of this matrix.

</member>
        <member name="M:OdGeMatrix2d.isScaledOrtho(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only the column vectors of the linear part of
    this matrix are perpendicular
    to each other within the specified tolerance.

    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeMatrix2d.isUniScaledOrtho(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only the columns vectors of the linear part of
    this matrix are of equal length and perpendicular
    to each other  within the
    specified tolerance. 

    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeMatrix2d.isEqualTo(OdGeMatrix2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if matrix is identical to this one,
    within the specified tolerance.

    \param matrix [in]  Matrix to be compared.
    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeMatrix2d.op_Inequality(OdGeMatrix2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Inequality operator. 

</member>
        <member name="M:OdGeMatrix2d.op_Equality(OdGeMatrix2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Equality operator. 

</member>
        <member name="M:OdGeMatrix2d.transpose">
\details
    Returns the transpose of this matrix. 

</member>
        <member name="M:OdGeMatrix2d.transposeIt">
\details
    Sets this matrix to its transpose, and returns
    a reference to this matrix. 

</member>
        <member name="M:OdGeMatrix2d.isSingular(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if this matrix is singular.
    
    \remarks
    * A matrix is singular if and only if its determinant == 0.
    * A singular matrix cannot be inverted.

</member>
        <member name="M:OdGeMatrix2d.inverse">
\details
    Returns the inverse of this matrix. 

</member>
        <member name="M:OdGeMatrix2d.invert">
\details
    Sets this matrix to its inverse, and returns
    a reference to this matrix. 

</member>
        <member name="M:OdGeMatrix2d.setToProduct(OdGeMatrix2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeMatrix2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the product matrix1 * matrix2, and returns
    a reference to this matrix.
     
    \param matrix1 [in]  First 2D matrix that is multiplied.
    \param matrix2 [in]  Second 2D matrix that is multiplied.

</member>
        <member name="M:OdGeMatrix2d.postMultBy(OdGeMatrix2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the product (this matrix) * rightSide, and returns
    a reference to this matrix. 
    
    \param rightSide [in]  2D matrix that will be multiplied with this matrix. 
    
    \remarks
    Note that when multiplying matrices, the order matters. This method provides different results than preMultBy even with the same parameters.

</member>
        <member name="M:OdGeMatrix2d.preMultBy(OdGeMatrix2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this matrix to the product leftSide * (this matrix), and returns
    a reference to this matrix.
    
    \param leftSide [in]  2D matrix that will be multiplied with this matrix.
    
    \remarks
    Note that when multiplying matrices, the order matters. This method provides different results than postMultBy even with the same parameters.

</member>
        <member name="M:OdGeMatrix2d.op_MultiplicationAssignment(OdGeMatrix2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\remarks
    Sets this matrix to the product (this matrix) * matrix, and returns
    a reference to this matrix. 

</member>
        <member name="M:OdGeMatrix2d.op_Multiply(OdGeMatrix2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the product (this matrix) * matrix. 

</member>
        <member name="M:OdGeMatrix2d.setToIdentity">
\details
    Sets this matrix to the identity matrix, and returns a reference to this matrix.

</member>
        <member name="F:OdGeMatrix2d.kIdentity">
\details
      The identity matrix.

</member>
        <member name="M:OdGeMatrix2d.#ctor">
\details
    Default constructor for the OdGeMatrix2d class.
    
    \remarks
    Constructs a matrix for 2D transformation operations and sets it to the identity.

</member>
        <member name="M:OdGeEntity3d.isOn(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if the specified point is on this entity, 
    as determined by the tolerance.

    \param point [in]  Point to be queried.
    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeEntity3d.scaleBy(System.Double,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Scales this entity by the scale factor about the basepoint, and returns
    a reference to this entity.

    \param scaleFactor [in]  Scale Factor. Must be greater than 0.
    \param basePoint [in]  Basepoint.

</member>
        <member name="M:OdGeEntity3d.mirror(OdGePlane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Mirrors this entity about the specified plane, and returns
    a reference to this entity.

    \param plane [in]  Plane about which entity is to be mirrored.

</member>
        <member name="M:OdGeEntity3d.rotateBy(System.Double,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Rotates this entity by the specified angle about the axis
    defined by the point and the vector, and returns
    a reference to this entity.

    \param angle [in]  Rotation angle.
    \param vect [in]  Vector about which entitiy is rotated. 
    \param basePoint [in]  Basepoint.

</member>
        <member name="M:OdGeEntity3d.translateBy(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Applies the 3D translation vector to this entity, and returns
    a reference to this entity.

    \param translateVec [in]  Translation Vector.

</member>
        <member name="M:OdGeEntity3d.transformBy(OdGeMatrix3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Applies the 3D transformation matrix to this entity, and returns
    a reference to this entity.

    \param xfm [in]  3D transformation matrix.

</member>
        <member name="M:OdGeEntity3d.isEqualTo(OdGeEntity3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns true if the specified entity is equal to this one.

    \remarks
    Returns true if and only if both entities are of the same type, have the same point set within the 
    specified tolerance, and have the same parameterization.

    \param other [in]  Entity to be compared
    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeEntity3d.op_Inequality(OdGeEntity3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Comparison operator for the OdGeEntity3d object.
    
    \returns
    A boolean value that indicates whether the input entity is not identical to this entity.

</member>
        <member name="M:OdGeEntity3d.op_Equality(OdGeEntity3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Comparison operator for the OdGeEntity3d object.
    
    \returns
    A boolean value that indicates whether the input entity is identical to this entity.

</member>
        <member name="M:OdGeEntity3d.op_Assign(OdGeEntity3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Assignment operator for the OdGeEntity3d object.

</member>
        <member name="M:OdGeEntity3d.copy">
\details
    Returns a copy of this entity.

    \remarks
  The returned object is created with the new operator, and it is the responsibility of the caller to delete it.

</member>
        <member name="M:OdGeEntity3d.type">
\details
    Returns the entity type.

</member>
        <member name="M:OdGeEntity3d.isKindOf(OdGe.EntityId)">
\details
    Returns true if and only if this entity is of type (or is derived from) entType.

    \param entType [in]  Entity type to test. 

</member>
        <member name="M:op_Multiply(System.Double,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
Returns the product of scale * vect. 

\param scale [in] Scale factor to be multiplied with vector.
\param vect [in] Any 3D vector to be multiplied with scale factor.

</member>
        <member name="M:op_Multiply(OdGeMatrix3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
Returns the product of matrix * vect.  

\param matrix [in] Any 3D *matrix* to be multiplied with vector.
\param vect [in] Any 3D vector to be multiplied with matrix.

</member>
        <member name="M:OdGeVector3d.op_Implicit~OdGeMatrix3d">
\details
    Returns the equivalent 3D tranformation matrix.

</member>
        <member name="M:OdGeVector3d.set(OdGePlanarEnt!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this vector to the specified arguments, 
    and returns a reference to this vector.

    \param vect [in]  Any 2D vector.
    \param plane [in]  Any plane.
    
    \remarks
    When called with plane and vector, constructs 
    the 3D vector correspoponding to the 2D vector
    in the coordinates of the plane:
    
            uAxis * vect.x + vAxis * vect.y
    
    where uAxis and vAxis are returned by
    
            plane.get(origin, uAxis, vAxis)
            
    The 3D vector will be parallel to the 2D vector.

</member>
        <member name="M:OdGeVector3d.set(System.Double,System.Double,System.Double)">
\details
    Sets this vector to the specified arguments, 
    and returns a reference to this vector.

    \param xx [in]  X-coordinate.
    \param yy [in]  Y-coordinate.
    \param zz [in]  Z-coordinate.

</member>
        <member name="M:OdGeVector3d.largestElement">
\details
    Returns the index of the largest absolute coordinate of this vector.

</member>
        <member name="M:OdGeVector3d.op_Subscript(System.UInt32)">
\details 
    Returns the ith coordinate of this vector.
    
    \param i [in]  Index of coordinate.
    
    \remarks
    * 0 returns the X-coordinate.
    * 1 returns the Y-coordinate.
    * 2 returns the Z-coordinate.


\details 
    References the ith coordinate of this vector.
    
    \param i [in]  Index of coordinate.
    
    \remarks
    * 0 references the X-coordinate.
    * 1 references the Y-coordinate.
    * 2 references the Z-coordinate.

</member>
        <member name="M:OdGeVector3d.isEqualTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if vect is identical to this vector,
    within the specified tolerance.

    \param vect [in]  Any 3D vector.
    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeVector3d.op_Inequality(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Inequality operator for the OdGeVector3d class.

    \param vect [in]   A 3D vector to be compared.
    
    \remarks
    Returns true if passed vector is not equal to this vector.

</member>
        <member name="M:OdGeVector3d.op_Equality(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Equality operator for the OdGeVector3d class.

    \param vect [in]   A 3D vector to be compared.
    
    \remarks
    Returns true if passed vector is equal to this vector.

</member>
        <member name="M:OdGeVector3d.orthoProject(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns a 3D vector which is the result of the orthogonal projection of this vector into the plane with normal planeNormal passing through the origin.
    
    \param planeNormal [in]  A 3D vector which is a normal vector of a plane on which this vector is projected.
    \param tol [in]  Geometric tolerance.
    \param flag [in]  A flag that displays if method executed successfully.
    
    \remarks
    The flag is set to kOk value if method executed successfully, otherwise it is set to k0This value.

</member>
        <member name="M:OdGeVector3d.orthoProject(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns a 3D vector which is the result of the orthogonal projection of this vector into the plane with normal planeNormal passing through the origin.
    
    \param planeNormal [in]  A 3D vector which is a normal vector of a plane on which this vector is projected.

</member>
        <member name="M:OdGeVector3d.crossProduct(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the cross product of this vector and the specified vector.
    
    \param vect [in]  Any 3D vector.

</member>
        <member name="M:OdGeVector3d.dotProduct(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the dot product of this vector and the specified vector.
    
    \param vect [in]  Any 3D vector.

</member>
        <member name="M:OdGeVector3d.isPerpendicularTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if the specified vector is perpendicular to this vector within the specified tolerance.

    \param vect [in]  Any 3D vector.
    \param tol [in]  Geometric tolerance.   

</member>
        <member name="M:OdGeVector3d.isCodirectionalTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if the specified vector is codirectional to this vector within the specified tolerance.

    \param vect [in]  Any 3D vector.
    \param tol [in]  Geometric tolerance. 

</member>
        <member name="M:OdGeVector3d.isParallelTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if the specified vector is parallel to this vector within the specified tolerance.

    \param vect [in]  Any 3D vector.
    \param tol [in]  Geometric tolerance.   

</member>
        <member name="M:OdGeVector3d.isZeroLength(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if the length of this vector is 0.0 within the specified tolerance.

    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeVector3d.isUnitLength(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if the length of this vector is 1.0 within the specified tolerance.

    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeVector3d.lengthSqrd">
\details
    Returns the square of the length of this vector.

</member>
        <member name="M:OdGeVector3d.setLength(System.Double)">
\details
    Sets the length of this vector.

</member>
        <member name="M:OdGeVector3d.length">
\details
    Returns the length of this vector.

</member>
        <member name="M:OdGeVector3d.angleOnPlane(OdGePlanarEnt!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the angle of this vector projected onto
    the specified plane
    
    \param plane [in]  Any 3D plane.
    
    \remarks
    This vector is projected orthogonally onto the 
    plane through its origin, and is measured with
    respect to axis1 as returned by
    
            plane.getCoordSystem(origin, axis1, axis2)

</member>
        <member name="M:OdGeVector3d.angleTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the angle to the specified vector.
    
    \param vect [in]  Any 3D vector.

    \remarks
    If refVector is not specified:
      * Returns a value in the range [0.0 .. OdaPI].
      * This function is commutative.

</member>
        <member name="M:OdGeVector3d.perpVector">
\details
    Returns a vector perpendicular to this one.
    
    \remarks
    The orthogonal vector is determined by function OdGeContext::gOrthoVector()

</member>
        <member name="M:OdGeVector3d.negate">
\details
    Negates this vector (-x, -y, -z), and returns a reference to this vector.

</member>
        <member name="M:OdGeVector3d.op_UnaryNegation">
\details
    Returns a vector with inverted X, Y and Z coordinates.

</member>
        <member name="M:OdGeVector3d.setToSum(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this vector to vector1 + vector1, and returns a reference to this vector.
    
    \param vector1 [in]  Any 3D vector.
    \param vector2 [in]  Any 3D vector.

</member>
        <member name="M:OdGeVector3d.asPoint">
\details
  Returns this vector as a point.


\details
  Returns this vector as a point.

</member>
        <member name="M:OdGeVector3d.op_SubtractionAssignment(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Subtraction operator for the OdGeVector3d class.

    \param vect [in]   A 3D vector to be subtracted.
    
    \remarks
    Returns a vector that is created by subtracting coordinates of the passed vector from the coordinates of this vector.

</member>
        <member name="M:OdGeVector3d.op_Subtraction(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Subtraction operator for the OdGeVector3d class.

    \param vect [in]  A 3D vector to be subtracted.
    
    \remarks
    Returns a vector that is created by subtracting coordinates of the passed vector from the coordinates of this vector.

</member>
        <member name="M:OdGeVector3d.op_AdditionAssignment(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Addition operator for the OdGeVector3d class.

    \param vect [in]   A 3D vector to be added.
    
    \remarks
    Adds coordinates of the specified vector to the coordinates of this vector and returns a reference to this vector.

</member>
        <member name="M:OdGeVector3d.op_Addition(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Addition operator for the OdGeVector3d class.

    \param vect [in]  A 3D vector to be added.
    
    \remarks
    Returns a vector that is created by adding coordinates of this vector to the coordinates of the specified vector.

</member>
        <member name="M:OdGeVector3d.op_DivisionAssignment(System.Double)">
\details
    Division operator for the OdGeVector3d class.

    \param scale [in]  Scale factor.
    
    \remarks
    Divides coordinates of this vector by the scale factor and returns reference to this vector.

</member>
        <member name="M:OdGeVector3d.op_Division(System.Double)">
\details
    Division operator for the OdGeVector3d class.

    \param scale [in]  Scale factor.
    
    \remarks
    Returns a vector with divided coordinates of this vector by the scale factor.

</member>
        <member name="M:OdGeVector3d.op_MultiplicationAssignment(System.Double)">
\details
    Multiplication operator for the OdGeVector3d class.

    \param scale [in]  Scale factor.
    
    \remarks
    Multiplies coordinates of this vector by the scale factor and returns reference to this vector.

</member>
        <member name="M:OdGeVector3d.op_Multiply(System.Double)">
\details
    Multiplication operator for the OdGeVector3d class.

    \param scale [in]  Scale factor.
    
    \remarks
    Returns a vector with multiplied coordinates of this vector by the scale factor.

</member>
        <member name="M:OdGeVector3d.convert2d">
\details
    Returns the 2D vector, in the coordinate system
    of the plane, corresponding to the 3D vector.
    
    \remarks
    The 3D vector must be parallel to the plane.
    
    If no plane is specified, the XY plane is used.

</member>
        <member name="M:OdGeVector3d.convert2d(OdGePlanarEnt!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the 2D vector, in the coordinate system
    of the plane, corresponding to the 3D vector.
    
    \remarks
    The 3D vector must be parallel to the plane.
    
    If no plane is specified, the XY plane is used.

</member>
        <member name="M:OdGeVector3d.mirror(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Mirrors the entity about the plane passing through the
    origin with the specified normal, and returns
    a reference to the entity.

    \param normalToPlane [in]  Normal to Plane.

</member>
        <member name="M:OdGeVector3d.rotateBy(System.Double,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Rotates this vector the specified angle
    about the specified axis,
    and returns a reference to this vector.

    \param angle [in]  Rotation angle.
    \param axis [in]  Axis of rotation.

</member>
        <member name="M:OdGeVector3d.transformBy(OdGeMatrix3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Applies the 3D transformation matrix to this vector.

    \param xfm [in]  3D transformation matrix.

</member>
        <member name="M:OdGeVector3d.setToProduct(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
\details
    Sets this vector to the product scale * vect and returns
    a reference to this vector. 
     
    \param vect [in]  Any 3D vector.
    \param scale [in]  Scale factor.

</member>
        <member name="M:OdGeVector3d.setToProduct(OdGeMatrix3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this vector to the product matrix * vect and returns
    a reference to this vector. 
    
    \param matrix [in]  Any 3D matrix. 
    \param vect [in]  Any 3D vector.

</member>
        <member name="M:OdGeVector3d.#ctor(OdGePlanarEnt!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Constructor for the OdGeVector3d class.
    
    \param plane [in]  2D plane.
    \param vector2d [in]  2D vector.
    
    \remarks
    Constructs  the 3D vector correspoponding to the 2D vector in the coordinates of the plane:
    
      uAxis * vect.x + vAxis * vect.y
    
    where uAxis and vAxis are returned by
    
      plane.get(origin, uAxis, vAxis)

</member>
        <member name="M:OdGeVector3d.#ctor(System.Double,System.Double,System.Double)">
\details 
    Constructor for the OdGeVector3d class.
    
    \param xx [in]  X-coordinate.
    \param yy [in]  Y-coordinate.
    \param zz [in]  Z-coordinate.
    
    \remarks
    Constructs a 3D vector with specified X, Y and Z coordinates.

</member>
        <member name="M:OdGeVector3d.#ctor">
\details 
    Default constructor for the OdGeVector3d class.
    
    \remarks
    Constructs a zero-length 3D vector.

</member>
        <member name="M:OdGePoint3d.swapWithPoint(OdGePoint3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Swaps coordinates of this point and the specified point.
    
    \param point [in]  A 3D point's coordinates which are swapped with coordinates of this point.

</member>
        <member name="M:OdGePoint3d.set(OdGePlanarEnt!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets the parameters for this point according to the arguments
    
    \param plane [in]  Any plane.
    \param point [in]  Any 2D point.
    
    \remarks
    Returns a reference to this point.
    \remarks
    plane and pnt2d define a point as follows:
            
            p + uAxis * point.x + vAxis * point.y,
            
    where p, uAxis, and vAxis are returned by the function call plane.get (p, uAxis, vAxis);

</member>
        <member name="M:OdGePoint3d.set(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
\details
    Sets the parameters for this point according to the arguments.
    
    \param xy [in]  A 2D point that provides the X and Y coordinates for this point.
    \param zz [in]  The Z-coordinate of this point.

</member>
        <member name="M:OdGePoint3d.set(System.Double,System.Double,System.Double)">
\details
    Sets the parameters for this point according to the arguments
    
    \param xx [in]  The X-coordinate of this point.
    \param yy [in]  The Y-coordinate of this point.
    \param zz [in]  The Z-coordinate of this point.

</member>
        <member name="M:OdGePoint3d.op_Subscript(System.UInt32)">
\details
Returns ith coordinate of this point.

\param i [in]  Index of coordinate.

\remarks
* 0 returns the X-coordinate.
* 1 returns the Y-coordinate.
* 2 returns the Z-coordinate.


\details
References ith coordinate of this point.

\param i [in]  Index of coordinate.

\remarks
* 0 references the X-coordinate.
* 1 references the Y-coordinate.
* 2 references the Z-coordinate.

</member>
        <member name="M:OdGePoint3d.isEqualTo(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if the distance from this point to point is within the 
    specified tolerance.

    \param point [in]  Any 3D point.
    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGePoint3d.op_Inequality(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Inequality operator. Returns true if any of the coordinates of this point are not equal to the corresponding coordinates
    of the specified point.
    
    \param point [in] A 3D point to be checked for inequality with this point.

</member>
        <member name="M:OdGePoint3d.op_Equality(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Equality operator. Returns true if all the coordinates of this point are equal to the corresponding coordinates
    of the specified point.
    
    \param point [in] A 3D point to be checked for equality with this point.

</member>
        <member name="M:OdGePoint3d.orthoProject(OdGePlane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the 3D point that is the result of the orthogonal projection of this point into the specified plane. 

    \param plane [in]  Plane on which this point is to be projected

</member>
        <member name="M:OdGePoint3d.project(OdGePlane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Projects this point onto the specified plane along the specified vector.

    \param plane [in]  Plane on which this point is to be projected
    \param vect [in]  Vector defining the projection direction.

</member>
        <member name="M:OdGePoint3d.distanceSqrdTo(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the squared distance from this point to the specified point.

    \param point [in]  Any 3D point to which a squared distance is measured.

</member>
        <member name="M:OdGePoint3d.distanceTo(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the distance from this point to the specified point.

    \param point [in]  Any 3D point to which a distance is measured.

</member>
        <member name="M:OdGePoint3d.asVector">
\details
    Returns this point as a vector.


\details
  Returns this point as a vector.

</member>
        <member name="M:OdGePoint3d.op_Subtraction(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Subtraction operator for the OdGePoint3d class.
    
    \param point [in]  Input 3D point, coordinates of which are subtracted from the coordinates of this point.
    
    \remarks
    Returns a vector formed as a result of this point's coordinates - coordinates of the specified point.

</member>
        <member name="M:OdGePoint3d.setToSum(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this point to point + vect, and returns a reference to this point.
    
    \param point [in]  Any 3D point.
    \param vect [in]  Any 3D vector.

</member>
        <member name="M:OdGePoint3d.op_SubtractionAssignment(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Subtraction operator for the OdGePoint3d class.
    
    \param vect [in]  Input vector by which a point is translated.
    
    \remarks
    Returns a reference to the point equal to this point translated by the vector opposite to the specified vector.

</member>
        <member name="M:OdGePoint3d.op_Subtraction(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Subtraction operator for the OdGePoint3d class.
    
    \param vect [in]  Input vector by which a point is translated.
    
    \remarks
    Returns a point that is translated in the opposite direction and length of the specified input vector.

</member>
        <member name="M:OdGePoint3d.op_AdditionAssignment(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Addition operator for the OdGePoint3d class.
    
    \param vect [in]  Input vector by which a point is translated.
    
    \remarks
    Returns a reference to a point that is translated by the specified input vector.

</member>
        <member name="M:OdGePoint3d.op_Addition(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Addition operator for the OdGePoint3d class.
    
    \param vect [in]  Input vector by which a point is translated.
    
    \remarks
    Translates this point by the specified vector.

</member>
        <member name="M:OdGePoint3d.op_DivisionAssignment(System.Double)">
\details
    Division operator for the OdGePoint3d class.
    
    \param scale [in]  Input scale factor.
    
    \remarks
    Returns a reference to a point that is the result of scaling this point with respect to the origin by a scale factor. 

</member>
        <member name="M:OdGePoint3d.op_Division(System.Double)">
\details
    Division operator for the OdGePoint3d class.
    
    \param scale [in]  Input scale factor.
    
    \remarks
    Returns the point equal to this point scaled by a scale factor 1/scale.  

</member>
        <member name="M:OdGePoint3d.op_MultiplicationAssignment(System.Double)">
\details
    Multiplication operator for the OdGePoint3d class.
    
    \param scale [in]  Input scale factor.
    
    \remarks
    Scales this point by a scale factor. Returns the reference to this point.

</member>
        <member name="M:OdGePoint3d.op_Multiply(System.Double)">
\details
    Multiplication operator for the OdGePoint3d class.
    
    \param scale [in]  Input scale factor.
    
    \remarks
    Makes this point equal to the point scaled by a scale factor. 

</member>
        <member name="M:OdGePoint3d.convert2d">
\details
    Returns the 2D point from this point discarding the Z-coordinate.

</member>
        <member name="M:OdGePoint3d.convert2d(OdGePlanarEnt!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the 2D point with the coordinates corresponding to the decomposition of the vector * this - p in the basis uAxis, 
    vAxis of the planar entity, where p, uAxis, and vAxis can be found by the function call plane.get(p, uAxis, vAxis).
    
    \param plane [in]  A plane on which this point lies.
    
    \remarks
    This 3D point is assumed to be on the specified plane.

</member>
        <member name="M:OdGePoint3d.scaleBy(System.Double,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Scales this point by the scale factor about the basepoint.

    \param scaleFactor [in]  Scale Factor. The scale factor must be greater than zero.
    \param basePoint [in]  Basepoint relative to which scaling is computed.

</member>
        <member name="M:OdGePoint3d.mirror(OdGePlane!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Mirrors this point about the specified plane.

    \param plane [in]  Mirror plane.

</member>
        <member name="M:OdGePoint3d.rotateBy(System.Double,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Rotates this point about the specified basePoint and axis of rotation by the specified angle. 

    \param angle [in]  Rotation angle in radians.
    \param vect [in]  Axis of rotation.
    \param basePoint [in]  Basepoint relative to which rotation is computed.

</member>
        <member name="M:OdGePoint3d.transformBy(OdGeMatrix3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this point to the result of the matrix multiplication of xfm * this point.
    Returns a reference to this point.

    \param xfm [in]  A 3D matrix with which this point is multiplied.

</member>
        <member name="M:OdGePoint3d.setToProduct(OdGeMatrix3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this point to the product of xfm * point, and returns a reference to this point.
    
    \param xfm [in]  A 3D matrix with which a specified point is multiplied. 
    \param point [in]  The point to be multiplied.

</member>
        <member name="M:OdGePoint3d.op_Multiply(System.Double,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\remarks
    Sets this point to the result of the matrix multiplication of the point and a scale factor. 

    \param scale [in]  Scale factor.
    \param point [in]  The point to be multiplied.

</member>
        <member name="M:op_Multiply(OdGeMatrix3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\remarks
    Sets this point to the result of the matrix multiplication of matrix * point.

    \param matrix [in]  Any 3D matrix.
    \param point [in]  The point to be multiplied.

</member>
        <member name="M:OdGePoint3d.#ctor(OdGePlanarEnt!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Constructor for the OdGePoint3d class.

    \param plane [in]  Any planar entity.
    \param pnt2d [in]  2D parameter in a plane's coordinates.
    
    \remarks
    Constructs a 3D point by the formula:
    
    p + uAxis * pnt2d.x + vAxis * pnt2d.y,
    
    where p, uAxis, and vAxis are returned by the function call plane.get (p, uAxis, vAxis);

</member>
        <member name="M:OdGePoint3d.#ctor(System.Double,System.Double,System.Double)">
\details
    Constructor for the OdGePoint3d class.

    \param xx [in]  The X-coordinate of this point.
    \param yy [in]  The Y-coordinate of this point.
    \param zz [in]  The Z-coordinate of this point.
    
    \remarks
    Constructs a 3D point with specified coordinates.

</member>
        <member name="M:OdGePoint3d.#ctor">
\details
    Default constructor for the OdGePoint3d class.

    \remarks
    The default constructor constructs a point at the origin.

</member>
        <member name="M:OdGeCurve2d.#ctor">
\param source [in]  Object to be cloned.

</member>
        <member name="M:OdGeCurve2d.restoreUvCurve(OdGeCurve3d!System.Runtime.CompilerServices.IsConst*,OdGeSurface!System.Runtime.CompilerServices.IsConst*,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Restore 2d parametric curve on surface from 3d curve.

    \param curve   [in]  A 3d curve from which this curve is restored.
    \param surface [in]  Surface on which a restored curve lies.
    \param tol     [in]  Geometric tolerance.

    \returns A 2d curve representing the projection of the 3d curve on the surface

    \remarks
    NULL is returned if projection failed.

</member>
        <member name="M:OdGeCurve2d.appendSamplePoints(System.Int32,OdArray&lt;OdGePoint2d,OdMemoryAllocator&lt;OdGePoint2d&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Appends sample points along this curve and their parameter values to the specified arrays.

    \param numSample  [in]   Number of samples.
    \param pointArray [out]  Receives an array of sample points.

</member>
        <member name="M:OdGeCurve2d.appendSamplePoints(System.Double,System.Double,System.Double,OdArray&lt;OdGePoint2d,OdMemoryAllocator&lt;OdGePoint2d&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdArray&lt;System.Double,OdMemoryAllocator&lt;System.Double&gt;&gt;*)">
\details
    Appends sample points along this curve and their parameter values to the specified arrays.

    \param fromParam [in]  Starting parameter value.
    \param toParam [in]  Ending parameter value.
    \param approxEps [in]  Approximate spacing along a curve.
    \param pointArray [out]  Pointer an array of sample points which are appended.
    \param pParamArray [in]  Pointer to an array to receive the parameters at each point.
    \remarks
    By default this function throws exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.getSamplePoints(System.Double,System.Double,System.Double,OdArray&lt;OdGePoint2d,OdMemoryAllocator&lt;OdGePoint2d&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdArray&lt;System.Double,OdMemoryAllocator&lt;System.Double&gt;&gt;*)">
\details
    Gets sample points along this curve and their parameter values to the specified arrays.

    \param fromParam [in]  Starting parameter value.
    \param toParam [in]  Ending parameter value.
    \param approxEps [in]  Approximate spacing along a curve.
    \param pointArray [out]  Receives an array of sample points.
    \param pParamArray [out]  Receives a pointer to an array of parameter values for each point.
    \remarks
    By default this function throws exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.op_Assign(OdGeCurve2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
    \details The assignment operator for the OdGeCurve2d class.
    \param curve [in]  Input 2D curve.

    \remarks
    Assigns input 2D curve to this curve.

</member>
        <member name="M:OdGeCurve2d.getSamplePoints(System.Int32,OdArray&lt;OdGePoint2d,OdMemoryAllocator&lt;OdGePoint2d&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns a quantity of sample points along this curve and the points themselves in the specified arrays.
    \param numSample  [out]  Receives a quantity of sample points.
    \param pointArray [out]  Receives sample points.

</member>
        <member name="M:OdGeCurve2d.getSamplePoints(System.Double,System.Double,System.Double,OdArray&lt;OdGePoint2d,OdMemoryAllocator&lt;OdGePoint2d&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdArray&lt;System.Double,OdMemoryAllocator&lt;System.Double&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns sample points along this curve and their parameter values in the specified arrays.

    \param fromParam [in]  Starting parameter value.
    \param toParam [in]  Ending parameter value.
    \param approxEps [in]  Approximate spacing along a curve.
    \param pointArray [out] Returns an array of sample points.
    \param paramArray [out] Returns an array of parameters at each point.


</member>
        <member name="M:OdGeCurve2d.evalPoint(System.Double,System.Int32,OdArray&lt;OdGeVector2d,OdObjectsAllocator&lt;OdGeVector2d&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the point on the curve corresponding to the specified parameter value, and the derviatives at that point.

    \param param [in]  Parameter to be evaluated.
    \param numDeriv [in]  The number of derivatives to be computed 
                 (should not be set larger than 2). 
    \param derivatives [out] Receives an array of derivatives at the point corresponding to param.

    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.evalPoint(System.Double)">
\details
    Returns the point on the curve corresponding to the specified parameter value.

    \param param [in]  Parameter to be evaluated.

    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.midPoint(System.Double)">
\details 
    Calculates a point from the curve interval that corresponds to the specified coefficient.
  
    \param coef [in] Coefficient from the interval [0; 1].
    \returns Point from the curve interval that corresponds to the coefficient parameter.

    \remarks
    The value of the coef variable must be within [0; 1], where 
    * 0 is the beginning of the curve interval, 
    * 0.5 is the middle of the curve interval, 
    * 1 is the end of the curve interval. 
    Otherwise, an exception eNotApplicable will be thrown.

    \remarks
    The curve must have a bounded interval otherwise, an exception 
    eCurveEndsMissed will be thrown.  

</member>
        <member name="M:OdGeCurve2d.hasMidPoint(OdGePoint2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
\details 
    Checks the boundaries of the curve interval and calculates a point from the curve interval that corresponds to the specified coefficient.

    \param point [out] Receives the point from the curve interval that corresponds to the coefficient.
    \param coef   [in] Coefficient from the interval [0; 1]. 
    \returns true if and only if the parametric interval of the curve is 
      bounded and the value of the coef variable lies within [0; 1].

    \remarks
    The value of the coef variable must be within [0; 1], where 
    * 0 is the beginning of the curve interval, 
    * 0.5 is the middle of the curve interval, 
    * 1 is the end of the curve interval.

</member>
        <member name="M:OdGeCurve2d.hasEndPoint(OdGePoint2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true, and the end point, if and only if the parametric interval of the curve has an upper bound.


    \param endPoint [out]  Receives the end point of the interval.

    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.hasStartPoint(OdGePoint2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true, and the start point, if and only if the parametric interval of the curve has a lower bound.


    \param startPoint [out]  Receives the start point of the interval.

    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.getGeomExtents(OdGeInterval!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeMatrix2d!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns bounding box of the whole curve or a part of it.
    The box is axis-aligned in the specified local coordinate system.
    It is guaranteed to enclose the curve, but not guaranteed to be tight/minimal.

    \param range [in]  The part of the curve to be bounded.
    \param coordSystem [in]  The local coordinate system in which box extents are computed.

    \remarks
    If range is unbound (e.g. by default), the bounding box of the whole curve (range can be
    obtained by the getInterval method) is computed. Otherwise bounding box is computed only for the set of
    points with the parameter in the specified range.
    If coordSystem is NULL (e.g. by default), then bounding box is aligned with global coordinate axes.
    Otherwise, the box will be axis-aligned in the local coordinate system specified by the coordSystem matrix.

</member>
        <member name="M:OdGeCurve2d.orthoBoundBlock(OdGeInterval!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Gets the bounding box of the specified sub-interval of the curve. Bounding box sides are parallel to coordinate axes.
    \param range [in] Sub-interval of curve.
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.orthoBoundBlock">
\details
    Gets the bounding box whose sides are parallel to the coordinate axes.
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.boundBlock(OdGeInterval!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Gets the oriented bounding box of the specified sub-interval of this curve.
    \param range [in] Sub-interval of the curve.
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.boundBlock">
\details
    Gets the oriented bounding box of this curve.
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.getLocalClosestPoints(OdGeCurve2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePointOnCurve2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePointOnCurve2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeInterval!System.Runtime.CompilerServices.IsConst*,OdGeInterval!System.Runtime.CompilerServices.IsConst*,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Local closest points.
    Searches for the local minimum distance between two curves using the two input points as initial guesses.
    \param otherCurve           [in] Input 2D curve.
    \param approxPntOnThisCrv   [in/out] Input/output point on this curve.
    \param approxPntOnOtherCrv  [in/out] Input/output point on input curve.
    \param nbhd1                [in] Interval for searching on this curve.
    \param nbhd2                [in] Interval for searching on input curve.
    \param tol                  [in] Geometric tolerance.
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.getLocalClosestPoints(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePointOnCurve2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeInterval!System.Runtime.CompilerServices.IsConst*,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Searches for the local minimum distance between this curve and the input point using the input point as an initial guess.
    \param point      [in] Input 2D point.
    \param approxPnt  [in/out] Input/output point on this curve.
    \param nbhd       [in] Input interval for searching on this curve.
    \param tol        [in] Geometric tolerance.
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.explode(OdArray&lt;OdSharedPtr&lt;OdGeCurve2d&gt;,OdObjectsAllocator&lt;OdSharedPtr&lt;OdGeCurve2d&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdArray&lt;System.Int32,OdMemoryAllocator&lt;System.Int32&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeInterval!System.Runtime.CompilerServices.IsConst*)">
\details
    Explodes the curve into its component sub-curves.
    \param explodedCurves   [out] List of curves into which this curve was exploded.
    \param newExplodedCurve [out] Array of flags telling whether the returned curves should be deleted.
    \param interval         [in] Interval of curve that is to be exploded.
    \returns Returns true if the curve is exploded (that is, the curve was a composite or a discontinuous spline) and false otherwise.
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.getSplitCurves(System.Double,OdGeCurve2d**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeCurve2d**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns two segments that are obtained by splitting the curve 
    at the input parameter value. 
    \param param  [in] Parameter value at which curve is to be split
    \param piece1 [out] Pointer to first curve segment.
    \param piece2 [out] Pointer to second curve segment.
    \remarks
    If the specified parameter value
    does not lie within the parametric interval of the curve or if
    it corresponds to the start or endpoint of the curve, then piece1
    and piece2 are set to null.
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.isDegenerate(OdGeEntity2d**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Determines if the curve is degenerate and if so returns 
    the entity that the curve degenerates into.
    \param pConvertedEntity [out] Output entity that the curve degenerates into.
    \param tol              [in] Geometric tolerance.
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.isDegenerate(OdGe.EntityId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Determines if the curve is degenerate and if so 
    returns the type of entity that the curve degenerates. 
    \param degenerateType [out] Output type of degenerate entity.
    \param tol            [in]  Geometric tolerance.
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.area(System.Double,System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Gets the area of the interval of the curve defined by startParam and endParam. 
    \param startParam [in] Parameter value of interval start.
    \param endParam   [in] Parameter value of interval end (must be greater than startParam).
    \param value      [out] Output area of curve between startParam and endParam.
    \param tol        [in] Geometric tolerance.
    \remarks
    Returns true if the area was successfully calculated with given tolerance.
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.paramAtLength(System.Double,System.Double,System.Boolean,System.Double)">
\details
    Returns the parameter value of the point whose arc length distance is the input length.
    \param datumParam   [in] Input parameter value.
    \param length       [in] Input arc length.
    \param posParamDir  [in] Input parameter direction.
    \param tol          [in] Geometric tolerance.
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.length(System.Double)">
\details
    Returns the arc length of the curve between the two parameter values.
    \param tol       [in] Geometric tolerance.
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.length(System.Double,System.Double,System.Double)">
\details
    Returns the arc length of the curve between the two parameter values.
    \param fromParam [in] First parameter value that represents the start of the curve.
    \param toParam   [in] Second parameter value that represents the end of the curve.
    \param tol       [in] Geometric tolerance.
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.isLinear(OdGeLine2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Checks if this curve is linear.
    \param line [out] Receives the line coincident with this curve.
    \param tol  [in]  Geometric tolerance.
    \remarks
    Returns true, and a linear entity coincident with this curve,
    if and only if this curve is linear.

</member>
        <member name="M:OdGeCurve2d.isPeriodic(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Determines if the curve is periodic. 
    \param period [in]  Period of curve parameter.
    \remarks
    The curve is periodic if and 
    only if it is closed and the two points evalPoint(t) and 
    evalPoint(t+period) are always the same point for all values of t.
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.isClosed(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if the curve is closed within the specified tolerance.

    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeCurve2d.getTrimmedOffset(System.Double,OdArray&lt;OdSharedPtr&lt;OdGeCurve2d&gt;,OdObjectsAllocator&lt;OdSharedPtr&lt;OdGeCurve2d&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.OffsetCrvExtType,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Gets one or more offset curves that represent the trimmed offset of the curve.
    \param distance        [in]  Offset distance.
    \param offsetCurveList [out] List that stores offset curves.
    \param extensionType   [in]  Determines how the offset curve will be extended at points of C1 discontinuity.
    \param tol             [in]  Geometric tolerance.
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.paramOf(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeInterval!System.Runtime.CompilerServices.IsConst*,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the parameter value of a point.

    \param point [in]  Input point on the curve.
    \param range [in]  Interval on the curve.
    \param tol [in]  Geometric tolerance.

    \remarks
    The returned parameters specify a point within tol of point.
    In case of uvBox == NULL paramOf(point, tol) is called.
    If you are not sure the point is on the curve, use
    isOn () instead of this function.

    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.paramOf(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the parameter value of a point.

    \param point [in]  Input point on the curve.
    \param tol [in]  Geometric tolerance.

    \remarks
    The returned parameters specify a point within tol of point.
    If point is not on the curve, the results are unpredictable.
    If you are not sure the point is on the curve, use 
    isOn () instead of this function.

    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.isOn(System.Double,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Determines if an input parameter value is within a valid parametric range of the curve.
    \param param    [in]  Input parameter value.
    \param tol      [in]  Geometric tolerance.
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.isOn(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Determines if a point lies on a curve. 
    
    \param point    [in]  Input point.
    \param param    [out] Output parameter value of point if the point lies on the curve.
    \param tol      [in]  Geometric tolerance.

    \remarks
    The param parameter is only set to a meaningful value 
    if this function returns true.

</member>
        <member name="M:OdGeCurve2d.getNormalPoint(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePointOnCurve2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Finds the point on the input curve whose normal passes through the input point. 
    \param point    [in]  Input point.
    \param pntOnCrv [out] Closest point on this curve whose normal passes through the input point.
    \param tol      [in]  Geometric tolerance.
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.getClosestPointTo(OdGeCurve2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePointOnCurve2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePointOnCurve2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Finds the point on this curve which is the closest to the point of an input curve.
    \param curve2d       [in]  Input curve.
    \param pntOnThisCrv  [out] Receives the closest point on this curve.
    \param pntOnOtherCrv [in]  A point on the other curve.
    \param tol           [in]  Geometric tolerance.
    \returns Returns the closest point of this curve.
    \remarks
    This function is the same as getClosestPointTo().
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.getClosestPointTo(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePointOnCurve2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Finds the closest point on this curve to the input point. 
    \param point    [in]  Input point.
    \param pntOnCrv [out] Closest point on this curve to the input point.
    \param tol      [in]  Geometric tolerance.
    \returns Returns the closest point of this curve.
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.closestPointTo(OdGeCurve2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Finds the closest point between this curve and the point of an input curve.
    \param curve2d       [in]  Input curve.
    \param pntOnOtherCrv [out] Closest point on the input curve.
    \param tol           [in]  Geometric tolerance.
    \returns Returns the closest point of this curve.
    \remarks
    This function is the same as getClosestPointTo().
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.closestPointTo(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeInterval!System.Runtime.CompilerServices.IsConst*,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Finds the closest point on this curve to the input point.

    \param point [in]  Point to be evaluated.
    \param param [out] uv-coord of closest point.
    \param range [in]  Interval on curve.
    \param tol [in]  Geometric tolerance.

    \remarks
    Native interval is not considered.
    If projection of the point does not lie in range-interval, the closest bound of the interval is returned.
    In case of uvBox == NULL closestPointTo(point, range, tol) is called where range is a native curves interval.
    An unbounded interval should not be used here.

</member>
        <member name="M:OdGeCurve2d.closestPointTo(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Finds the closest point on this curve to the input point. 
    \param point [in]  Input point according to which the closest point on this curve is searched.

    \remarks
    This function is the same as getClosestPointTo().

</member>
        <member name="M:OdGeCurve2d.distanceTo(OdGeCurve2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the distance of the closest points between this 
    curve and the input curve.

    \remarks
    The distance is returned as a double value.

</member>
        <member name="M:OdGeCurve2d.distanceTo(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the distance between the input point and the closest 
    point on this curve.
    \param point [in]  Input point.
    \param tol   [in]  Geometric tolerance.
    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.setInterval(OdGeInterval!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets the parametric interval of this curve.

    \param interval [in]  Parametric interval of this curve.

    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.setInterval">
\details
    Sets to natural domain of this curve.

    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.reverseParam">
\details
    Reverses the parameter direction of this curve.   

    \remarks
    The point set of this curve is unchanged.

    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.getInterval(OdGeInterval*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the parametric interval of the curve.

    \param interval [out]  Receives the parametric interval of the curve.
    \param start [out]  Receives the start point of the interval.
    \param end [out]  Receives the end point of the interval. 

    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.getInterval(OdGeInterval*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the parametric interval of the curve.

    \param interval [out]  Receives the parametric interval of the curve.

    \remarks
    By default this function throws the exception "not Implemented". Should be implemented in derived classes.

</member>
        <member name="M:OdGeCurve2d.convertTo3d(OdGeCurve3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Gets 3D variant of the curve (z-coordinate equal to zero).
  
    \param curve3d [out] Reference to resulting 3d curve of suitable type.

    \remarks
    The user of this method should pass a 3d curve to the method that
    corresponds to the type of 2d curve, otherwise an eNotThatKindOfClass
    exception will be thrown.
    Examples of corresponding curve types:
    * OdGeRay2d - OdGeRay3d;
    * OdGeLine2d - OdGeLine3d;
    * OdGeLineSeg2d - OdGeLineSeg3d;
    * OdGeCircArc2d - OdGeCircArc3d;
    * OdGeEllipArc2d - OdGeEllipArc3d;
    * OdGePolyline2d - OdGePolyline3d;
    * OdGeNurbCurve2d - OdGeNurbCurve3d;

</member>
        <member name="M:OdGeCurve2d.convertTo3d">
\details 
    Creates new 3D variant of the curve (z-coordinate equal to zero).
  
    \returns pointer to 3D variant of the curve (z-coordinate equal to zero).

    \remarks
    For OdGeOffsetCurve a base curve will be created that should be MANUALLY deleted
    See documentation about OdGeOffsetCurve.

</member>
        <member name="D:OdGeCurve3dArray">
\details
This template class is a specialization of the OdArray class template for 3D curve pointers.

</member>
        <member name="D:OdGeCurve3dPtrArray">
\details
    This template class is a specialization of the OdArray class template for 3D curve shared pointers.

</member>
        <member name="D:OdGeCurve3dPtr">
\details
    This template class is a specialization of the OdSharedPtr class template for 3D curves.

</member>
        <member name="D:OdGeCurve2dPtrArray">
\details
    This template class is a specialization of the OdArray class template for 2D curve shared pointers.

</member>
        <member name="D:OdGeCurve2dPtr">
\details
    This template class is a specialization of the OdSharedPtr class template for 2D curves.

</member>
        <member name="D:OdGeVector2dArray">
\details
    This template class is a specialization of the OdArray class template for 2D vectors.

</member>
        <member name="M:OdGeInterval.isPeriodicallyOn(System.Double,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if the specified value is periodically on this Interval.
    \remarks
    Returns true if and only if there is a positive integer N such that
    
            value + N * period
            
    is on this Interval. If so, returns that value.         
    
    \param period [in]  Period.
    \param value [in/out] Value.

</member>
        <member name="M:OdGeInterval.isEqualAtLower(System.Double)">
\details
    Returns true if and only if lower bounds of the specified Interval and this Interval are equal.
    \remarks
    Returns true if and only if
    
    1. This Interval is bounded below, and the lower bound is equal to value within tolerance. 

    \param value [in]  The value to be tested.

</member>
        <member name="M:OdGeInterval.isEqualAtLower(OdGeInterval!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if lower bounds of the specified Interval and this Interval are equal.
    \remarks
    Returns true if and only if
    
    1. Both this Interval and otherInterval are unbounded below or bounded 
       below with their lower bounds equal within tolerance.
    
    \param otherInterval [in]  The Interval to be tested.

</member>
        <member name="M:OdGeInterval.isEqualAtUpper(System.Double)">
\details
    Returns true if and only if upper bounds of the specified Interval and this Interval are equal.
    \remarks
    
    Returns true if and only if

    1. This Interval is bounded above, and the upper bound is equal to value within tolerance(). 

    \param value [in]  The value to be tested.

</member>
        <member name="M:OdGeInterval.isEqualAtUpper(OdGeInterval!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if upper bounds of the specified Interval and this Interval are equal.
    \remarks
    
    Returns true if and only if
    
    1. Both this Interval and otherInterval are unbounded above or bounded 
       above with their upper bounds equal within tolerance().

    \param otherInterval [in]  The Interval to be tested.

</member>
        <member name="M:OdGeInterval.op_Inequality(OdGeInterval!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Comparison operator for the OdGeInterval object.
    
    \returns
    A boolean value that indicates whether the input interval is not identical to this interval.

</member>
        <member name="M:OdGeInterval.op_Equality(OdGeInterval!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Comparison operator for the OdGeInterval object.
    
    \returns
    A boolean value that indicates whether the input interval is identical to this interval.

</member>
        <member name="M:OdGeInterval.isOverlapAtUpper(OdGeInterval!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeInterval*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if the specified Interval and this Interval overlap at the upper bound of this Interval.
    \remarks
    Returns true if and only if
     
    1.  This Interval is bounded above, otherInterval is bounded below. 
    2.  Neither Interval is a singleton.
    3.  The Intervals Intersect.
    4.  otherInterval does not contain this one.
    5.  The upper bound of this Interval is contained in otherInterval.
    6.  The lower bound of otherInterval is contained within this one. 
    
    If all these conditions are met, this function returns the intersection of the Intervals.
    
    \param otherInterval [in]  The Interval to be tested.
    \param overlap [out]  Receives the overlap of the Intervals.

</member>
        <member name="M:OdGeInterval.isContinuousAtUpper(OdGeInterval!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if the specified Interval is continuous with the upper bound of this Interval.
    \remarks
    Returns true if and only if this Interval is bounded above, otherInterval is bounded below, 
    and the upper bound of this Interval is equal to the lower bound of otherInterval within tolerance().
    
    \param otherInterval [in]  The Interval to be tested.

</member>
        <member name="M:OdGeInterval.clamp(System.Double)">
\details
  Corrects the parameter so that it belongs to the interval.
  If parameter is already within interval, then it is returned as is.
  Otherwise parameter is moved to closest of endpoints.

  \param value [in]  The parameter to be corrected.

</member>
        <member name="M:OdGeInterval.contains(OdGeInterval!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if this interval contains the specified value or Interval.
    \remarks
    Returns true if and only if this Interval contains value or otherInterval within tolerance().
    
    \param otherInterval [in]  The Interval to be tested.
    \param value [in]  The value to be tested.

</member>
        <member name="M:OdGeInterval.isDisjoint(OdGeInterval!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if the specified interval is disjoint from this interval.
    \remarks
    Returns true if and only if this interval does not intersect otherInterval within tolerance().
    
    \param otherInterval [in]  The interval to be tested.

</member>
        <member name="M:OdGeInterval.isSingleton">
\details
    Returns true if and only if this interval object is a singleton.
    \remarks
    Returns true if and only if this interval is bounded, and the upper and lower bounds are equal within tolerance().

</member>
        <member name="M:OdGeInterval.isUnBounded">
\details
    Returns true if and only if this interval is unbounded above or below.

</member>
        <member name="M:OdGeInterval.isBoundedBelow">
\details
    Returns true if and only if this interval is bounded below.

</member>
        <member name="M:OdGeInterval.isBoundedAbove">
\details
    Returns true if and only if this interval is bounded above.

</member>
        <member name="M:OdGeInterval.isBounded">
\details
    Returns true if and only if this interval is bounded above and below.

</member>
        <member name="M:OdGeInterval.finiteIntersectWith(OdGeInterval!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeInterval*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Find finite sub-interval belonging both to the specified range and this one
    \returns
    Returns true if and only if the specified interval intersects with this one, 
    and the resulting interval is bounded.

    \param range [in]  The interval to be intersected.
    \param result [out]  Receives the intersected interval.

</member>
        <member name="M:OdGeInterval.intersectWith(OdGeInterval!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeInterval*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Intersects the specified interval from this one.
    \returns
    Returns true if and only this specified interval intersects with this one, 
    and the interval of intersection.

    \param otherInterval [in]  The interval to be intersected.
    \param result [out]  Receives the intersected interval.

</member>
        <member name="M:OdGeInterval.subtract(OdGeInterval!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeInterval*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeInterval*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Subtracts the specified interval from this interval.
    \returns
    Returns the number of intervals, and the intervals, resulting from the subtraction

    \param otherInterval [in]  The interval to be subtracted from this one.
    \param lInterval [out]  Receives the Left (or only) interval.
    \param rInterval [out]  Receives the right interval.
    
    \remarks
    <table>
    return value   Results
    0              Empty result
    1              Single interval in lInterval
    2              Left in lInterval, Right in rInterval.
    </table></member>
        <member name="M:OdGeInterval.getMerge(OdGeInterval!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeInterval*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the smallest interval containing both the specified interval and this interval.

    \param otherInterval [in]  The interval to be merged with this one.
    \param result [out]  Receives the merged interval.

</member>
        <member name="M:OdGeInterval.setTolerance(System.Double)">
\details
    Sets the boundary tolerance for this interval.

    \param tol [in]  Boundary tolerance.

    \returns
    Returns a reference to this interval.

</member>
        <member name="M:OdGeInterval.setLower(System.Double)">
\details
    Sets the lower bound for this interval.

    \param lower [in] Lower bound.
    \returns
    Returns a reference to this interval.

</member>
        <member name="M:OdGeInterval.setUpper(System.Double)">
\details
    Sets the upper bound for this interval.

    \param upper [in]  Upper bound.
    

</member>
        <member name="M:OdGeInterval.set">
\details
    Unbounds this interval.
    
    \returns
    Returns a reference to this interval.   

</member>
        <member name="M:OdGeInterval.set(System.Boolean,System.Double)">
\details
    Sets the parameters for this interval according to the arguments.

    \param boundedBelow [in]  Determines if bound specifies a lower or an upper bound.
    \param bound [in]  Specifies a lower bound if boundedBelow is true, or an upper
              bound if it is false.
              
    \returns
    Returns a reference to this interval.   

</member>
        <member name="M:OdGeInterval.set(System.Double,System.Double)">
\details
    Sets the parameters for this interval according to the arguments.

    \param lower [in]  Lower bound.
    \param upper [in]  Upper bound.
              
    \returns
    Returns a reference to this interval. 

</member>
        <member name="M:OdGeInterval.eval(System.Double)">
\details
  Returns parameter L + (R-L) * t for given ratio t.
  Note: if the interval is unbounded, behavior is undefined!

  \param ratio  Arbitrary number

</member>
        <member name="M:OdGeInterval.tolerance">
\details
    Returns the boundary tolerance for this interval.

</member>
        <member name="M:OdGeInterval.length">
\details
    Returns the length of this interval.
    
    \returns
    Returns -1.0 if this interval is unbounded above or below.

</member>
        <member name="M:OdGeInterval.getEnd(System.Int32)">
\details
  Returns the parameter of interval's end.

  \param index  Must be 0 (interval start) or 1 (interval end), otherwise behavior is undefined.

</member>
        <member name="M:OdGeInterval.getBounds(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the bounds of this interval.
    
    \param lower [out]  Receives the Lower bound.
    \param upper [out]  Receives the Upper bound.

</member>
        <member name="M:OdGeInterval.element">
\details
    Returns a point on this interval.
    
    \remarks
    <table>
    Bounded Above   Bounded Below          Returns
    Yes             ---                    Upper Bound
    No              Yes                    Lower Bound
    No              No                     0.0
    </table></member>
        <member name="M:OdGeInterval.middle">
\details
  Returns the center point of this interval.

  \remarks
  This value is meaningful if and only if the interval has both lower and upper bounds.

</member>
        <member name="M:OdGeInterval.upperBound">
\details
    Returns the upper bound of this interval.
    
    \remarks
    This value is meaningful if and only if the interval has an upper bound.

</member>
        <member name="M:OdGeInterval.lowerBound">
\details
    Returns the lower bound of this interval.
    
    \remarks
    This value is meaningful if and only if the interval has a lower bound.

</member>
        <member name="M:OdGeInterval.#ctor(System.Boolean,System.Double,System.Double)">
\details
    Constructor for the OdGeInterval class.
    \param boundedBelow [in]  Determines if the interval is bounded below.
    \param bound [in]  Upper or lower bound.
    \param tol [in]  Boundary tolerance.
    If boundedBelow is true, the constructor sets the lower bound also to bound; otherwise the interval remains unbounded below.

</member>
        <member name="M:OdGeInterval.#ctor(System.Double,System.Double,System.Double)">
\details
    Constructor for the OdGeInterval class.
    
    \param lower [in]  Lower bound.
    \param upper [in]  Upper bound.
    \param tol [in]  Boundary tolerance.

</member>
        <member name="M:OdGeInterval.#ctor(System.Double)">
\details
    Constructor for the OdGeInterval class. Creates an unbounded interval with the specified tolerance.

    \param tol [in]  Boundary tolerance.

</member>
        <member name="D:OdGeIntArray">
\details
    This template class is a specialization of the OdArray class int objects.

</member>
        <member name="M:OdGeEntity2d.isOn(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if the specified point is on this entity, as determined by the tolerance.

    \param point [in]  Point to be queried.
    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeEntity2d.scaleBy(System.Double,OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Scales this entity by the scale factor about the basepoint, and returns
    a reference to this entity.

    \param scaleFactor [in]  Scale Factor. The scale factor must be greater than zero.
    \param basePoint [in]  Basepoint.

</member>
        <member name="M:OdGeEntity2d.mirror(OdGeLine2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Mirrors this entity about the specified 2D line, and returns
    a reference to this entity.

    \param line [in]  Mirror Line.

</member>
        <member name="M:OdGeEntity2d.rotateBy(System.Double,OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Rotates this entity about the specified point by the specified angle, and returns
    a reference to this entity.

    \param angle [in]  Rotation angle.
    \param basePoint [in]  Basepoint.

</member>
        <member name="M:OdGeEntity2d.translateBy(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Applies the 2D translation vector to this entity, and returns
    a reference to this entity.

    \param translateVec [in]  Translation Vector.

</member>
        <member name="M:OdGeEntity2d.transformBy(OdGeMatrix2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Applies the 2D transformation matrix to this entity, and returns
    a reference to this entity.

    \param xfm [in]  2D transformation matrix.

</member>
        <member name="M:OdGeEntity2d.isEqualTo(OdGeEntity2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if the specified entity is equal to this one.

    \remarks
    Returns true if and only if both entities are of the same type, have the same point set within the 
    specified tolerance, and have the same parameterization.

    \param other [in]  Entity to be compared
    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeEntity2d.op_Inequality(OdGeEntity2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Comparison operator for the OdGeEntity2d object.
    
    \returns
    A boolean value that indicates whether the input entity is not identical to this entity.

</member>
        <member name="M:OdGeEntity2d.op_Equality(OdGeEntity2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Comparison operator for the OdGeEntity2d object.
    
    \returns
    A boolean value that indicates whether the input entity is identical to this entity.

</member>
        <member name="M:OdGeEntity2d.op_Assign(OdGeEntity2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Assignment operator for the OdGeEntity2d object.

</member>
        <member name="M:OdGeEntity2d.copy">
\details
    Returns a copy of this entity.

    \remarks
    The returned object is created with the new operator, and it is the responsibility of the caller to delete it.

</member>
        <member name="M:OdGeEntity2d.type">
\details
    Returns the entity type of this entity.

</member>
        <member name="M:OdGeEntity2d.isKindOf(OdGe.EntityId)">
\details
    Returns true if and only if this entity is of  type (or is derived from) entType.

    \param entType [in]  Entity type to test. 

</member>
        <member name="M:OdGiLinetype.setDashes(OdArray&lt;OdGiLinetypeDash,OdObjectsAllocator&lt;OdGiLinetypeDash&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets dashes for this linetype.
    
    \param dashes [in]  Linetype dashes to set.

</member>
        <member name="M:OdGiLinetype.dashes(OdArray&lt;OdGiLinetypeDash,OdObjectsAllocator&lt;OdGiLinetypeDash&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Retrieves dashes of this linetype.
    
    \param dashes [out]  Receives linetype dashes.

</member>
        <member name="M:OdGiLinetype.setDashAt(System.Int32,OdGiLinetypeDash!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets the dash at the specified index.
    
    \param index [in]  Dash index.
    \param dash [out]  Linetype dash to set.

</member>
        <member name="M:OdGiLinetype.setDashAt(System.Int32,System.Double)">
\details
    Sets the dash at the specified index.
    
    \param index [in]  Dash index.
    \param value [out]  Dash length.

</member>
        <member name="M:OdGiLinetype.dashAt(System.Int32)">
\details
    Retrieves the dash at the specified index.
    
    \param index [in]  Dash index.
    
    \returns
    reference to the OdGiLinetypeDash instance which represents the dash.

</member>
        <member name="M:OdGiLinetype.dashAt(System.Int32,OdGiLinetypeDash*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Retrieves the dash at the specified index.
    
    \param index [in]  Dash index.
    \param dash [out]  Receives the dash.

</member>
        <member name="M:OdGiLinetype.setNumDashes(System.Int32)">
\details
    Specifies the number of dashes for this linetype.
    
    \param count [in]  Number of dashes in the pattern.

</member>
        <member name="M:OdGiLinetype.numDashes">
\details
    Retrieves the number of dashes of this linetype.
    
    \returns
    quantity of dashes as integer value.

</member>
        <member name="M:OdGiLinetype.setPatternLength(System.Double)">
\details
    Retrieves the overall length of this linetype pattern.
    
    \param patternLength [in]  Overall pattern length.

</member>
        <member name="M:OdGiLinetype.patternLength">
\details
    Retrieves the overall length of this linetype pattern.
    
    \returns
    pattern length as a value of the double type.

</member>
        <member name="M:OdGiLinetype.setByLayer(System.Boolean)">
\details
    Specifies whether this linetype should inherit linetype parameters provided by the block definition.
    
    \param value [in]  Flag that specifies whether this linetype should be inherited by layer.

</member>
        <member name="M:OdGiLinetype.isByLayer">
\details
    Checks whether this linetype is inherited by the layer.
    
    \returns
    true if this linetype is inherited by the layer, false otherwise.

</member>
        <member name="M:OdGiLinetype.setByBlock(System.Boolean)">
\details
    Specifies whether this linetype should inherit linetype parameters provided by the block definition.
    
    \param value [in]  Flag that specifies whether this linetype should be inherited by block.

</member>
        <member name="M:OdGiLinetype.isByBlock">
\details
    Checks whether this linetype is inherited by the block definition.
    
    \returns
    true if this linetype is inherited by the block definition, false otherwise.

</member>
        <member name="M:OdGiLinetype.isContinuous">
\details
    Checks whether this linetype is continuous (linetype has no dashes).
    
    \returns
    true if this linetype is continuous, false otherwise.

</member>
        <member name="M:OdGiLinetype.#ctor">
\details
    Default constructor for the OdGiLinetype class. Sets the flag that specifies that pattern length is valid and set pattern length to 0.

</member>
        <member name="F:kPatternLengthValid">
Linetype pattern length is valid. 
</member>
        <member name="M:OdGiLinetypeDash.setEmbeddedShape(System.Boolean)">
\details
    Specifies whether this linetype dash should be an embedded shape.
    
    \param value [in]  Flag that specifies whether this linetype dash should be an embedded shape.

</member>
        <member name="M:OdGiLinetypeDash.isEmbeddedShape">
\details
    Checks whether this linetype dash is an embedded shape.
    
    \returns
    true if this linetype dash is an embedded shape, false otherwise.

</member>
        <member name="M:OdGiLinetypeDash.setEmbeddedTextString(System.Boolean)">
\details
    Specifies whether this linetype dash should be an embedded text string.
    
    \param value [in]  Flag that specifies whether this linetype dash should be an embedded text string.

</member>
        <member name="M:OdGiLinetypeDash.isEmbeddedTextString">
\details
    Checks whether this linetype dash is an embedded text string.
    
    \returns
    true if this linetype dash is an embedded text string, false otherwise.

</member>
        <member name="M:OdGiLinetypeDash.setRotationUpright(System.Boolean)">
\details
    Specifies whether rotation of linetype elements should be upright, i.e. some elements will be drawn upright even if situation requires them to be drawn  upside down or backward (e.g. on circular paths).
    
    \param value [in]  Flag that specifies whether rotation is upright.

</member>
        <member name="M:OdGiLinetypeDash.isRotationUpright">
\details
    Checks whether rotation of linetype elements is upright, i.e. some elements which may be required to drawn upside down or backward (e.g. on circular paths) are still drawn upright.
    
    \returns
    true if linetype elements are rotated upright, false otherwise.

</member>
        <member name="M:OdGiLinetypeDash.setRotationAbsolute(System.Boolean)">
\details
    Specifies whether orientation for the linetype dash should be absolute (UCS-aligned).
    
    \param value [in]  Flag that specifies whether orientation of the dash is absolute.

</member>
        <member name="M:OdGiLinetypeDash.isRotationAbsolute">
\details
    Checks whether orientation for the linetype dash is absolute (UCS-aligned).
    
    \returns
    true if linetype dash is UCS-aligned, false otherwise.

</member>
        <member name="M:OdGiLinetypeDash.#ctor">
\details
    Default constructor for the OdGiLinetypeDash class. Sets the following data members:
    <table>
    Data member           Value     Description
    shapeScale            1.0       Scale of a shape
    shapeRotation         0.0       Shape rotation
    flags                 0         Dash flags that represent whether dash rotation is absolute, whether rotation is upright, etc
    shapeOffset           0.0       Shape offset by x and y axes
    styleId               NULL      Text style identifier for a text dash
    </table></member>
        <member name="F:OdGiLinetypeDash.styleId">
Text style identifier for a text dash. 
</member>
        <member name="F:OdGiLinetypeDash.textString">
Dash as a text string. 
</member>
        <member name="F:OdGiLinetypeDash.shapeOffset">
Shape offset. 
</member>
        <member name="F:OdGiLinetypeDash.shapeNumber">
Shape number in the ASCII table. 
</member>
        <member name="F:OdGiLinetypeDash.flags">
Dash flags that represent whether dash rotation is absolute, whether rotation is upright, etc. 
</member>
        <member name="F:OdGiLinetypeDash.shapeRotation">
Shape rotation. 
</member>
        <member name="F:OdGiLinetypeDash.shapeScale">
Scale of a shape. 
</member>
        <member name="F:OdGiLinetypeDash.length">
Dash length. 
</member>
        <member name="F:OdGiLinetypeDash.offset.y">
Offset by y axis. 
</member>
        <member name="F:OdGiLinetypeDash.offset.x">
Offset by x axis. 
</member>
        <member name="T:OdGiLinetypeDash.offset">
\details
    Represents shape offset by x and y axes.

</member>
        <member name="D:OdGsModulePtr">
\details
  This template class is a specialization of the OdSmartPtr class for OdGsModule object pointers. 

</member>
        <member name="M:OdGsModule.removeReactor(OdGsReactor*)">
\details
    Removes the specified reactor from this object's reactor list.
    \param pReactor [in]  Pointer to the reactor object.

</member>
        <member name="M:OdGsModule.addReactor(OdGsReactor*)">
\details
    Adds the specified reactor to this object's reactor list.
    \param pReactor [in]  Pointer to the reactor object.

</member>
        <member name="M:OdGsModule.createBitmapDevice">
\details
    Creates a new OdGsBaseVectorizeDevice object, and associates it with this Module object.
    \returns
    Returns a SmartPointer to the newly created object.

</member>
        <member name="M:OdGsModule.createDevice">
\details
    Creates a new OdGsDevice object, and associates it with this Module object.
    \returns
    Returns a SmartPointer to the newly created object.

</member>
        <member name="M:OdGsReactor.gsToBeUnloaded(OdGsModule*)">
\details
    Notification function called whenever an OdGsModule object is about to be unloaded.
    \param pModule [in]  Pointer to the OdGsModule object.

    \remarks
    This function is called after the operation.

</member>
        <member name="M:OdGsReactor.viewWasUpdated(OdGsView*,System.Int32)">
\details
    Notification function called after OdGsView properties are updated.
    \param pView [in]  Pointer to the OdGsView object.
    \param flags [in]  Bitcoded flags of type ViewUpdateFlags depending on which properties are effected.

</member>
        <member name="M:OdGsReactor.viewToBeUpdated(OdGsView*,System.Int32)">
\details
    Notification function called before OdGsView properties are updated.
    \param pView [in]  Pointer to the OdGsView object.
    \param flags [in]  Bitcoded flags of type ViewUpdateFlags depending on which properties are effected.

</member>
        <member name="M:OdGsReactor.viewToBeDestroyed(OdGsView*)">
\details
    Notification function called whenever an OdGsView object is about to be destroyed.
    \param pView [in]  Pointer to the OdGsView object.

    \remarks
    This function is called before the operation.

</member>
        <member name="M:OdGsReactor.viewWasCreated(OdGsView*)">
\details
    Notification function called whenever a OdGsView object has been created.
    \param pView [in]  Pointer to the OdGsView object.

    \remarks
    This function is called after the operation.

</member>
        <member name="M:OdGsDevice.setUpdateManager(OdSmartPtr&lt;OdGsUpdateManager&gt;)">
\details
    Associates OdGsUpdateManager with device

    \param pManager [in] Pointer to the OdGsUpdateManager

</member>
        <member name="M:OdGsDevice.getUpdateManager(System.Boolean)">
\details
    Returns OdGsUpdateManager associated with current device

    \param createIfNotExist [in] Creates instance of OdGsUpdateManager if no one associated with device

</member>
        <member name="M:OdGsDevice.getSnapShot(OdSmartPtr&lt;OdGiRasterImage&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGsDCRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns image of current device buffer.

    \param pImage [out]  Pointer for image to return.
    \param region [in]  Rectangle specifies region to return.

    \remarks
    Implementation can throw eNotImplementedYet exception if current vectorization module doesn't support snap shots.

</member>
        <member name="M:OdGsDevice.getLogicalPalette(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the logical pallete used by this Device object.

    \param numColors [out]  Number of colors in palette.

</member>
        <member name="M:OdGsDevice.setLogicalPalette(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\details
    Sets the logical pallete to be used by this Device object.
    
    \param logicalPalette [in]  Logical palette.
    \param numColors [in]  Number of colors in palette.
    
    \remarks
    The logical pallete is used with calls to OdGiSubEntityTraits::setColor().

</member>
        <member name="M:OdGsDevice.getBackgroundColor">
\details
    Returns the Background Color of the GUI window of this Device object.

</member>
        <member name="M:OdGsDevice.setBackgroundColor(System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
    Sets the Background Color of the GUI window of this Device object.
    \param backgroundColor [in]  Background color.

</member>
        <member name="M:OdGsDevice.viewAt(System.Int32)">
\details
    Returns the specified OdGsView object associated with this Device object.
    \param viewIndex [in]  View index.

</member>
        <member name="M:OdGsDevice.numViews">
\details
    Returns the number of views associated with this Device object.

</member>
        <member name="M:OdGsDevice.eraseAllViews">
\details
    Erases all views associated with this Device object.

</member>
        <member name="M:OdGsDevice.eraseView(System.Int32)">
\details
    Erases the specified View object.

    \param viewIndex [in]  View index.
    \returns
    Returns true if and only if successful.

</member>
        <member name="M:OdGsDevice.eraseView(OdGsView*)">
\details
    Erases the specified View object.
    \param pView [in]  Pointer to the OdGsView object.

    \returns
    Returns true if and only if successful.

</member>
        <member name="M:OdGsDevice.insertView(System.Int32,OdGsView*)">
\details
    Inserts the specified Viewport object to the specified position in this Device object.

    \param viewIndex [in]  View index.
    \param pView [in]  Pointer to the OdGsView object.

</member>
        <member name="M:OdGsDevice.loadDeviceState(OdGsFiler*)">
\details
    Restores device state from filer object.

    \param pFiler [in]  Filer object.
    \returns
    true if device state is successfully loaded, false if device state loading is not supported.

</member>
        <member name="M:OdGsDevice.saveDeviceState(OdGsFiler*)">
\details
    Stores current device state into filer object.

    \param pFiler [out]  Filer object.
    \returns
    true if device state is successfully saved, false if device state saving is not supported.

</member>
        <member name="M:OdGsDevice.isModelCompatible(OdGsModel*)">
\details
    Checks compatibility between specified OdGsModel and this Device object.

    \param pModel [in]  Model object pointer to check compatibility.
    \returns
    true if the provided model is compatible with this device, false otherwise.
    \remarks
    Use this method to check compatibility of exist Model object and newly created device
    to be sure the exist Model object could be used with this Device object.
    By default this always returns false. It is must be implemented in inherited classes
    to enable Model object reuse support. If Device object use overriden Model object
    it should return false if input Model object doesn't overriden.
    Typical way to check compatibility is using of RTTI.
    If your metafiles cache doesn't support per-device sharing override and return false.

</member>
        <member name="M:OdGsDevice.createModel">
\details
    Creates a new OdGsModel object, and associates it with this Device object.
    
    \returns
    Returns a SmartPointer to the newly created object.

</member>
        <member name="M:OdGsDevice.addView(OdGsView*)">
\details
    Associates the specified Viewport object with this Device object.
    
    \param pView [in]  Pointer to the OdGsView object.

</member>
        <member name="M:OdGsDevice.createView(OdGsClientViewInfo!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
\details
    Creates a new OdGsView object, and associates it with this Device object.
    
    \param pViewInfo [in]  Pointer to the Client View Information for this Device object.
    \param enableLayerVisibilityPerView [in]  Layer visibility per viewport is supported, if and only if true.
    
    \returns
    Returns a SmartPointer to the newly created object.

    pViewInfo contains information returned by OdGiViewport::acadWindowId() and OdGiViewportDraw::viewportObjectId()

</member>
        <member name="M:OdGsDevice.onDisplayChange(System.Int32,System.Int32,System.Int32)">
\details
    Notification function called whenever the OS screen resolution and/or color depth have changed.
    
    \param bitsPerPixel [in]  Color depth.
    \param xPixels [in]  X pixels.
    \param yPixels [in]  Y pixels.
  
    \remarks
    This function is called after the operation.  

</member>
        <member name="M:OdGsDevice.onRealizeBackgroundPalette">
\details
    Notification function typically called whenever the GUI window for this Device object loses focus.
    
    \remarks
    Causes this Device object to realize its background palette.

</member>
        <member name="M:OdGsDevice.onRealizeForegroundPalette">
\details
    
    \remarks
    Causes this Device object to realize its foreground palette.

</member>
        <member name="M:OdGsDevice.getSize(OdGsDCRectDouble*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns device surface output rectangle.

    \param outputRect [out]  Obtains size of the output rectangle in device coordinates (pixels).

</member>
        <member name="M:OdGsDevice.getSize(OdGsDCRect*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns device surface output rectangle.

    \param outputRect [out]  Obtains size of the output rectangle in device coordinates (pixels).

</member>
        <member name="M:OdGsDevice.onSize(OdGsDCRectDouble!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Notification function called whenever the size of the GUI window for this Device object has changed.
    
    \param outputRect [in]  New size of the output rectangle in device coordinates (pixels).

    \remarks
    This function should not be called if this Device object has a width and/or height of 0, .

</member>
        <member name="M:OdGsDevice.onSize(OdGsDCRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Notification function called whenever the size of the GUI window for this Device object has changed.
    
    \param outputRect [in]  New size of the output rectangle in device coordinates (pixels).

    \remarks
    This function should not be called if this Device object has a width and/or height of 0, .

</member>
        <member name="M:OdGsDevice.update(OdGsDCRect*)">
\details
    Updates the GUI window for this Device object.
    
    \param pUpdatedRect [out]  Pointer to the a rectangle to receive the region updated by this function.

    \remarks
    This function call is propagated to all OdGsView objects owned by this Device object,
    thus displaying the correct image on the GUI window of this Device object.

</member>
        <member name="M:OdGsDevice.isValid">
\details
    Checks whether the GUI window for this Device object is showing the correct image.
    
    \returns 
    true if the GUI window for this Device object is showing the correct image, false otherwise.
    \remarks
    This implies the following:
    * No part of GUI area is flagged for refresh.
    * All rasterizations are complete
    * The rendering pipeline has been flushed.

</member>
        <member name="M:OdGsDevice.invalidate(OdGsDCRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Marks for refresh the specified region of the GUI window of this Device object.
     
    \param screenRect [in]  Rectangular area.

</member>
        <member name="M:OdGsDevice.invalidate">
\details
    Marks for refresh entire region of the GUI window of this Device object.

</member>
        <member name="M:OdGsDevice.setUserGiContext(OdGiContext*)">
\details
    Sets the User Context object associated with this Device object.
    \param pUserGiContext [in]  Pointer to the User Context.

</member>
        <member name="M:OdGsDevice.userGiContext">
\details
    Returns the User Context object associated with this Device object.

</member>
        <member name="M:OdGsCollisionDetectionContext.getProcessSignleList">
\details
  Checks that collision detection should detects collisions between list and all other entities (false)
  or it should detect collisions between entities in list (true).
  \returns Returns flag that indicates should collision detection detect collisions between entities in list instead of between list and other entities.

</member>
        <member name="M:OdGsCollisionDetectionContext.setProcessSignleList(System.Boolean)">
\details
  Specifies should collision detection detects collisions between list and all other entities (false)
  or it should detect collisions between entities in list (true).
  \param bSet [in] If true, collision detection will detect collisions between entities in list instead of between list and other entities.

</member>
        <member name="M:OdGsCollisionDetectionContext.getClearance">
\details
  Retrives collision detection clearance value.
  \returns Returns collision detection clearance value.

</member>
        <member name="M:OdGsCollisionDetectionContext.setClearance(System.Double)">
\details
  Specifies collision detection clearance value.
  \param c [in] Collision detection clearance value.

</member>
        <member name="M:OdGsCollisionDetectionContext.getCheckAll">
\details
  Checks that collision detection should check all faces instead of detecting first collision.
  \returns Returns flag that indicates should collision detection check all faces instead of detecting first collision.

</member>
        <member name="M:OdGsCollisionDetectionContext.setCheckAll(System.Boolean)">
\details
  Specifies that collision detection should check all faces instead of detecting first collision.
  \param bSet [in] If true, collision detection will check all faces instead of detecting first collision.

</member>
        <member name="M:OdGsCollisionDetectionContext.getCalculateDistance">
\details
  Checks should collision detection calculate distances (penetration depth or distance between objects)
  \returns Returns flag that indicates should collision detection calculate distances or not.

</member>
        <member name="M:OdGsCollisionDetectionContext.setCalculateDistance(System.Boolean)">
\details
  Specifies that collision detection should also calculate distances (penetration depth or distance between objects)
  \param bSet [in] If true, distances will be calculated.

</member>
        <member name="M:OdGsCollisionDetectionContext.toleranceOverride">
\details
  Retrives custom collision detection tolerance.
  \returns Returns custom collision detection tolerance.

</member>
        <member name="M:OdGsCollisionDetectionContext.isToleranceOverride">
\details
  Checks that collision detection should use custom tolerance.
  \returns Returns flag that indicates should collision detection use custom tolerance or not.

</member>
        <member name="M:OdGsCollisionDetectionContext.setToleranceOverride(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Specifies custom collision tolerance.
  \param tol [in] Collision tolerance

</member>
        <member name="M:OdGsCollisionDetectionContext.combineSubEntities">
\details
  Retrives subentity markers ignoring.
  \returns Returns flag that indicates should subentities markers be ignored or not.

</member>
        <member name="M:OdGsCollisionDetectionContext.setCombineSubEntities(System.Boolean)">
\details
  Specifies subentity markers ignoring.
  \param bSet [in] If true, subentities markers will be ignored.

</member>
        <member name="M:OdGsCollisionDetectionContext.ignoreViewExtents">
\details
    Checks whether collisions are detected even if objects are outside view extents. 
    \returns
    true if collisions are detected even if objects are beyond view extents, false otherwise.

</member>
        <member name="M:OdGsCollisionDetectionContext.setIgnoreViewExtents(System.Boolean)">
\details
    Specifies whether collisions should be detected despite objects are outside view extents.
    \param bSet    [in]  Flag that specifies whether to detected collisions even if objects are beyond view extents.

</member>
        <member name="M:OdGsCollisionDetectionContext.intersectionWithModel">
\details
    Retrieves a flag that specifies whether collisions are detected only when objects intersect. 
    \returns
    true if collisions are detected only when objects intersect or false when collisions can be detected via touches.

</member>
        <member name="M:OdGsCollisionDetectionContext.setIntersectionWithModel(System.Boolean)">
\details
    Sets flag that specifies whether collisions should be detected with a model.
    \param bSet    [in]  Flag that specifies whether to detected collisions with a model.

</member>
        <member name="M:OdGsCollisionDetectionContext.intersectionOnly">
\details
    Retrieves a flag that specifies whether collisions are detected only when objects intersect. 
    \returns
    true if collisions are detected only when objects intersect or false when collisions can be detected via touches.

</member>
        <member name="M:OdGsCollisionDetectionContext.setIntersectionOnly(System.Boolean)">
\details
    Sets flag that specifies whether collisions are detected only when objects intersect.
    \param bSet    [in]  Flag that specifies whether to detect collisions only when objects intersect. If set to false, collisions can be detected via touches (no intersections).

</member>
        <member name="M:OdGsCollisionDetectionContext.#ctor">
\details
    Default constructor for the OdGsCollisionDetectionContext class. Sets default tolerance value for geometric operations.

</member>
        <member name="M:OdGsCollisionDetectionReactor.collisionDetected(OdGiPathNode!System.Runtime.CompilerServices.IsConst*,OdGiPathNode!System.Runtime.CompilerServices.IsConst*,System.Double)">
\details
  Notification function called whenever an collision detected if distance calsulation is specified

  \param pPathNode1 [in]  Pointer to the OdGiPathNode object from OdGsView::collide input list
  \param pPathNode2 [in]  Pointer to the OdGiPathNode object that collides with pathNode1
  \param dDistace   [in]  Collision distance. If negative, it is the penetration depth. If positive, it is the clearance.

  \remarks
  Returns kContinue if the operation is to continue or kBreak to stop collision detection

</member>
        <member name="M:OdGsCollisionDetectionReactor.collisionDetected(OdGiPathNode!System.Runtime.CompilerServices.IsConst*,OdGiPathNode!System.Runtime.CompilerServices.IsConst*)">
\details
    Notification function called whenever an collision detected.

    \param pPathNode1 [in]  Pointer to the OdGiPathNode object from OdGsView::collide input list
    \param pPathNode2 [in]  Pointer to the OdGiPathNode object that collides with pathNode1

    \remarks
    Returns kContinue if the operation is to continue or kBreak to stop collision detection

</member>
        <member name="M:OdGsView.getSnapShot(OdSmartPtr&lt;OdGiRasterImage&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGsDCRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns image of current view buffer.

    \param pImage [out]  Pointer for image to return.
    \param region [in]  Rectangle specifies region to return.
    \remarks
    Implementation can throw eNotImplementedYet exception if current vectorization module doesn't support snap shots.

</member>
        <member name="M:OdGsView.getNumPixelsInUnitSquare(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
\details
    Returns the display pixel density at the specified point for this Viewport object.

    \param point [in]  WCS center of the unit square.
    \param pixelDensity [out]  Receives the pixel density.
    \param bUsePerspective [in]  Enable perspective inclusion into pixel density calculation.
    \remarks
    Pixel density is measured in pixels per WCS unit.
    This function can be used to determine if the geometry generated for an object will 
    be smaller than the size of a pixel.

</member>
        <member name="M:OdGsView.pointInViewport(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Checks whether the specified point is inside viewport area.

    \param screenPoint [in]  Check point in device coordinate space.
    \returns
    true if the passed point is inside the viewport, false otherwise.

</member>
        <member name="M:OdGsView.setClearColor(OdGsView.ClearColor)">
\details
    Sets the clear color for this view

    \param color [in]  The clear color.

</member>
        <member name="T:OdGsView.ClearColor">
\details
    Clear color for this view.

</member>
        <member name="M:OdGsView.clientViewInfo(OdGsClientViewInfo*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the ClientViewInfo for this Viewport object.
    
    \param clientViewInfo [out]  Receives the ClientViewInfo.

</member>
        <member name="M:OdGsView.linetypeAlternateScaleMultiplier">
\details
    Returns current alternate linetype scale multiplier value.
    \sa
    <exref target="https://docs.opendesign.com/td/db_linetype.html">Working with Linetypes</exref></member>
        <member name="M:OdGsView.setAlternateLinetypeScaleMultiplier(System.Double)">
\details
    Sets a multiplier that could be used as an alternate scale factor for linetypes in this Viewport object.
    
    \param linetypeAlternateScaleMultiplier [in]  Alternate linetype scale multiplier.
    \sa
    <exref target="https://docs.opendesign.com/td/db_linetype.html">Working with Linetypes</exref></member>
        <member name="M:OdGsView.linetypeScaleMultiplier">
\details
    Returns current linetype scale multiplier value.
    \sa
    <exref target="https://docs.opendesign.com/td/db_linetype.html">Working with Linetypes</exref></member>
        <member name="M:OdGsView.setLinetypeScaleMultiplier(System.Double)">
\details
    Sets a multiplier that is used to scale all linetypes in this Viewport object.
    
    \param linetypeScaleMultiplier [in]  Linetype scale multiplier.

</member>
        <member name="M:OdGsView.initLights(OdRxIterator*)">
\details
    Returns an iterator to traverse the lights attached to this Viewport object.
    \param pLightsIterator [in]  Pointer to the lights iterator.

</member>
        <member name="M:OdGsView.getStereoParameters(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the stereo parameters for this Viewport Object.
    
    \param magnitude [out]  Receives the view separation [0.0 .. 2.0].
    \param parallax [out]  Receives the plane of zero parallax adjustment [0.0 .. 2.0].
    \remarks
    magnitude controls view eye separation, and hence the stereo effect.
    * A magnitude of 1.0 is the default value.
    * A magnitude of 0.0 produces no stereo effect.
    * A magnitude of 2.0 produces a double stereo effect.
    parallax adjusts the zero parallax plane.
    * A parallax of 1.0 is the default value. An object centered at the target will be half-in and half-out of the screen.
    * A parallax of 0.0 moves the object into the screen.
    * A parallax of 2.0 move the object out of the screen.

</member>
        <member name="M:OdGsView.setStereoParameters(System.Double,System.Double)">
\details
    Sets the stereo parameters for this Viewport Object.
    \param magnitude [in]  View separation [0.0 .. 2.0].
    \param parallax [in]  Adjusts the plane of zero parallax [0.0 .. 2.0].
    
    \remarks
    magnitude controls view eye separation, and hence the stereo effect.
    * A magnitude of 1.0 is the default value.
    * A magnitude of 0.0 produces no stereo effect.
    * A magnitude of 2.0 produces a double stereo effect.
    parallax adjusts the zero parallax plane.
    * A parallax of 1.0 is the default value. An object centered at the target will be half-in and half-out of the screen.
    * A parallax of 0.0 moves the object into the screen.
    * A parallax of 2.0 move the object out of the screen.

</member>
        <member name="M:OdGsView.isStereoEnabled">
\details
    Checks whether stereo viewing is enabled for this Viewport object.
    \returns
    true if and only if stereo viewing is enabled for this Viewport object, false otherwise.

</member>
        <member name="M:OdGsView.enableStereo(System.Boolean)">
\details
    Controls stereo viewing for this Viewport object.
    
    \param enable [in]  Controls stereo viewing.

</member>
        <member name="M:OdGsView.exceededBounds">
\details
    Checks whether any view parameters have exceeded their boundaries since the last
    call to this function.
    \returns 
    true if any view parameters have exceeded their boundaries since the last call to this function, false otherwise.
    \remarks
    The following calls are monitored:
    
    * dolly()
    * orbit()
    * pan() 
    * roll()
    * setBackClip()
    * setFrontClip()
    * setView()
    * zoom()

</member>
        <member name="M:OdGsView.viewParameters(OdGsView*)">
\details
    Sets the view parameters of the specified OdGsView object to that of this Viewport object.
    \param pView [out]  Receives the view parameters.

</member>
        <member name="M:OdGsView.cloneView(System.Boolean,System.Boolean)">
\details
    Clones this view object.

    \param cloneViewParameters [in]  If and only if true, view parameters will be cloned.
    \param cloneGeometry [in]  If and only if true, geometry will be cloned.
    \returns
    Returns a SmartPointer to the newly created object.

</member>
        <member name="M:OdGsView.extentsInView(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Checks whether specified WCS box is visible completely or partially inside current view frustum.

    \param minPt [in]  minimal WCS box point.
    \param maxPt [in]  maximal WCS box point.
    \returns
    true if the specified extents box is visible in the current viewport frustum of the wrapped view, false otherwise.

</member>
        <member name="M:OdGsView.pointInView(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Checks whether specified point is visible inside current view frustum.

    \param pt [in]  WCS point for check.
    \returns
    true if the specified point is visible in the wrapped viewport, false otherwise.

</member>
        <member name="M:OdGsView.zoomWindow(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Scales the camera to completely include specified screen area.

    \param lowerLeft [in]  Lower-left corner in nomalized device coordinates [0.0 .. 1.0].
    \param upperRight [in]  Upper-right corner in nomalized device coordinates [0.0 .. 1.0].

</member>
        <member name="M:OdGsView.zoomExtents(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Scales the camera to completely include specified WCS box inside view frustum.

    \param minPt [in]  minimal WCS box point.
    \param maxPt [in]  maximal WCS box point.

</member>
        <member name="M:OdGsView.pan(System.Double,System.Double)">
\details
    Rotates the target about the camera the specified amounts.
     
    \param xPan [in]  X-axis pan.
    \param yPan [in]  Y-axis pan.   
    \remarks
    The target moves on the surface a sphere whose center the camera position and whose
    radius is the distance from the camera position to its target.
    * The target is first rotated about an axis parallel to the X-axis and passing through the camera.  
    * The target is next rotated about an axis parallel to the Y-axis and passing through the camera.  
    Camera Coordinates are relative to the view of a target from a camera. 
    * The Y-axis is along up vector. 
    * The Z-axis is along the vector from camera position to the target. 
    * The X-axis is the cross product Y-axis x Z-axis 
    All angles are expressed in radians.

</member>
        <member name="M:OdGsView.zoom(System.Double)">
\details
    Scales the focal length of the camera by the specified amount.
     
    \param zoomFactor [in]  Zoom factor.

</member>
        <member name="M:OdGsView.orbit(System.Double,System.Double)">
\details
    Orbits the camera about the target by the specified amounts.
     
    \param xOrbit [in]  X-axis Orbit.
    \param yOrbit [in]  Y-axis Orbit.
    \remarks
    the camera moves on the surface a sphere whose center the camera target and whose
    radius is the distance from the camera position to its target 
    * The camera is first rotated about an axis parallel to the X-axis and passing through the target.  
    * The camera is next rotated about an axis parallel to the Y-axis and passing through the target.
    Camera Coordinates are relative to the view of a target from a camera.  
    * The Y-axis is along up vector. 
    * The Z-axis is along the vector from camera position to the target. 
    * The X-axis is the cross product Y-axis x Z-axis 
    All angles are expressed in radians.

</member>
        <member name="M:OdGsView.roll(System.Double)">
\details
    Rotates the camera by the specified amount about the eye vector.
     
    \param rollAngle [in]  Camera CCW roll angle.
    \remarks
    Positive angles rotate the camera counterclockwise about the eye vector
    when viewed from the camera position to the target. This corresponds
    to a clockwise rotation of the up vector.
    Camera Coordinates are relative to the view of a target from a camera. 
    * The Y-axis is along up-vector. 
    * The Z-axis (eye vector) is along the vector from camera position to the target. 
    * The X-axis is the cross product Y-axis x Z-axis.
    All angles are expressed in radians.

</member>
        <member name="M:OdGsView.dolly(System.Double,System.Double,System.Double)">
\details
    Translates the camera position and target by the specified Camera Coordinate dolly amount.
    
    \param xDolly [in]  Camera Coordinate X dolly amount.
    \param yDolly [in]  Camera Coordinate Y dolly amount.
    \param zDolly [in]  Camera Coordinate Z dolly amount.
    \remarks
    Camera Coordinates are relative to the view of a target from a camera.   
    * The Y-axis is along up vector. 
    * The Z-axis is along the vector from camera position to the target. 
    * The X-axis is the cross product Y-axis x Z-axis 

</member>
        <member name="M:OdGsView.dolly(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Translates the camera position and target by the specified Camera Coordinate dolly amount.
     
    \param dollyVector [in]  Camera Coordinate dolly vector. 
    \remarks
    Camera Coordinates are relative to the view of a target from a camera. 
    * The Y-axis is along up vector. 
    * The Z-axis is along the vector from camera position to the target. 
    * The X-axis is the cross product Y-axis x Z-axis 

</member>
        <member name="M:OdGsView.invalidateCachedViewportGeometry">
\details
    Marks for regeneration all subViewportDraw() geometry for this Viewport object.

</member>
        <member name="M:OdGsView.isVisible">
\details
    Checks whether the viewport object is not hidden.
    \returns
    true if the wrapped viewport object is visible, false otherwise.

</member>
        <member name="M:OdGsView.show">
\details
    Un-hides this Viewport object.

</member>
        <member name="M:OdGsView.hide">
\details
    Hides this Viewport object.

</member>
        <member name="M:OdGsView.flush">
\details
    Flushes the graphic pipeline and renders this Viewport object.
    
    \remarks
    This function should be called only during interactivty. 

</member>
        <member name="M:OdGsView.update">
\details
    Flushes any queued graphics to the display device.
    
    \remarks
    If called while this Viewport object is in the interactive state, this function immediately returns.

</member>
        <member name="M:OdGsView.isValid">
\details
    Checks whether this Viewport shows the correct image.
    \returns
    true if this Viewport object is showing the correct image, false otherwise.

    \remarks
    This implies the follow:
    * No part of GUI area is flagged for refresh.
    * All rasterizations are complete
    * The rendering pipeline has been flushed.

</member>
        <member name="M:OdGsView.invalidate(OdGsDCRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Marks for refresh the specified region of this Viewport object.
     
    \param screenRect [in]  Screen rectangle in device coordinates (pixels).

</member>
        <member name="M:OdGsView.invalidate">
\details
    Marks the entire area of this View for refreshing.

</member>
        <member name="M:OdGsView.getModelList">
\details
    Returns array of OdGsModel objects associated with this Viewport object.

</member>
        <member name="M:OdGsView.getModel(OdGiDrawable!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns OdGsModel object associated with specified OdGiDrawable object in this Viewport object.

    \param pDrawable [in]  Pointer onto OdGiDrawable object.

</member>
        <member name="M:OdGsView.eraseAll">
\details
    Removes all scene graphs from this Viewport object.
    
    \param sceneGraph [in]  Root of scene graph.

</member>
        <member name="M:OdGsView.erase(OdGiDrawable*)">
\details
    Removes the specified scene graph from this Viewport object.
    
    \param sceneGraph [in]  Pointer to the root of the scene graph.
    \returns
    true if scene graph is successfully erased, false otherwise.

</member>
        <member name="M:OdGsView.rootDrawableIdAt(System.Int32,OdSmartPtr&lt;OdGsModel&gt;*)">
\details
    Retrieves a persistent object identifier of the root drawable at the specified index.
    \param i [in]  Index of the drawable to return.
    \param pModelReturn [in]  Index of the drawable to return.

</member>
        <member name="M:OdGsView.numRootDrawables">
\details
    Retrieves a quantity of root drawables for this viewport.

</member>
        <member name="M:OdGsView.add(OdGiDrawable*,OdGsModel*)">
\details
    Adds the specified scene graph to this Viewport object.
    
    \param pSceneGraph [in]  Pointer to the root of the scene graph.
    \param pModel [in]  Pointer to the Model object to which all scene graph notifications are to be directed.
    
    \remarks
    This function is intended to be used as follows:
    
    1.  Construct a scene graph of OdGiDrawable objects. 
        Each object draws its children with OdGiGeometry::draw().
    
    2.  With this function, add the root of the scene graph and the 
        OdGsModel that handles notifications to this Viewport object.

</member>
        <member name="M:OdGsView.mode">
\details
    Sets the render mode for this Viewport object.
    
    \remarks
    mode must be one of the following:
    
    <table>
    Name                            Value      Description
    kBoundingBox                    -1         Bounding box. For internal use only.
    k2DOptimized                    0          Standard display. Optimized for 2D.
    kWireframe                      1          Standard display. Uses 3D pipeline.
    kHiddenLine                     2          Wireframe display. Hidden lines removed.
    kFlatShaded                     3          Faceted display. One color per face.
    kGouraudShaded                  4          Smooth shaded display. Colors interpolated between vertices.
    kFlatShadedWithWireframe        5          Faceted display with wireframe overlay.
    kGouraudShadedWithWireframe     6          Smooth shaded display with wireframe overlay.
    </table></member>
        <member name="M:OdGsView.setMode(OdGsView.RenderMode)">
\details
    Sets the render mode for this Viewport object.
    
    \param mode [in]  Render mode.
    
    \remarks
    mode must be one of the following:
    
    <table>
    Name                            Value      Description
    kBoundingBox                    -1         Bounding box. For internal use only.
    k2DOptimized                    0          Standard display. Optimized for 2D.
    kWireframe                      1          Standard display. Uses 3D pipeline.
    kHiddenLine                     2          Wireframe display. Hidden lines removed.
    kFlatShaded                     3          Faceted display. One color per face.
    kGouraudShaded                  4          Smooth shaded display. Colors interpolated between vertices.
    kFlatShadedWithWireframe        5          Faceted display with wireframe overlay.
    kGouraudShadedWithWireframe     6          Smooth shaded display with wireframe overlay.
    </table></member>
        <member name="M:OdGsView.objectToDeviceMatrix">
\details
      Returns the matrix that transforms coordinates from model space to screen space for this Viewport object.

      \sa
      Coordinate Systems.

</member>
        <member name="M:OdGsView.worldToDeviceMatrix">
\details
      Returns a matrix that transforms coordinates from world space to screen space for this Viewport object. 
      
      \remarks
      This is equivalent to the concatenation of the viewingMatrix, 
      projectionMatrix, and screenMatrix.

      \sa
      Coordinate Systems.

</member>
        <member name="M:OdGsView.screenMatrix">
\details
      Returns the matrix that transforms normalized device space to screen space for this Viewport object.

      \sa
      Coordinate Systems.

</member>
        <member name="M:OdGsView.projectionMatrix">
\details
      Returns the matrix that transforms view space to normalized device space for this Viewport object.

      \sa
      Coordinate Systems.

</member>
        <member name="M:OdGsView.viewingMatrix">
\details
      Returns the matrix that transforms world space to view space for this Viewport object.

      \sa
      Coordinate Systems.

</member>
        <member name="M:OdGsView.backClip">
\details
    Returns the back clip distance from the target of this Viewport object.

</member>
        <member name="M:OdGsView.setBackClip(System.Double)">
\details
    Sets the back clip distance from the target of this Viewport object.
    \param backClip [in]  Back clip distance.

</member>
        <member name="M:OdGsView.isBackClipped">
\details
    Checks whether back clipping is enabled for the viewport object.
    \returns
    true if back clipping is enabled for the viewport object, false otherwise.

</member>
        <member name="M:OdGsView.setEnableBackClip(System.Boolean)">
\details
    Controls the back clipping of this Viewport object.
    \param enable [in]  Enable back clipping.

</member>
        <member name="M:OdGsView.frontClip">
\details
    Returns the front clip distance from the target of this Viewport object.

</member>
        <member name="M:OdGsView.setFrontClip(System.Double)">
\details
    Sets the front clip distance from the target of this Viewport object.
    \param frontClip [in]  Front clip distance.

</member>
        <member name="M:OdGsView.isFrontClipped">
\details
    Checks whether front clipping is enabled for the viewport object.
    \returns
    true if front clipping is enabled for the viewport object, false otherwise.

</member>
        <member name="M:OdGsView.setEnableFrontClip(System.Boolean)">
\details
    Controls the front clipping of this Viewport object.
    \param enable [in]  Enable front clipping.

</member>
        <member name="M:OdGsView.fieldHeight">
\details
    Returns the WCS projection plane (field) height for this Viewport object.

</member>
        <member name="M:OdGsView.fieldWidth">
\details
    Returns the WCS projection plane (field) width for this Viewport object.

</member>
        <member name="M:OdGsView.isPerspective">
\details
    Checks whether the projection type for the viewport object is kPerspective.
    \returns
    true if projection type for the viewport object is kPerspective, false otherwise.

</member>
        <member name="M:OdGsView.setLensLength(System.Double)">
\details
    Sets the perspective lens length for this Viewport object.
    \param lensLength [in]  Perspective lens length.

</member>
        <member name="M:OdGsView.lensLength">
\details
    Returns the perspective lens length for this Viewport object.

</member>
        <member name="M:OdGsView.upVector">
\details
    Returns the WCS camera up vector for this Viewport object.

</member>
        <member name="M:OdGsView.target">
\details
    Returns the WCS camera target for this Viewport object.

</member>
        <member name="M:OdGsView.position">
\details
    Returns the WCS camera position for this Viewport object.

</member>
        <member name="M:OdGsView.setView(OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double,OdGsView.Projection)">
\details
    Sets the camera parameters for this Viewport object.
    
    \param position [in]  Camera position.
    \param target [in]  Camera target.
    \param upVector [in]  Camera up vector.
    \param fieldWidth [in]  Projection plane (field) width.
    \param fieldHeight [in]  Projection plane (field) height.
    \param projectionType [in]  Projection type.    
    \remarks
    This method defines the transfomation from WCS coordinates to normalized device coordinates.
    All parameters are in WCS coordinates.
    projectionType must be one of the following:
    
    <table>
    Name           Value
    kParallel      0
    kPerspective   1
    </table></member>
        <member name="M:OdGsView.isViewportBorderVisible">
\details
    Checks whether viewport border is visible.
    \returns
    true if the border is visible for this Viewport object, false otherwise.

</member>
        <member name="M:OdGsView.setViewportBorderVisibility(System.Boolean)">
\details
    Controls the border visibility for this Viewport object.
    \param visible [in]  Controls visibility.

</member>
        <member name="M:OdGsView.getViewportBorderProperties(System.UInt32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the color and width of the border for this Viewport object.
    \param color [out]  Receives the border color.
    \param width [out]  Receives the border width in pixels.

</member>
        <member name="M:OdGsView.setViewportBorderProperties(System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int32)">
\details
    Sets the color and width of the border for this Viewport object.
    \param color [in]  Border color.
    \param width [in]  Border width in pixels.

</member>
        <member name="M:OdGsView.removeViewport3dClipping">
\details
    Removes the 3d clipping from this Viewport object.

</member>
        <member name="M:OdGsView.viewport3dClipping(OdGiAbstractClipBoundary!System.Runtime.CompilerServices.IsConst**)">
\details
    Returns the current 3d clipping for this Viewport object.

    \param ppClipInfo [out]  Optional 3d clipping boundary extended data.

    \remarks
    Returns null if 3d clipping boundary doesn't set.

</member>
        <member name="M:OdGsView.setViewport3dClipping(OdGiClipBoundary!System.Runtime.CompilerServices.IsConst*,OdGiAbstractClipBoundary!System.Runtime.CompilerServices.IsConst*)">
\details
    Defines the 3d clipping for this Viewport object.

    \param pBoundary [in]  3d clipping boundary.
    \param pClipInfo [in]  Optional 3d clipping boundary extended data.

</member>
        <member name="M:OdGsView.removeViewportClipRegion">
\details
    Removes the polygonal clip region for this Viewport object.

</member>
        <member name="M:OdGsView.viewportClipRegion(OdArray&lt;System.Int32,OdMemoryAllocator&lt;System.Int32&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdArray&lt;OdGePoint2d,OdMemoryAllocator&lt;OdGePoint2d&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns a polygonal clip region for this Viewport object.
    
    \param counts [out]  Array of the number of vertices in each polygonal contour.
    \param vertices [out]  Array of device coordinate (pixel) vertices defining the polygonal contours.

</member>
        <member name="M:OdGsView.viewportClipRegion(OdArray&lt;System.Int32,OdMemoryAllocator&lt;System.Int32&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdArray&lt;OdGsDCPoint,OdMemoryAllocator&lt;OdGsDCPoint&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns a polygonal clip region for this Viewport object.
    
    \param counts [out]  Array of the number of vertices in each polygonal contour.
    \param vertices [out]  Array of device coordinate (pixel) vertices defining the polygonal contours.

</member>
        <member name="M:OdGsView.setViewportClipRegion(System.Int32,System.Int32!System.Runtime.CompilerServices.IsConst*,OdGePoint2d!System.Runtime.CompilerServices.IsConst*)">
\details
    Defines a polygonal clip region for this Viewport object.
    
    \param numCoutours [in]  Number of polygonal contours.
    \param numVertices [in]  Array of the number of vertices in each polygonal contour.
    \param vertices [in]  Array of device coordinate (pixel) vertices defining the polygonal contours.

</member>
        <member name="M:OdGsView.setViewportClipRegion(System.Int32,System.Int32!System.Runtime.CompilerServices.IsConst*,OdGsDCPoint!System.Runtime.CompilerServices.IsConst*)">
\details
    Defines a polygonal clip region for this Viewport object.
    
    \param numCoutours [in]  Number of polygonal contours.
    \param numVertices [in]  Array of the number of vertices in each polygonal contour.
    \param vertices [in]  Array of device coordinate (pixel) vertices defining the polygonal contours.

</member>
        <member name="M:OdGsView.getViewport(OdGsDCRectDouble*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the size and position of this Viewport object.
    \param screenRect [out]  Receives the screen rectangle in device coordinates (pixels).
    \remarks
    (0,0) is the lower-left corner of the owning Device object.  Coordinates increase upward and to the right.
    The View object may be partly or completely off screen.    

</member>
        <member name="M:OdGsView.getViewport(OdGsDCRect*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the size and position of this Viewport object.
    \param screenRect [out]  Receives the screen rectangle in device coordinates (pixels).
    
    \remarks
    (0,0) is the lower-left corner of the owning Device object.  Coordinates increase upward and to the right.
    
    \remarks
    The View object may be partly or completely off screen.    

</member>
        <member name="M:OdGsView.getViewport(OdGePoint2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the size and position of this Viewport object.
    \param lowerLeft [out]  Receives the lower-left corner in nomalized device coordinates [0.0 .. 1.0].
    \param upperRight [out]  Receives the upper-right corner in nomalized device coordinates [0.0 .. 1.0].
    
    \remarks
    (0,0) is the lower-left corner of the owning Device object.  Coordinates increase upward and to the right.
    
    \remarks
    The View object may be partly or completely off screen.    

</member>
        <member name="M:OdGsView.setViewport(OdGsDCRectDouble!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets the size and position of this Viewport object.
    
    \param screenRect [in]  Screen rectangle in device coordinates (pixels).    
    \remarks
    (0,0) is the lower-left corner of the owning Device object. Coordinates increase upward and to the right.
    The View object can be partly or completely off screen.    

</member>
        <member name="M:OdGsView.setViewport(OdGsDCRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets the size and position of this Viewport object.
    
    \param screenRect [in]  Screen rectangle in device coordinates (pixels).    
    \remarks
    (0,0) is the lower-left corner of the owning Device object. Coordinates increase upward and to the right. 
    \remarks
    The View object can be partly or completely off screen.    

</member>
        <member name="M:OdGsView.setViewport(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets the size and position of this Viewport object.
    
    \param lowerLeft [in]  Lower-left corner in nomalized device coordinates [0.0 .. 1.0].
    \param upperRight [in]  Upper-right corner in nomalized device coordinates [0.0 .. 1.0].   
    \remarks
    (0,0) is the lower-left corner of the owning Device object. Coordinates increase upward and to the right.
    The View object can be partly or completely off screen.    

</member>
        <member name="M:OdGsView.setUserGiContext(OdGiContext*)">
\details
    Sets the User Context object associated with this Viewport object.
    \param pUserGiContext [in]  Pointer to the User Context.

</member>
        <member name="M:OdGsView.userGiContext">
\details
    Returns the GiContext object associated with this Viewport object.

</member>
        <member name="T:OdGsView.ViewUpdateFlags">
\details
    View update flags.

</member>
        <member name="T:OdGsView.DefaultLightingType">
\details
    Default lighting modes.

</member>
        <member name="T:OdGsView.SelectionMode">
\details
    Selection modes.

</member>
        <member name="T:OdGsView.Projection">
\details
    Projection types.

</member>
        <member name="T:OdGsView.RenderMode">
\details
    Render modes for the view.

</member>
        <member name="D:OdGiContextualColorsRedirPtr">
\details
  This template class is a specialization of the OdSmartPtr class template for OdGiContextualColorsRedir object pointers.

</member>
        <member name="M:OdGiContextualColorsRedir.redirectionObject">
\details
    Retrieves the redirection object.
    
    \returns
    pointer to the redirection OdGiContextualColors object.


\details
    Retrieves the redirection object.
    
    \returns
    pointer to the redirection OdGiContextualColors object.

</member>
        <member name="M:OdGiContextualColorsRedir.setRedirectionObject(OdGiContextualColors*)">
\details
    Sets an existing OdGiContextualColors object for redirection.

    \param pObj [in]  Redirection object.

</member>
        <member name="D:OdGiContextualColorsImplPtr">
\details
  This template class is a specialization of the OdSmartPtr class template for OdGiContextualColorsImpl object pointers.

</member>
        <member name="M:OdGiContextualColorsImpl.setDefaultForType">
\details
    Sets up the default color and tint values for the currently specified type of vectorization context.

</member>
        <member name="M:OdGiContextualColorsImpl.setContextualColorTint(OdGiContextualColors.ColorTint,System.Boolean)">
\details
    Sets a boolean value that indicates whether X, Y and Z axis color tinting is applied
    to the specified interface element.

    \param type [in]  Interface element.
    \param bSet [in]  Boolean value to set.

</member>
        <member name="M:OdGiContextualColorsImpl.setContextualColor(OdGiContextualColors.ColorType,System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
    Sets a color for the specified interface element.

    \param type [in]  Interface element.
    \param color [in]  Color to set.

</member>
        <member name="M:OdGiContextualColorsImpl.setContextualColor(OdGiContextualColors.ColorType,OdCmEntityColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets a color for the specified interface element.

    \param type [in]  Interface element.
    \param color [in]  Color to set.

</member>
        <member name="M:OdGiContextualColorsImpl.visualType">
\details
    Retrieves the type of vectorization context.
    
    \returns
    type of vectorization context.

</member>
        <member name="M:OdGiContextualColorsImpl.setVisualType(OdGiContextualColorsImpl.VisualType)">
\details
    Sets a type of vectorization context.

    \param type [in]  Context type to set.

</member>
        <member name="T:OdGiContextualColorsImpl.VisualType">
\details
    Specifies the list of vectorization context types.

</member>
        <member name="D:OdGiContextualColorsPtr">
\details
  This template class is a specialization of the OdSmartPtr class template for OdGiContextualColors object pointers.

</member>
        <member name="M:OdGiContextualColors.contextualColorTint(OdGiContextualColors.ColorTint)">
\details
    Checks whether X, Y and Z axis color tinting is applied to the specified interface element.

    \param type [in]  Interface element.
    
    \returns
    true if tinting is applied to a specified interface element, false otherwise.

</member>
        <member name="M:OdGiContextualColors.contextualColor(OdGiContextualColors.ColorType)">
\details
    Retrieves the color of the specified interface element in the current vectorization context.

    \param type [in]  Interface element.
    
    \returns
    color of the specified interface element as OdCmEntityColor instance.

</member>
        <member name="T:OdGiContextualColors.ColorTint">
\details
    Specifies the list of interface elements for which X, Y and Z axis color tinting
    can be applied in the current vectorization context.

</member>
        <member name="T:OdGiContextualColors.ColorType">
\details
    Specifies the list of interface elements for which the color can be changed
    in the current vectorization context.

</member>
        <member name="M:OdGiContextualColors.flagsSet(System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
    Retrieves the current state of the specified runtime context flag.

    \param nFlags [in]  Flag of the state that should be checked.
    
    \returns
    true if the specified flag is set, false otherwise.

</member>
        <member name="M:OdGiContextualColors.setContextFlags(System.UInt32!System.Runtime.CompilerServices.IsLong,System.Boolean)">
\details
    Sets the specified runtime context flag to the specified value.

    \param nFlags [in]  Flag to set.
    \param bSet [in]  Value to set.

</member>
        <member name="M:OdGiContextualColors.cameraClipping">
\details
    Retrieves the color of the camera clipping planes in the current vectorization context.
    
    \returns
    color of the camera clipping planes as OdCmEntityColor instance.

</member>
        <member name="M:OdGiContextualColors.cameraFrustrum">
\details
    Retrieves the color of the camera frustrum in the current vectorization context.
    
    \returns
    color of the camera frustrum as OdCmEntityColor instance.

</member>
        <member name="M:OdGiContextualColors.cameraGlyphs">
\details
    Retrieves the color of the camera glyphs in the current vectorization context.
    
    \returns
    color of the camera glyphs as OdCmEntityColor instance.

</member>
        <member name="M:OdGiContextualColors.webMeshMissingColor">
\details
    Retrieves the color of the web light glyphs in the current vectorization context
    when the web light file is unavailable.
    
    \returns
    color of the web light shape glyph as OdCmEntityColor instance.

</member>
        <member name="M:OdGiContextualColors.webMeshColor">
\details
    Retrieves the color of the web light glyphs in the current vectorization context.
    
    \returns
    color of the web light glyph as OdCmEntityColor instance.

</member>
        <member name="M:OdGiContextualColors.lightDistanceColor">
\details
    Retrieves the color of the light distance glyphs in the current vectorization context.
    
    \returns
    color of the light distance glyph as OdCmEntityColor instance.

</member>
        <member name="M:OdGiContextualColors.lightShapeColor">
\details
    Retrieves the color of the light shape glyph in the current vectorization context.
    
    \returns
    color of the light shape glyph as OdCmEntityColor instance.

</member>
        <member name="M:OdGiContextualColors.lightEndLimit">
\details
    Retrieves the color of the light end limit indicator in the current vectorization context.
    
    \returns
    color of the light end limit indicator as OdCmEntityColor instance.

</member>
        <member name="M:OdGiContextualColors.lightStartLimit">
\details
    Retrieves the color of the light start limit indicator in the current vectorization context.
    
    \returns
    color of the light start limit indicator as OdCmEntityColor instance.

</member>
        <member name="M:OdGiContextualColors.lightFalloff">
\details
    Retrieves the color of the light fall off area in the current vectorization context.
    
    \returns
    color of the light fall off area as OdCmEntityColor instance.

</member>
        <member name="M:OdGiContextualColors.lightHotspot">
\details
    Retrieves the color of the light hotspot in the current vectorization context.
    
    \returns
    color of the light hotspot as OdCmEntityColor instance.

</member>
        <member name="M:OdGiContextualColors.lightGlyphs">
\details
    Retrieves the color of light glyphs in the current vectorization context.
    
    \returns
    color of light glyphs as OdCmEntityColor instance.

</member>
        <member name="M:OdGiContextualColors.gridAxisLineTintXYZ">
\details
     Checks whether X, Y and Z axis color tinting is applied to the axis rays emitted from the grid origin
    in the current vectorization context. Otherwise returns false.
    
    \returns
    true if the X, Y and Z axis color tinting is applied to the axis rays emitted from the grid origin, false otherwise

</member>
        <member name="M:OdGiContextualColors.gridMinorLineTintXYZ">
\details
    Checks whether X, Y and Z axis color tinting is applied to the minor grid lines
    in the current vectorization context.
    
    \returns
    true if the X, Y and Z axis color tinting is applied to the minor grid lines, false otherwise

</member>
        <member name="M:OdGiContextualColors.gridMajorLineTintXYZ">
\details
    Checks whether X, Y and Z axis color tinting is applied to the major grid lines
    in the current vectorization context.
    
    \returns
    true if the X, Y and Z axis color tinting is applied to the major grid lines, false otherwise

</member>
        <member name="M:OdGiContextualColors.gridAxisLines">
\details
    Retrieves the color of axis rays emitted from the grid origin in the current vectorization context.
    
    \returns
    color of axis rays emitted from the grid origin as OdCmEntityColor instance.

</member>
        <member name="M:OdGiContextualColors.gridMinorLines">
\details
    Retrieves the color of minor grid lines in the current vectorization context.
    
    \returns
    color of minor grid lines as OdCmEntityColor instance.

</member>
        <member name="M:OdGiContextualColors.gridMajorLines">
\details
    Retrieves the color of major grid lines in the current vectorization context.
    
    \returns
    color of major grid lines as OdCmEntityColor instance.

</member>
        <member name="T:EMetafilePlayMode">
\details
    Represents metafile play mode.

</member>
        <member name="F:kMfExtents">
Play as geometry for extents calculation. Valid only if metafile can be played as OdGiConveyorGeometry ( if useMetafileAsGeometry() returns true). 
</member>
        <member name="F:kMfNested">
Play data of nested metafiles only. Valid only if metafile can be played as OdGiConveyorGeometry ( if useMetafileAsGeometry() returns true). 
</member>
        <member name="F:kMfSelect">
Play as geometry for selection. Valid only if metafile can be played as OdGiConveyorGeometry ( if useMetafileAsGeometry() returns true). 
</member>
        <member name="F:kMfDisplay">
Play for visualization. Default, valid for all metafile types. 
</member>
        <member name="D:OdGsWindowingSystemID">
\details
    This data type represents a window handle, analogue of Windows window -- HWND

</member>
        <member name="F:OdGsDCRectDouble.m_max">
Maximum point. 
</member>
        <member name="F:OdGsDCRectDouble.m_min">
Minimum point. 
</member>
        <member name="M:OdGsDCRectDouble.round">
\remarks
    Rounds coordinate values of the minimum and maximum points.

</member>
        <member name="M:OdGsDCRectDouble.op_Inequality(OdGsDCRectDouble!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\remarks
    Inequality operator for the OdGsDCRect class.
    Rectangles are considered not equal if at least one of the following conditions fails:
    * the minimum point of this rectangle equals to the minimum point of the passed rectangle
    * the maximum point of this rectangle equals to the maximum point of the passed rectangle

    \param dcRect [in]  2D rectangle to compare.

</member>
        <member name="M:OdGsDCRectDouble.op_Equality(OdGsDCRectDouble!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\remarks
    Equality operator for the OdGsDCRectDouble class.
    Rectangles are considered equal if:
    * the minimum point of this rectangle equals to the minimum point of the passed rectangle
    * the maximum point of this rectangle equals to the maximum point of the passed rectangle

    \param dcPoint [in]  2D rectangle to compare. 

</member>
        <member name="M:OdGsDCRectDouble.op_Assign(OdGsDCRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Assignment operator for the OdGsDCRectDouble class. Assigns the passed rectangle.
    
    \param dcRect [in]  Rectangle to assign.

</member>
        <member name="M:OdGsDCRectDouble.#ctor(OdGsDCRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Constructor for the OdGsDCRectDouble class. Creates an instance base on the passed rectangle.
    
    \param rc [in]  Rectangle to copy.

</member>
        <member name="M:OdGsDCRectDouble.#ctor(System.Double,System.Double,System.Double,System.Double)">
\details
    Constructor for the OdGsDCRectDouble class.
    
    \param xMin [in]  Minimum X-coordinate.
    \param xMax [in]  Maximum X-coordinate.
    \param yMin [in]  Minimum Y-coordinate.
    \param yMax [in]  Maximum Y-coordinate.

</member>
        <member name="M:OdGsDCRectDouble.#ctor(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Constructor for the OdGsDCRectDouble class.
    
    \param minPoint [in]  Lower-left corner.
    \param maxPoint [in]  Upper-right corner.

</member>
        <member name="M:OdGsDCRectDouble.#ctor">
\details
    Default constructor for the OdGsDCRectDouble class.

</member>
        <member name="F:OdGsDCRect.m_max">
Maximum point. 
</member>
        <member name="F:OdGsDCRect.m_min">
Minimum point. 
</member>
        <member name="M:OdGsDCRect.isDisjoint(OdGsDCRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Checks whether the specified rectangle object does not intersect this rectangle.

    \param r [in]  Rectangle to check.
    \returns
    true if the specified rectangle object does not intersect
    this rectangle, false otherwise.

</member>
        <member name="M:OdGsDCRect.normalize">
\details
    Normalizes this rectangle by setting valid values to minimum and maximum points.

</member>
        <member name="M:OdGsDCRect.intersectWith(OdGsDCRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
\details
    Makes a new rectangle as a result of intersection between this rectangle and the passed rectangle.
    \param dcRect     [in]  Rectangle to intersect with.
    \param bValidate  [in]  Validates the new rectangle. If set to true, the new rectangle is guarantied to be valid or null.

</member>
        <member name="M:OdGsDCRect.offset(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
\details
    Moves this rectangle in the provided direction.
    \param x [in]  Number of pixels to move by x-axis. Negative value moves rectangle in the opposite direction of the positive x-axis.
    \param y [in]  Number of pixels to move by y-axis. Negative value moves rectangle in the opposite direction of the positive y-axis.

</member>
        <member name="M:OdGsDCRect.within(OdGsDCRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Checks whether this rectangle object is inside the specified rectangle object.
    
    \param dcRect [in]  Any display coordinate rectangle.
    \returns
    true if this rectangle object is inside the specified rectangle object.
    \remarks
    A coincident edge is considered inside.

</member>
        <member name="M:OdGsDCRect.is_null">
\details
    Checks whether this rectangle object is the null rectangle.
    \returns 
    true if this rectangle object is the null rectangle, false otherwise.

</member>
        <member name="M:OdGsDCRect.set_null">
\details
    Sets this rectangle object to the null rectangle.

</member>
        <member name="M:OdGsDCRect.op_Inequality(OdGsDCRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\remarks
    Inequality operator for the OdGsDCRect class.
    Rectangles are considered not equal if at least one of the following conditions fails:
    * the minimum point of this rectangle equals to the minimum point of the passed rectangle
    * the maximum point of this rectangle equals to the maximum point of the passed rectangle

    \param dcRect [in]  2D rectangle to compare.

</member>
        <member name="M:OdGsDCRect.op_Equality(OdGsDCRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\remarks
    Equality operator for the OdGsDCRect class.
    Rectangles are considered equal if:
    * the minimum point of this rectangle equals to the minimum point of the passed rectangle
    * the maximum point of this rectangle equals to the maximum point of the passed rectangle

    \param dcPoint [in]  2D rectangle to compare. 

</member>
        <member name="M:OdGsDCRect.op_BitwiseAndAssignment(OdGsDCRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Assignment by bitwise AND operator for the OdGsDCRect class. 
    The greater values for coordinates are assigned to the minimum point while the minor values are assigned to the maximum point.
    New rectangle is result of intersection between this rectangle and the passed rectangle.
    
    \param dcRect [in]  Rectangle, points of which are assigned, if necessary.

</member>
        <member name="M:OdGsDCRect.op_BitwiseOrAssignment(OdGsDCRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Assignment by bitwise OR operator for the OdGsDCRect class. 
    The minor values for coordinates are assigned to the minimum point while the greater values are assigned to the maximum point.
    As result, rectangle is extended.
    
    \param dcRect [in]  Rectangle, points of which are assigned, if necessary.

</member>
        <member name="M:OdGsDCRect.op_Assign(OdGsDCRect!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Assignment operator for the OdGsDCRect class. Assigns the passed rectangle.
    
    \param dcRect [in]  Minimum X-coordinate.

</member>
        <member name="M:OdGsDCRect.#ctor(OdGsDCRect.NullFlag)">
\details
    Constructor for the OdGsDCRect class. Creates a null rectangle.

</member>
        <member name="M:OdGsDCRect.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
\details
    Constructor for the OdGsDCRect class.
    
    \param xMin [in]  Minimum X-coordinate.
    \param xMax [in]  Maximum X-coordinate.
    \param yMin [in]  Minimum Y-coordinate.
    \param yMax [in]  Maximum Y-coordinate.

</member>
        <member name="M:OdGsDCRect.#ctor(OdGsDCPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGsDCPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Constructor for the OdGsDCRect class.
    
    \param minPoint [in]  Lower-left corner.
    \param maxPoint [in]  Upper-right corner.

</member>
        <member name="M:OdGsDCRect.#ctor">
\details
    Default constructor for the OdGsDCRect class.

</member>
        <member name="M:OdGsDCPoint.op_Subscript(System.UInt32)">
\remarks
    Returns i-th coordinate of this point.
    
    \param i [in]  i-th coordinate of this point where 0 is x coordinate and 1 is y coordinate. 

</member>
        <member name="M:OdGsDCPoint.op_Inequality(OdGsDCPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\remarks
    Inequality operator for the OdGsDCPoint class.
    Points are considered not equal if at least one of the following conditions fails:
    * the x coordinate of this point equals to the x coordinate of the passed point
    * the y coordinate of this point equals to the y coordinate of the passed point

    \param dcPoint [in]  2D point in device coordinates to compare. 

</member>
        <member name="M:OdGsDCPoint.op_Equality(OdGsDCPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\remarks
    Equality operator for the OdGsDCPoint class.
    Points are considered equal if:
    * the x coordinate of this point equals to the x coordinate of the passed point
    * the y coordinate of this point equals to the y coordinate of the passed point

    \param dcPoint [in]  2D point in device coordinates to compare. 

</member>
        <member name="M:OdGsDCPoint.op_Assign(OdGsDCPoint!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\remarks
    Assignment operator for the OdGsDCPoint class.

    \param dcPoint [in]  2D point in device coordinates to assign. 

</member>
        <member name="M:OdGsDCPoint.op_Assign(OdGsDCPoint.MinFlag)">
\remarks
    Assignment operator for the OdGsDCPoint class. Assigns the minimum allowed values for x and y coordinates for this object.

    \param MinFlag [in]  Sets minimum allowed values for x and y axes. 

</member>
        <member name="M:OdGsDCPoint.op_Assign(OdGsDCPoint.MaxFlag)">
\remarks
    Assignment operator for the OdGsDCPoint class. Assigns the maximum allowed values for x and y coordinates for this object.

    \param MaxFlag [in]  Sets maximum allowed values for x and y axes. 

</member>
        <member name="M:OdGsDCPoint.#ctor(OdGsDCPoint.MinFlag)">
\details
    Constructor for the OdGsDCPoint class. Builds an instance of the object with the following parameters:
    OdGsDCPoint(Minimum) sets x = SCALAR_MIN, y = SCALAR_MIN
    
    \param MinFlag [in]  Sets minimum allowed values for x and y axes.    

</member>
        <member name="M:OdGsDCPoint.#ctor(OdGsDCPoint.MaxFlag)">
\details
    Constructor for the OdGsDCPoint class. Builds an instance of the object with the following parameters:
    OdGsDCPoint(Maximum) sets x = SCALAR_MAX, y = SCALAR_MAX
    
    \param MaxFlag [in]  Sets maximum allowed values for x and y axes.    

</member>
        <member name="M:OdGsDCPoint.#ctor(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
\details
    Constructor for the OdGsDCPoint class.
    
    \param xx [in]  The X-coordinate of this point.
    \param yy [in]  The Y-coordinate of this point.    

</member>
        <member name="M:OdGsDCPoint.#ctor">
\details
    Default constructor for the OdGsDCPoint class. Creates an instance with 0 for x and y coordinates.

</member>
        <member name="T:OdGsDCPoint.MinFlag">
Minimum values for point coordinates. 
</member>
        <member name="T:OdGsDCPoint.MaxFlag">
Maximum values for point coordinates. 
</member>
        <member name="D:OdGsUpdateManagerPtr">
\details
  This template class is a specialization of the OdSmartPtr class for OdGsUpdateManager object pointers. 

</member>
        <member name="D:OdGiRasterImagePtr">
\details
  This template class is a specialization of the OdSmartPtr class for OdGiRasterImage object pointers. 

</member>
        <member name="D:OdGsReactorPtr">
\details
  This template class is a specialization of the OdSmartPtr class for OdGsReactor object pointers. 

</member>
        <member name="D:OdGsDevicePtr">
\details
  This template class is a specialization of the OdSmartPtr class for OdGsDevice object pointers. 


\details
  This template class is a specialization of the OdSmartPtr class for OdGsDevice object pointers.

</member>
        <member name="D:OdGsModelArray">
\details
  This template class is a specialization of the OdArray class for OdGsModel object pointers.

</member>
        <member name="D:OdGsModelPtr">
\details
  This template class is a specialization of the OdSmartPtr class for OdGsModel object pointers. 

</member>
        <member name="D:OdGsViewPtr">
\details
  This template class is a specialization of the OdSmartPtr class for OdGsView object pointers. 

</member>
        <member name="D:OdGePoint2dArray">
\details
    This template class is a specialization of the OdArray class for OdGePoint2d objects.

</member>
        <member name="M:OdGePoint2d.set(System.Double,System.Double)">
\details
    Sets this point to the specified X and Y coordinates. 
    Returns a reference to this point.

    \param xx [in]  The X-coordinate of this point.
    \param yy [in]  The Y-coordinate of this point.

</member>
        <member name="M:OdGePoint2d.op_Subscript(System.UInt32)">
\details
Returns ith coordinate of this point.

\param i [in]  Index of coordinate.

\remarks
* 0 returns the X-coordinate.
* 1 returns the Y-coordinate.


\details
References ith coordinate of this point.

\param i [in]  Index of coordinate.

\remarks
* 0 references the X-coordinate.
* 1 references the Y-coordinate.

</member>
        <member name="M:OdGePoint2d.isEqualTo(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if the distance from this point to point is within the 
    specified tolerance.

    \param point [in]  Any 2D point.
    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGePoint2d.op_Inequality(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Inequality operator. Returns true if any of the coordinates of this point are not equal to the corresponding coordinates
    of the specified point.
    
    \param point [in] A 2D point to be checked for inequality with this point.

</member>
        <member name="M:OdGePoint2d.op_Equality(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Equality operator. Returns true if all the coordinates of this point are equal to the corresponding coordinates
    of the specified point.
    
    \param point [in] A 2D point to be checked for equality with this point.

</member>
        <member name="M:OdGePoint2d.distanceTo(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the distance from this point to the specified point.

    \param point [in]  Any 2D point to which a distance is measured.

</member>
        <member name="M:OdGePoint2d.asVector">
\details
    Returns this point as a vector.

</member>
        <member name="M:OdGePoint2d.op_Addition(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Addition operator for the OdGePoint2d class.
    
    \param point [in]  Input 2D point, coordinates of which are added to the coordinates of this point.
    
    \remarks
    Returns a vector formed as a result of this point's coordinates + coordinates of the specified point.

</member>
        <member name="M:OdGePoint2d.op_Subtraction(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Subtraction operator for the OdGePoint2d class.
    
    \param point [in]  Input 2D point, coordinates of which are subtracted from the coordinates of this point.
    
    \remarks
    Returns a vector formed as a result of this point's coordinates - coordinates of the specified point.

</member>
        <member name="M:OdGePoint2d.setToSum(OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this point to point + vect, and returns a reference to this point.

    \param point [in]  Any 2D point.
    \param vect [in]  A 2D vector.

</member>
        <member name="M:OdGePoint2d.op_SubtractionAssignment(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Subtraction operator for the OdGePoint2d class.
    
    \param vect [in]  Input vector by which a point is translated.
    
    \remarks
    Returns a reference to the point equal to this point translated by the vector opposite to the specified vector.

</member>
        <member name="M:OdGePoint2d.op_Subtraction(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Subtraction operator for the OdGePoint2d class.
    
    \param vect [in]  Input vector by which a point is translated.
    
    \remarks
    Returns a point that is translated in the opposite direction and length of the specified input vector.

</member>
        <member name="M:OdGePoint2d.op_AdditionAssignment(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Addition operator for the OdGePoint2d class.
    
    \param vect [in]  Input vector by which a point is translated.
    
    \remarks
    Returns a 2D point that is translated by the specified input vector.

</member>
        <member name="M:OdGePoint2d.op_Addition(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Addition operator for the OdGePoint2d class.
    
    \param vect [in]  Input vector by which a point is translated.
    
    \remarks
    Translates this point by the specified vector.

</member>
        <member name="M:OdGePoint2d.op_DivisionAssignment(System.Double)">
\details
    Division operator for the OdGePoint2d class.
    
    \param scale [in]  Input scale factor.
    
    \remarks
    Returns a reference to a point that is the result of scaling this point with respect to the origin by a scale factor. 

</member>
        <member name="M:OdGePoint2d.op_Division(System.Double)">
\details
    Division operator for the OdGePoint2d class.
    
    \param scale [in]  Input scale factor.
    
    \remarks
    Returns the point equal to this point scaled by a scale factor 1/scale.  

</member>
        <member name="M:OdGePoint2d.op_MultiplicationAssignment(System.Double)">
\details
    Multiplication operator for the OdGePoint2d class.
    
    \param scale [in]  Input scale factor.
    
    \remarks
    Scales this point by a scale factor. Returns the reference to this point.

</member>
        <member name="M:OdGePoint2d.op_Multiply(System.Double)">
\details
    Multiplication operator for the OdGePoint2d class.
    
    \param scale [in]  Input scale factor.
    
    \remarks
    Makes this point equal to the point scaled by a scale factor. 

</member>
        <member name="M:OdGePoint2d.scaleBy(System.Double,OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Scales this point by the scale factor about the basepoint.

    \param scaleFactor [in]  Scale Factor. The scale factor must be greater than zero.
    \param basePoint [in]  Basepoint relative to which scaling is computed.

</member>
        <member name="M:OdGePoint2d.mirror(OdGeLine2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Mirrors this point about the specified 2D line.

    \param line [in]  Mirror Line.

</member>
        <member name="M:OdGePoint2d.rotateBy(System.Double,OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Rotates this point about the specified basePoint by the specified angle. 

    \param angle [in]  Rotation angle in radians.
    \param basePoint [in]  Basepoint relative to which rotation is computed.

</member>
        <member name="M:OdGePoint2d.transformBy(OdGeMatrix2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this point to the result of the matrix multiplication of xfm * this point.
    Returns a reference to this point.

    \param xfm [in]  A 2D matrix with which this point is multiplied.

</member>
        <member name="M:OdGePoint2d.setToProduct(OdGeMatrix2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this point to the result of the matrix multiplication (matrix * point).
    Returns a reference to this point.

    \param matrix [in]  A 2D matrix with which a specified point is multiplied.
    \param point [in]  The point to be multiplied.

</member>
        <member name="M:OdGePoint2d.op_Multiply(System.Double,OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\remarks
    Sets this point to the result of the matrix multiplication of the point and a scale factor. 

    \param scale [in]  Scale factor.
    \param point [in]  The point to be multiplied.

</member>
        <member name="M:op_Multiply(OdGeMatrix2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\remarks
    Sets this point to the result of the matrix multiplication of matrix * point.

    \param matrix [in]  Any 2D matrix.
    \param point [in]  The point to be multiplied.

</member>
        <member name="M:OdGePoint2d.#ctor(System.Double,System.Double)">
\details
    Constructor for the OdGePoint2d class.

    \param xx [in]  The X-coordinate of this point.
    \param yy [in]  The Y-coordinate of this point.
    
    \remarks
    Constructs a 2D point with specified coordinates.

</member>
        <member name="M:OdGePoint2d.#ctor">
\details
    Default constructor for the OdGePoint2d class.

    \remarks
    The default constructor constructs a point at the origin.

</member>
        <member name="M:OdGeVector2d.op_Implicit~OdGeMatrix2d">
\details
    Returns the equivalent 2D tranformation matrix.

</member>
        <member name="M:OdGeVector2d.set(System.Double,System.Double)">
\details
    Sets this vector to the specified X and Y coordinates, 
    and returns a reference to this vector.

    \param xx [in]  X-coordinate.
    \param yy [in]  Y-coordinate.

</member>
        <member name="M:OdGeVector2d.op_Subscript(System.UInt32)">
\details 
    Returns the ith coordinate of this vector.
    
    \param i [in]  Index of coordinate.
    
    \remarks
    * 0 returns the X-coordinate.
    * 1 returns the Y-coordinate.


\details 
    References the ith coordinate of this vector.
    
    \param i [in]  Index of coordinate.
    
    \remarks
    * 0 references the X-coordinate.
    * 1 references the Y-coordinate.

</member>
        <member name="M:OdGeVector2d.isEqualTo(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if vector is identical to this vector,
    within the specified tolerance.

    \param vect [in]  Any 2D vector.
    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeVector2d.op_Inequality(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Inequality operator for the OdGeVector2d class.

    \param vect [in]   A 2D vector to be compared.
    
    \remarks
    Returns true if passed vector is not equal to this vector.

</member>
        <member name="M:OdGeVector2d.op_Equality(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Equality operator for the OdGeVector2d class.

    \param vect [in]   A 2D vector to be compared.
    
    \remarks
    Returns true if passed vector is equal to this vector.

</member>
        <member name="M:OdGeVector2d.crossProduct(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the z value of the cross product of this vector with
    the specified vector.
    
    \param vect [in]  Any 2D vector.

</member>
        <member name="M:OdGeVector2d.dotProduct(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the dot product of this vector and the specified vector.
    
    \param vect [in]  Any 2D vector.

</member>
        <member name="M:OdGeVector2d.isPerpendicularTo(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if the specified vector is perpendicular to this vector within the specified tolerance.

    \param vect [in]  Any 2D vector that is checked to be perpendicular to this vector.
    \param tol [in]  Geometric tolerance.
    \param status [out]  Receives the status of test.

    \remarks
    If the length of either vector is &gt; tol, kOk is returned in status.

    Possible values for status are as follows:

    @untitled table
    kOk       
    k0This    
    k0Arg1    

</member>
        <member name="M:OdGeVector2d.isPerpendicularTo(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if the specified vector is perpendicular to this vector within the specified tolerance.

    \param vect [in]  Any 2D vector that is checked to be perpendicular to this vector.
    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeVector2d.isCodirectionalTo(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if the specified vector is codirectional to this vector within the specified tolerance.

    \param vect [in]  Any 2D vector that is checked to be codirectional with this vector.
    \param tol [in]  Geometric tolerance.   

</member>
        <member name="M:OdGeVector2d.isParallelTo(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if the specified vector is parallel to this vector within the specified tolerance.

    \param vect [in]  Any 2D vector that is checked to be parallel to this vector.
    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeVector2d.isZeroLength(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if the length of this vector is 0.0 within the specified tolerance.

    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeVector2d.isUnitLength(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns true if and only if the length of this vector is 1.0 within the specified tolerance.

    \param tol [in]  Geometric tolerance.

</member>
        <member name="M:OdGeVector2d.lengthSqrd">
\details
    Returns the square of the length of this vector.

</member>
        <member name="M:OdGeVector2d.length">
\details
    Returns the length of this vector.

</member>
        <member name="M:OdGeVector2d.angleToCCW(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the angle from this vector to the specified vector in the counterclockwise direction.
    
    \param vect [in]  Any 2D vector.
    
    \remarks
    Returns a value in the range [-OdaPI .. OdaPI].

</member>
        <member name="M:OdGeVector2d.angleTo(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the angle between this vector and the specified vector.
    
    \param vect [in]  A 2D vector, angle to which is measured.
    
    \remarks
    Returns a value in the range [0.0 .. OdaPI].
    
    This function is commutative:
    
        a.angleTo (b) == b.angleTo (a)

</member>
        <member name="M:OdGeVector2d.angle">
\details
    Returns the angle between this vector and the X-axis
    
    \remarks
    Returns a value in the range [0.0 .. Oda2PI].

</member>
        <member name="M:OdGeVector2d.perpVector">
\details
    Returns the vector perpendicular to this one (-y, x).

</member>
        <member name="M:OdGeVector2d.negate">
\details
    Negates this vector (-x, -y), and returns a reference to this vector.

</member>
        <member name="M:OdGeVector2d.setToSum(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this vector to vector1 + vector1, and returns a reference to this vector.
    
    \param vector1 [in]  Any 2D vector.
    \param vector2 [in]  Any 2D vector.

</member>
        <member name="M:OdGeVector2d.op_SubtractionAssignment(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Subtraction operator for the OdGeVector2d class.

    \param vect [in]   A 2D vector to be subtracted.
    
    \remarks
    Subtracts coordinates of the passed vector from the coordinates of this vector and returns a reference to this vector.

</member>
        <member name="M:OdGeVector2d.op_Subtraction(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Subtraction operator for the OdGeVector2d class.

    \param vect [in]  A 2D vector to be subtracted.
    
    \remarks
    Returns a vector that is created by subtracting coordinates of the passed vector from the coordinates of this vector.

</member>
        <member name="M:OdGeVector2d.op_AdditionAssignment(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Addition operator for the OdGeVector2d class.

    \param vect [in]   A 2D vector to be added.
    
    \remarks
    Adds coordinates of the specified vector to the coordinates of this vector and returns a reference to this vector.

</member>
        <member name="M:OdGeVector2d.op_Addition(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Addition operator for the OdGeVector2d class.

    \param vect [in]  A 2D vector to be added.
    
    \remarks
    Returns a vector that is created by adding coordinates of this vector to the coordinates of the specified vector.

</member>
        <member name="M:OdGeVector2d.op_DivisionAssignment(System.Double)">
\details
    Division operator for the OdGeVector2d class.

    \param scale [in]  Scale factor.
    
    \remarks
    Divides coordinates of this vector by the scale factor and returns reference to this vector.

</member>
        <member name="M:OdGeVector2d.op_Division(System.Double)">
\details
    Division operator for the OdGeVector2d class.

    \param scale [in]  Scale factor.
    
    \remarks
    Returns a vector with divided coordinates of this vector by the scale factor.

</member>
        <member name="M:OdGeVector2d.op_MultiplicationAssignment(System.Double)">
\details
    Multiplication operator for the OdGeVector2d class.

    \param scale [in]  Scale factor.
    
    \remarks
    Multiplies coordinates of this vector by the scale factor and returns reference to this vector.

</member>
        <member name="M:OdGeVector2d.op_Multiply(System.Double)">
\details
    Multiplication operator for the OdGeVector2d class.

    \param scale [in]  Scale factor.
    
    \remarks
    Returns a vector with multiplied coordinates of this vector by the scale factor.

</member>
        <member name="M:OdGeVector2d.mirror(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Mirrors this vector about the specified 2D line
    and returns a reference to this vector.

    \param line [in]  Mirror Line.

</member>
        <member name="M:OdGeVector2d.rotateBy(System.Double)">
\details
    Rotates this vector the specified angle, and returns
    a reference to this vector. 

    \param angle [in]  Rotation angle.
    
    \remarks
    Rotation angle is specified in radians.
    Rotation is performed counterclockwise if specified value is positive.

</member>
        <member name="M:OdGeVector2d.transformBy(OdGeMatrix2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Applies the 2D transformation matrix to this vector,
    and returns a reference to this vector.

    \param xfm [in]  2D transformation matrix.

</member>
        <member name="M:OdGeVector2d.setToProduct(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double)">
\details
    Sets this vector to the product scale * vect, and returns
    a reference to this vector. 
    
    \param vect [in]  Any 2D vector. 
    \param scale [in]  Scale factor.

</member>
        <member name="M:OdGeVector2d.setToProduct(OdGeMatrix2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets this vector to the product matrix * vect and returns
    a reference to this vector. 
    
    \param matrix [in]  Any 2D matrix. 
    \param vect [in]  Any 2D vector 

</member>
        <member name="M:OdGeVector2d.#ctor(System.Double,System.Double)">
\details 
    Constructor for the OdGeVector2d class.
    
    \param xx [in]  X-coordinate.
    \param yy [in]  Y-coordinate.
    
    \remarks
    Constructs a 2D vector with specified X and Y coordinates.

</member>
        <member name="M:OdGeVector2d.#ctor">
\details 
    Default constructor for the OdGeVector2d class.
    
    \remarks
    Constructs a zero-length 2D vector.

</member>
        <member name="M:isRightHanded(OdGeSurface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
Determine is surface right-handed or left-handed.

The handedness of a surface describes the direction of the surface normals with respect to the  and  parameter directions.
If a surface is right-handed, then the surface normal is in the direction of the cross product of the partial derivatives with respect to and, in that order.
If a surface is left-handed, the surface direction would be in the opposite direction.
In other words, if a surface is right-handed, the direction of the surface normal at any given point on the surface follows the right-hand rule with respect
to the and parameter directions at that point. If a surface is left-handed, the direction of its normals follow the left-hand rule

\param surf    [in]  input surface.

Corresponding C++ library: TD_Ge

</member>
        <member name="M:getSignedArea(OdArray&lt;OdGePoint2d,OdMemoryAllocator&lt;OdGePoint2d&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
Determine signed area defined by arrPoints array.

\param arrPoints    [in]  array of 2d points.

Corresponding C++ library: TD_Ge

</member>
        <member name="M:geIsDir2dOnSurfCoincide3d(OdGeSurface!System.Runtime.CompilerServices.IsConst*,OdGeCurve3d!System.Runtime.CompilerServices.IsConst*,OdGeCurve2d!System.Runtime.CompilerServices.IsConst*,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Determine is direction of 3d curve is the same as direction of curve on surface that can be gotten via 2d parametric curve.

    \param pSurf        [in]  Surface.
    \param pCurve       [in]  3d curve that lie on pSurf.
    \param pParamCurve  [in]  2d parametric curve which corresponds to pCurve on pSurf.
    \param isCoincide   [out] Coincide flag.
    \param tol          [in]  Geometric tolerance.

    \remarks
    3d curve should lie on surface with tolerance tol.

    Corresponding C++ library: TD_Ge

</member>
        <member name="M:geToString(OdGe.EntityId!System.Runtime.CompilerServices.IsConst)">
Convert the specified value to an OdGe::EntityId string
</member>
        <member name="M:geSurfaceProp(OdGeSurface!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.NurbSurfaceProperties*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.NurbSurfaceProperties*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Calculates a properties for a specified surface.

    \param pS [in]  Any surface.
    \param propU, propV [out] Receives the properties.
    \param tol [in] Geometric tolerance.

    Corresponding C++ library: TD_Ge

    \remarks
      Rational state valid only for NURB surfaces.

</member>
        <member name="M:geNurb3dTo2d(OdGeNurbCurve3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePlane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeNurbCurve2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Converts a 3D NURBS curve to a 2D NURBS curve by projecting it onto the specified plane.

    \param nurb3d [in]  Any 3D NURBS curve.
    \param plane [in]  Projection plane.
    \param nurb2d [out]  Receives the 2D NURBS curve.
    \param tol [in]  Geometric tolerance.

    Corresponding C++ library: TD_Ge

</member>
        <member name="M:geCalculatePlane(OdArray&lt;OdGePoint3d,OdMemoryAllocator&lt;OdGePoint3d&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePlane*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
\details
    Returns the plane defined by the specified points.

    \param points [in]  Array of 3D points.
    \param curves [in]  Array of 3D curves.
    \param numPoints [in]  Number of points.
    \param numCurves [in]  Number of curves.
    \param plane [out]  Receives the calculated plane.
    \param tol [in]  Geometric tolerance.
    \param validateCoplanar [in]  Check whether curves/points are coplanar (set false only if curves/points are complanar).

    \remarks
    Supported curves are OdGeCircArc3d, OdGeEllipArc3d, OdGeNurbCurve3d, and OdGeLineSeg3d.

    Possible return values are as follows:

    @untitled table
    kOk
    kNonCoplanarGeometry
    kDegenerateGeometry
    kSingularPoint

    Corresponding C++ library: TD_Ge

</member>
        <member name="M:geCalculateNormal(OdArray&lt;OdGePoint3d,OdMemoryAllocator&lt;OdGePoint3d&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d*,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the normal to the plane defined by the specified points.

    \param points [in]  Array of 3D points.
    \param numPoints [in]  Number of points.
    \param pNormal [out]  Receives the normal to the calculated plane.
    \param tol [in]  Geometric tolerance.

    \remarks
    Possible return values are as follows:

    @untitled table
    kOk
    kNonCoplanarGeometry
    kDegenerateGeometry
    kSingularPoint

    Corresponding C++ library: TD_Ge

</member>
        <member name="M:geSolidSignedVolume(OdArray&lt;OdGePoint3d,OdMemoryAllocator&lt;OdGePoint3d&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d!System.Runtime.CompilerServices.IsConst*)">
\details
    Calculates signed volume of a triangulated solid.

    \param points [in]  Array of 3D points (in order of the triangles they form).
    \param volume [out]  Receives the volume value.
    \param basePoint [in]  Point to replace (0,0,0) for calculation purposes.
    
    \remarks
    Array of points should be divided by 3 without remainder.
    Negative sign of volume means that triangles in the solid are ordered clockwise.

    Corresponding C++ library: TD_Ge

</member>
        <member name="M:geValidSolid(OdArray&lt;OdGePoint3d,OdMemoryAllocator&lt;OdGePoint3d&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Checks topology of a triangulated solid.

    \param points [in]  Array of 3D points (in order of the triangles they form).
    \param isValid [out]  Receives the validation result.
    \param tol [in]  Geometric tolerance.

    \remarks
    Array of points should be divided by 3 without remainder.

    Corresponding C++ library: TD_Ge

</member>
        <member name="M:OdGeLoopCtx.getLoopType(System.Double)">
\details
  Determine loop type.

  \remarks
  All validation input parameters (surface, edges) should be done on caller side.

  Corresponding C++ library: TD_Ge

</member>
        <member name="F:OdGeContext.gFreeMem">
A function pointer to a user-defined memory allocation function
    for all delete operations in the OdGe library.

    \remarks
    Allows the OdGe library to use the same memory manager as the user application.

    \param memBlock [in]  Allocated memory block to be freed.

</member>
        <member name="F:OdGeContext.gAllocMem">
\details
    A function pointer to a user-defined memory allocation function
    for all new operations in the OdGe library.
    \remarks
    Allows the OdGe library to use the same memory manager as the user application.
    \param size [in]  Size in bytes to allocate.

</member>
        <member name="F:OdGeContext.gErrorFunc">
\details
    A function pointer to a user-defined error handler.
    \remarks
    By default, points to a function that does nothing but return.

</member>
        <member name="F:OdGeContext.gZeroTol">
\details
    Provides the global 0.0 default OdGeTol tolerance object.
    \remarks
    gZeroTol.equalPoint == 0.0 and gZeroTol.equalVector == 1.e-10.

</member>
        <member name="F:OdGeContext.gTol">
\details
    Provides the global default OdGeTol tolerance object.
    \remarks
    gTol.equalPoint == 1e-10  gTolequalVector == 1.e-10.

</member>
        <member name="D:OdGePoint3dArray">
\details
    This template class is a specialization of the OdArray class for OdGePoint3d objects.

</member>
        <member name="D:OdGeSurfacePtrArray">
\details
    This template class is a specialization of the OdArray class template for surface shared pointers.

</member>
        <member name="D:OdGeSurfacePtr">
\details
    This template class is a specialization of the OdSharedPtr class template for surface.

</member>
        <member name="D:OdGeIntersectError">
\details
    Defines a synonym of the fully qualified name.

    \remarks
    May be used only if there are no global name conflicts.

</member>
        <member name="D:OdGeError">
\details
    Defines a synonym of the fully qualified name.

    \remarks
    May be used only if there are no global name conflicts.

</member>
        <member name="M:OdGeLibVersion.op_GreaterThanOrEqual(OdGeLibVersion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Comparison operator for the OdGeLibVersion object.
    
    \returns
    A boolean value that indicates whether the input library version is greater than or equal to this library version.

</member>
        <member name="M:OdGeLibVersion.op_GreaterThan(OdGeLibVersion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Comparison operator for the OdGeLibVersion object.
    
    \returns
    A boolean value that indicates whether the input library version is greater than this library version.

</member>
        <member name="M:OdGeLibVersion.op_LessThanOrEqual(OdGeLibVersion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Comparison operator for the OdGeLibVersion object.
    
    \returns
    A boolean value that indicates whether the input library version is less than or equal to this library version.

</member>
        <member name="M:OdGeLibVersion.op_LessThan(OdGeLibVersion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Comparison operator for the OdGeLibVersion object.
    
    \returns
    A boolean value that indicates whether the input library version is less than this library version.

</member>
        <member name="M:OdGeLibVersion.op_Inequality(OdGeLibVersion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Comparison operator for the OdGeLibVersion object.
    
    \returns
    A boolean value that indicates whether the input interval is not identical to this interval.

</member>
        <member name="M:OdGeLibVersion.op_Equality(OdGeLibVersion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Comparison operator for the OdGeLibVersion object.
    
    \returns
    A boolean value that indicates whether the input library version is identical to this library version.

</member>
        <member name="M:OdGeLibVersion.setSchemaVersion(System.Byte)">
\details
    Sets the schema version of GeLib.

    \param schema [in]  Schema version.

</member>
        <member name="M:OdGeLibVersion.setCorrectiveVersion(System.Byte)">
\details
    Sets the corrective version of GeLib.

    \param corrective [in]  Corrective version.

</member>
        <member name="M:OdGeLibVersion.setMinorVersion(System.Byte)">
\details
    Sets the minor version of GeLib.

    \param minor [in]  Minor version.

</member>
        <member name="M:OdGeLibVersion.setMajorVersion(System.Byte)">
\details
    Sets the major version of GeLib.

    \param major [in]  Major version.

</member>
        <member name="M:OdGeLibVersion.schemaVersion">
\details
    Returns the schema version of GeLib.

</member>
        <member name="M:OdGeLibVersion.correctiveVersion">
\details
    Returns the corrective version of GeLib.

</member>
        <member name="M:OdGeLibVersion.minorVersion">
\details
    Returns the minor version of GeLib.

</member>
        <member name="M:OdGeLibVersion.majorVersion">
\details
    Returns the major version of GeLib.

</member>
        <member name="M:OdGeLibVersion.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
\details
    Constructor for the OdGeLibVersion class.
    
    \param major [in]  Major version.
    \param minor [in]  Minor version.
    \param corrective [in]  Corrective version.
    \param schema [in]  Schema version.

</member>
        <member name="M:OdGeLibVersion.#ctor(OdGeLibVersion!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Copy constructor for the OdGeLibVersion class.
    
    \param source [in]  A OdGeLibVersion object to be copied.

</member>
        <member name="M:OdGeLibVersion.#ctor">
\details
    Default constructor for the OdGeLibVersion class.

</member>
        <member name="M:OdGeTol.setEqualVector(System.Double)">
\details
    Sets the equalVector tolerance to a specified value.
    
    \param val [in]  The tolerance for vector evaluation. 

</member>
        <member name="M:OdGeTol.setEqualPoint(System.Double)">
\details
    Sets the equalPoint tolerance to a specified value.
    
    \param val [in]  The tolerance for point evaluation.

</member>
        <member name="M:OdGeTol.equalVector">
\details
    Returns the equalVector tolerance.

</member>
        <member name="M:OdGeTol.equalPoint">
\details
    Returns the equalPoint tolerance.

</member>
        <member name="M:OdGeTol.#ctor(System.Double,System.Double)">
\details
    Constructor for the OdGeTol class.
    
    \param t1 [in]  The tolerance for point evaluation.
    \param t2 [in]  The tolerance for vector evaluation.  

</member>
        <member name="M:OdGeTol.#ctor(System.Double)">
\details
    Constructor for the OdGeTol class.
    
    \param t [in]  The tolerance for vector and point evaluation.

</member>
        <member name="D:OdGsDCPointArray">
\details
    This template class is a specialization of the OdArray class for OdGsDCPoint objects.

</member>
        <member name="D:OdGiDefaultContextPtr">
\details
    This template class is a specialization of the OdSmartPtr class for OdGiDefaultContext object pointers.

</member>
        <member name="M:OdGiDefaultContext.enableGsModel(System.Boolean)">
\details
    Controls the GsModel flag of this Context Object.
    \param enable [in]  Controls the Gs Model.

</member>
        <member name="M:OdGiDefaultContext.useGsModel">
\details
    Returns true if and only the GsModel flag of this Context Object is set..

</member>
        <member name="M:OdGiDrawFlagsHelper.Dispose">
\details
    Destructor for the OdGiDrawFlagsHelper class. Sets previous draw flags.

</member>
        <member name="M:OdGiDrawFlagsHelper.#ctor(OdGiSubEntityTraits*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
    Constructor for the OdGiDrawFlagsHelper class.

    \param pTraits [in/out]  Sub-entity traits to set. Draw flags of this OdGiSubEntityTraits object may change inside the constructor.
    \param addFlags [in]  Draw flags to add.
    \param delFlags [in]  Flags to remove.

</member>
        <member name="M:OdGiCommonDraw.displayModelerSilhouettes">
\details
    Checks whether silhouette curves should be generated (basically should return OdDbDatabase::getDISPSILH,
    but the behavior could be specialized).
    
    \returns
    true if silhouette curves should be generated, false otherwise.

</member>
        <member name="M:OdGiCommonDraw.currentGiPath">
\details
    Retrieves the current drawable nesting graph.
    
    \returns
    current drawable nesting graph.

</member>
        <member name="M:OdGiCommonDraw.context">
\details
    Retrieves context associated with this object.
    
    \returns
    Pointer to the associated context.

</member>
        <member name="M:OdGiCommonDraw.numberOfIsolines">
\details
    Retrieves the number of isolines to be drawn on surfaces during this vectorization.
    
    \returns
    number of isolines.
    \remarks
    Isolines are lines or curves which are used to represent the entity. 
    For example, if an entity is a sphere and this method returns 3, the 
    sphere should be displayed as 3 circles with a common center and planes that are
    perpendicular to each other.

</member>
        <member name="M:OdGiCommonDraw.deviation(OdGiDeviationType!System.Runtime.CompilerServices.IsConst,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Retrieves the recommended maximum deviation of the
    current vectorization for the specified point on a curve.

    \param deviationType [in]  Deviation type.
    \param pointOnCurve [in]  Point on a curve.
        
    \returns
    recommended maximum difference (with respect to the current active viewport) between the actual curve or surface, 
    and the tessellated curve or surface. 
    
    \remarks
    deviationType must be one of the following:
    
    <table>
    Name                       Value
    kOdGiMaxDevForCircle       0      
    kOdGiMaxDevForCurve        1      
    kOdGiMaxDevForBoundary     2      
    kOdGiMaxDevForIsoline      3
    kOdGiMaxDevForFacet        4
    </table>

    \remarks
    This method uses circle zoom percent as appropriate.  
</member>
        <member name="M:OdGiCommonDraw.isDragging">
\details
    Checks whether this vectorization process is the result of a "drag" operation.
    
    \returns
    true if this vectorization process is the result of a "drag" operation, false otherwise.

</member>
        <member name="M:OdGiCommonDraw.rawGeometry">
\details
    Provides access to this object's "drawing interface."
    
    \remarks
    The "drawing interface" is a set of geometry functions used during the vectorization process.

</member>
        <member name="M:OdGiCommonDraw.subEntityTraits">
\details
    Provides access to this object's subentity traits.

    \returns
    sub-entity traits.

    \remarks
    This allows the modification of the vectorization attributes such as color, linetype, etc.

</member>
        <member name="M:OdGiCommonDraw.regenAbort">
\details
    Checks whether this vectorization process should be aborted.
    
    \returns
    true if this vectorization process should be aborted.

</member>
        <member name="M:OdGiCommonDraw.regenType">
\details
    Retrieves the regeneration type of the current vectorization process.

    \returns
    one of the following regeneration types:
    
    <table>
    Name                            Value 
    eOdGiRegenTypeInvalid           0
    kOdGiStandardDisplay            2
    kOdGiHideOrShadeCommand         3
    kOdGiRenderCommand              4
    kOdGiForExplode                 5
    kOdGiSaveWorldDrawForProxy      6
    kOdGiForExtents                 7
    </table></member>
        <member name="M:OdGiContext.multiplyByBlockLinetypeScales">
\details
    Controls processing of line type scales.

</member>
        <member name="M:OdGiContext.xrefPropertiesOverride">
\details
    Controls overriding of Xref properties.

</member>
        <member name="M:OdGiContext.antiAliasingMode">
\details
    Receives rendering anti-aliasing settings.
    
    \returns
    0.

</member>
        <member name="M:OdGiContext.getSectionGeometryManager">
\details
    Retrieves the interface for accessing section geometry functionality.
    
    \returns
    smart pointer to the OdGiSectionGeometryManager instance.

</member>
        <member name="M:OdGiContext.displayModelerSilhouettes">
\details
    Checks whether generation of silhouettes is enabled for modeler geometry.
    
    \returns
    true if generation of silhouettes is enabled for modeler geometry.

</member>
        <member name="M:OdGiContext.displayMeshSilhouettes">
\details
    Checks whether generation of silhouettes is enabled for mesh primitives on Gi side.
    
    \returns
    true if generation of silhouettes is enabled for mesh primitives on Gi side, false otherwise.

</member>
        <member name="M:OdGiContext.displaySilhouettes">
\details
    Retrieves a silhouette type.
    
    \returns
    silhouette type as OdUInt32 value.

</member>
        <member name="T:OdGiContext.SilhouetteType">
\details
    Silhouette types.

</member>
        <member name="M:OdGiContext.getStubByMaterialId(OdRxObject*,System.UInt64!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Converts a material id into an Object ID. This method may check that converted Object ID is really material.

  \param pBaseDb [in]  Pointer to a database.
  \param materialId [in]  Material identifier.
  
  \returns
  pointer to a converted object identifier.

</member>
        <member name="M:OdGiContext.getStubByMatName(OdRxObject*,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Converts a material name into an Object ID.

    \param pBaseDb [in]  Pointer to a database where to search for material name.
    \param strMatName [in]  Material name.
    
    \returns
    pointer to the identifier of owner object.

</member>
        <member name="M:OdGiContext.getOwnerIDByStub(OdDbStub*)">
\details
    Retrieves the Owner Object ID of the specified Object ID.

    \param objectId [in]  Object ID.
    
    \returns
    pointer to the identifier of owner object.

</member>
        <member name="M:OdGiContext.getDatabaseByStub(OdDbStub*)">
\details
    Retrieves the database of an Object ID.

    \param objectId [in]  Object ID.
    
    \returns
    pointer to the database of the specified object identifier.

</member>
        <member name="M:OdGiContext.getIDByStub(OdDbStub*)">
\details
    Converts an Object ID to an object handle (database persistent ID).

    \param objectId [in]  Object ID.

</member>
        <member name="M:OdGiContext.getStubByID(System.UInt64)">
\details
    Converts an object handle into an Object ID.

    \param persistentId [in]  Object handle.
    
    \returns
    converted object identifier.

</member>
        <member name="M:OdGiContext.plotStyle(OdDbStub*,OdPsPlotStyleData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Retrieves the PaperSpace PlotStyle data for this vectorization.

    \param objectId [in]  Object ID of plot style.
    \param plotStyleData [out]  Receives the PlotStyle data.

</member>
        <member name="M:OdGiContext.plotStyle(System.Int32,OdPsPlotStyleData*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Retrieves the PaperSpace PlotStyle data for this vectorization.

    \param penNumber [in]  Pen number.
    \param plotStyleData [out]  Receives the PlotStyle data.
    \param objectId [in]  Object ID of plot style.

</member>
        <member name="M:OdGiContext.plotStyleType">
\details
    Retrieves the plot style type of this Context object.
    
    \returns
    returns one of the following:
    
    <table>
    Name          Value
    kPsNone       0
    kPsByColor    1
    kPsByName     2
    </table></member>
        <member name="T:OdGiContext.PStyleType">
\details
    Plot style types.

</member>
        <member name="M:OdGiContext.regenAbort">
\details
    Checks whether this vectorization process should be aborted.
    
    \returns
    true if this vectorization process should be aborted.

</member>
        <member name="M:OdGiContext.drawableFilterFunction(System.Int64,OdGiDrawable!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
    Retrieves the set of flags for the drawable filtration function (will be called for each drawable vectorization).

    \param functionId [in]  Internal drawable filtration function ID.
    \param pDrawable [in]  Currently vectorizing drawable pointer.
    \param nFlags [in]  Set of input flags.
    
    \returns
    0.

</member>
        <member name="M:OdGiContext.drawableFilterFunctionId(OdDbStub*)">
\details
    Retrieves internal drawable filtration function ID. Must be implemented in derived classes.
    
    \param viewportId [in]  Pointer to the Object ID of the Viewport object to be queried.
    
    \returns
    0.

</member>
        <member name="T:OdGiContext.DrawableFilterRanges">
\details
    Ranges of drawable filter.

</member>
        <member name="T:OdGiContext.DrawableFilterOutputFlags">
\details
    Output flags of drawable filter.

</member>
        <member name="T:OdGiContext.DrawableFilterInputFlags">
\details
    Input flags of drawable filter.

</member>
        <member name="T:OdGiContext.LineWeightStyle">
\details
    Lineweight styles.

</member>
        <member name="M:OdGiContext.glyphSize(OdGiContext.GlyphType)">
\details
    Retrieves the glyph size for the specified glyph type.

    \param glyphType [in]  Type of glyph to return glyph size for.

    \returns
    Retrieves a value in the range [0,100].

    The default return values are the following:
    <table>
    Name         Value
    kLightGlyph  0
    kCameraGlyph 50
    </table></member>
        <member name="T:OdGiContext.GlyphType">
\details
    Glyph types.

</member>
        <member name="M:OdGiContext.fadingIntensityPercentage(OdGiContext.FadingType)">
\details
    Retrieves Fading intensity percentage.
    
    \param fadingType [in]  Fading type.
    
    \returns
    50 if fading type isn't kRefEditFade, 70 is returned otherwise.

</member>
        <member name="T:OdGiContext.FadingType">
\details
    Fading types.

</member>
        <member name="M:OdGiContext.imageQuality">
\details
    Retrieves the image quality for this vectorization process.
    
    \returns
    image quality as a value of ImageQuality enumeration.

</member>
        <member name="T:OdGiContext.ImageQuality">
\details
    Image quality types.

</member>
        <member name="M:OdGiContext.useTtfTriangleCache">
\details
    Retrieves true if and only if triangle cache for ttf fonts is enabled for this vectorization process.
    
    \returns
    true if triangle cache for ttf fonts is enabled for this vectorization process.

</member>
        <member name="M:OdGiContext.quickTextMode">
\details
    Retrieves true if and only if quick text mode is enabled for this vectorization process.
    
    \returns
    true if quick text mode is enabled for this vectorization process, false otherwise.

</member>
        <member name="M:OdGiContext.fillMode">
\details
    Checks whether shell/mesh geometry primitives should be filled during this vectorization.
    
    \returns
    true if shell/mesh geometry primitives should be filled, false otherwise.

</member>
        <member name="M:OdGiContext.numberOfIsolines">
\details
    Retrieves the number of isolines to be drawn on surfaces during this vectorization.
    
    \returns
    number of isolines as OdUInt32 value.

</member>
        <member name="M:OdGiContext.fillTtf">
\details
    Checks whether TrueType text should be filled during this vectorization.
    
    \returns
    true if TrueType text should be filled during this vectorization, false otherwise.

</member>
        <member name="M:OdGiContext.paletteBackground">
\details
    Retrieves the palette background color.
    
    \returns
    palette background color as ODCOLORREF definition.

</member>
        <member name="M:OdGiContext.isPlotGeneration">
\details
    Checks whether this vectorization is intended for hard copy output.
    
    \returns
    true if this vectorization is intended for hard copy output, false otherwise.

</member>
        <member name="M:OdGiContext.circleZoomPercent(OdDbStub*)">
\details
    Retrieves the circle zoom percent for this vectorization process.
    
    \param viewportId [in]  Pointer to the Object ID of the Viewport object to be queried.
    
    \returns
    Retrieves a value in the range [1,20000]. 100 is the default.

</member>
        <member name="M:OdGiContext.shapeExtentsBox(OdGiTextStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,OdGePoint3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Retrieves the extents box for the specified shape.
    
    \param textStyle [in]  TextStyle for the shape.
    \param shapeNumber [in]  Number of a shape. Shape is a single character of a special SHX font. This function returns the number of that character.
    \param min [out]  Receives the lower-left corner of the extents box.
    \param max [out]  Receives the upper-right corner of the extents box.

</member>
        <member name="M:OdGiContext.textExtentsBox(OdGiTextStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt16!System.Runtime.CompilerServices.IsConst*,System.Int32,System.UInt32!System.Runtime.CompilerServices.IsLong,OdGePoint3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d*)">
\details
    Retrieves the extents box for the specified text.
    
    \param textStyle [in]  TextStyle for msg.
    \param msg [in]  Pointer to an array of characters.
    \param nLength [in]  Message length.
    \param flags [in]  Vectorization flags.
    \param min [out]  Receives the lower-left corner of the extents box.
    \param max [out]  Receives the upper-right corner of the extents box.
    \param pEndPos [out]  If non-NULL, receives the end position of the text string.


</member>
        <member name="M:OdGiContext.drawText(OdGiConveyorGeometry*,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt16!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Boolean,OdGiTextStyle!System.Runtime.CompilerServices.IsConst*,OdGeVector3d!System.Runtime.CompilerServices.IsConst*)">
\details
    Vectorizes the specified text string to the supplied CommonDraw object.
    
    \param pDest [in]  Pointer to the Conveyor object.
    \param position [in]  Position of the text.
    \param direction [in]  Baseline direction for the text.
    \param upVector [in]  Up vector for the text.
    \param msg [in]  Text string.
    \param numBytes [in]  Number of bytes in msg (not including the optional null byte).
    \param raw [in]  If and only if true, escape sequences, such as %%P, will not be converted to special characters.
    \param pTextStyle [in]  Pointer to the TextStyle for msg.
    \param pExtrusion [in]  Pointer to the extrusion vector for the text.

</member>
        <member name="M:OdGiContext.drawText(OdGiCommonDraw*,OdGePoint3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Double,System.Double,System.Double,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Vectorizes the specified text string to the supplied CommonDraw object.
    \param pDraw [in]  Pointer to the CommonDraw object.
    \param position [in]  Position of the text.
    \param height [in]  Height of the text.
    \param width [in]  Width of the text.
    \param oblique [in]  Oblique angle of the text.
    \param msg [in]  Text message.
      
    \remarks
    All angles are expressed in radians.
    
    As currently implemented, this function ignores width and oblique.
    They will be fully implemented in a future release.

</member>
        <member name="M:OdGiContext.drawText(OdGiCommonDraw*,OdGePoint3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt16!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,OdGiTextStyle!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
    Vectorizes the specified text string to the supplied CommonDraw object.

    \param pDraw [in]  Pointer to the CommonDraw object.
    \param position [in]  Position of the text.
    \param msg [in]  Text string.
    \param numBytes [in]  Number of bytes in msg (not including the optional null byte).
    \param pTextStyle [in]  Pointer to the TextStyle for msg.
    \param flags [in]  Vectorization flags.
    
    \remarks
    msg must be null terminated if numBytes is not supplied.

</member>
        <member name="M:OdGiContext.drawShape(OdGiConveyorGeometry*,OdGePoint3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,OdGiTextStyle!System.Runtime.CompilerServices.IsConst*,OdGeVector3d!System.Runtime.CompilerServices.IsConst*)">
\details
    Vectorizes the specified shape.
    
    \param pDest [in]  Pointer to the Conveyor object.
    \param position [in]  Position of a shape.
    \param direction [in]  Baseline direction for the text.
    \param upVector [in]  Up vector for the text.
    \param shapeNumber [in]  Number of shape to draw. Shape is a single character of a special SHX font. This function returns the number of that character.
    \param pTextStyle [in]  Pointer to the text style applied to a shape.
    \param pExtrusion [in]  Pointer to the Extrusion vector for the text.

</member>
        <member name="M:OdGiContext.drawShape(OdGiCommonDraw*,OdGePoint3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,OdGiTextStyle!System.Runtime.CompilerServices.IsConst*)">
\details
    Vectorizes the specified shape to the specified interface object.

    \param pDraw [in]  Pointer to the CommonDraw object.
    \param position [in]  Position of the shape.
    \param shapeNumber [in]  Shape number.
    \param pTextStyle [in]  Pointer to the TextStyle for the shape.

</member>
        <member name="M:OdGiContext.getDefaultTextStyle(OdGiTextStyle*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Retrieves the default text style associated with this Context object.
    
    \param textStyle [out]  Receives the TextStyle object.

</member>
        <member name="M:OdGiContext.commonLinetypeScale">
\details
    Retrieves the common linetype scale for this Context object.
    
    \returns
    common scale of linetypes.

</member>
        <member name="M:OdGiContext.defaultLineWeight">
\details
      Retrieves the default lineweight associated with this Context object.
      
      \returns
      the values from the OdDb::LineWeight enumeration that represent lineweight configurations.

</member>
        <member name="M:OdGiContext.openDrawable(OdDbStub*)">
\details
    Opens for reading the specified drawable object that belongs to the database associated with this Context object.
    
    \param drawableId [in]  Object ID of the drawable to be opened.
    
    \returns
    Retrieves a SmartPointer to the drawable object.

</member>
        <member name="M:OdGiContext.database">
\details
    Retrieves the database that is currently being vectorized.
    
    \returns
    pointer to the database being vectorized.

</member>
        <member name="D:OdGiDrawablePtr">
\details
  This template class is a specialization of the OdSmartPtr class for OdGiDrawable object pointers.


\details
  This template class is a specialization of the OdSmartPtr class for OdGiDrawable object pointers. 

</member>
        <member name="D:OdBaseTextIteratorPtr">
\details
This template class is a specialization of the OdSmartPtr class for OdBaseTextIterator object pointers.

</member>
        <member name="M:OdBaseTextIterator.currPos">
\details
  Returns the character at the current position of this TextIterator object.

</member>
        <member name="M:OdBaseTextIterator.currProperties">
\details
  Returns the properties of the character at the current position of this TextIterator object.

</member>
        <member name="D:OdFontPtr">
\details
    This template class is a specialization of the OdSmartPtr class for OdFont object pointers.

</member>
        <member name="M:OdFont.getLogFont(System.Void*)">
\details
    Returns the LOGFONT for this font

    \param lpLogFont [in] Pointer to the buffer to receive the data.
    \returns
    Returns the number of bytes returned in buffer. In case lpLogFont is NULL methods return
    number of bytes required in buffer. 
    
    \remarks
    The default implementation of this function does nothing but return -1.

</member>
        <member name="M:OdFont.getFileName">
\details
    Returns font file name.

    \remarks
    The default implementation of this function returns empty string.

</member>
        <member name="M:OdFont.supportsVerticalMode">
\details
    Returns true if and only if the font supports vertical mode.
    
    \remarks
    The default implementation of this function returns false.

</member>
        <member name="M:OdFont.getFontData(System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Void*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
    Returns the font data for the specified character.
    \param dwTable [in]  Metric table to query.
    \param dwOffset [in]  Offset into table.
    \param pBuffer [in]  Pointer to to the buffer to receive the data.
    \param cbData [in]  ???.
    \returns
    Returns the number of bytes returned in buffer.
    
    \remarks
    The default implementation of this function does nothing but return -1.

</member>
        <member name="M:OdFont.getScore(System.UInt16,OdGePoint2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGePoint3d*,OdGePoint3d*,OdTextProperties!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns arrays of points over and under the baseline for the specified character in this OdFont object.
    \param character [in]  Character.
    \param advance [in]  Offset to next character.
    \param pointsOver [in]  Array of points over the baseline..
    \param pointsUnder [in]  Array of points under the baseline.
    \param textFlags [in] Text flags.

    \remarks
    textFlags must be a combination of one or more of the following:
 
    <table>
    Name                                Value
    OdTextProperties::kNormalText       0x01
    OdTextProperties::kVerticalText     0x02
    OdTextProperties::kUnderlined       0x04
    OdTextProperties::kOverlined        0x08
    OdTextProperties::kLastChar         0x10
    OdTextProperties::kInBigFont        0x20
    OdTextProperties::kInclPenups       0x40
    </table>
    
    \remarks
    The default implementation of this function does nothing but return.
    

</member>
        <member name="M:OdFont.getAverageWidth">
\details
    Returns the average width of characters in this Font object.
    \remarks
    The default implementation of this function always returns 0.0.

</member>
        <member name="M:OdFont.isShxFont">
\details
    Returns true if and only if this Font object is an SHX font.
    \remarks
    The default implementation of this function always returns true.

</member>
        <member name="M:OdFont.getOverlinePos(System.Double)">
\details
    Returns the overline position for this Font object at the specified text size.
    \param textSize [in]  Text size.
    \remarks
    The default implementation of this function returns 1.2 * textSize.

</member>
        <member name="M:OdFont.getUnderlinePos(System.Double)">
\details
    Returns the underline position for this Font object at the specified text size.
    \param textSize [in]  Text size.
    \remarks
    The default implementation of this function returns -2.0 * textSize.

</member>
        <member name="M:OdFont.fontAbove">
\details
    Returns the height of this Font object above the baseline.
    \remarks
    The default implementation of this function returns getAbove(), unless it is 0.0, in which case this function returns 1.0. 

</member>
        <member name="M:OdFont.getInternalLeading">
\details
    Returns the internal leading of this Font object.
    \remarks
    The default implementation of this function always returns 0.

</member>
        <member name="M:OdFont.getHeight">
\details
    Returns the height of this Font object.

</member>
        <member name="M:OdFont.hasCharacter(System.UInt16)">
\details
    Returns true if and only if the specified character is defined in this Font object.
    \param character [in]  Character.

</member>
        <member name="M:OdFont.getAvailableChars(OdArray&lt;System.UInt16,OdMemoryAllocator&lt;System.UInt16&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns an array of the characters defined in this Font object.
    \param characters [out]  Receives the array of characters.

</member>
        <member name="M:OdFont.getBelow">
\details
    Returns the depth of this font object below the baseline.

</member>
        <member name="M:OdFont.getAbove">
\details
    Returns the height of this Font object above the baseline.

</member>
        <member name="M:OdFont.drawCharacter(System.UInt16,OdGePoint2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGiConveyorGeometry*,OdTextProperties*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Draws the specified character with this Font object.
    \param character [in]  Character to draw.
    \param advance [in]  Offset to next character.
	\param pGeometry [in] Pointer to the modeler geometry.
    \param textProperties [in] Text properties.

</member>
        <member name="M:OdFont.drawCharacter(System.UInt16,OdGePoint2d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGiCommonDraw*,OdTextProperties*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Draws the specified character with this Font object.
    \param character [in]  Character to draw.
    \param advance [in]  Offset to next character.
    \param pWd [in/out] Draw object that can be used by this function to set the 
              necessary attributes and create the necessary geometry.
    \param textProperties [in] Text properties.

</member>
        <member name="M:OdFont.initialize(OdStreamBuf*)">
\details
    Initializes this Font object to read font data from the specified StreamBuf object.

    \param pStreamBuf [in]  Pointer to the StreamBuf object from which the data are to be read.
    
    \returns
    Returns eOk if successful, or an appropriate error code if not.    

</member>
        <member name="M:OdFont.addFlag(System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
    Adds the specified font flags to this Font object.
    \param fontFlags [in]  Font flags.

    \remarks
    fontFlags must be a combination of zero or more of the following:
     
    <table>
    Name              Value
    kBigFont10        0x0001
    kUniFont10        0x0002
    kFont10           0x0004
    kFont11           0x0008
    kFont10A          0x0010
    kTrueType         0x0020
    kFontGdt          0x0040
    kFontSimplex6     0x0080
    kShapes11         0x0100
    kFontRsc          0x0200
    </table></member>
        <member name="M:OdFont.setFlags(System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
    Sets the font flags for this Font object.
    \param fontFlags [in]  Font flags.

    \remarks
    fontFlags must be a combination of zero or more of the following:
    
    <table>
    Name              Value
    kBigFont10        0x0001
    kUniFont10        0x0002
    kFont10           0x0004
    kFont11           0x0008
    kFont10A          0x0010
    kTrueType         0x0020
    kFontGdt          0x0040
    kFontSimplex6     0x0080
    kShapes11         0x0100
    kFontRsc          0x0200
    </table></member>
        <member name="M:OdFont.flags">
\details
    Returns the font flags for this Font object.
    
    \remarks
    flags() returns a combination of zero or more of the following: 
    
    <table>
    Name              Value
    kBigFont10        0x0001
    kUniFont10        0x0002
    kFont10           0x0004
    kFont11           0x0008
    kFont10A          0x0010
    kTrueType         0x0020
    kFontGdt          0x0040
    kFontSimplex6     0x0080
    kShapes11         0x0100
    kFontRsc          0x0200
    </table></member>
        <member name="M:OdFont.getFlags">
\details
    Returns the font flags for this Font object.
    \remarks
    getFlags() returns a combination of zero or more of the following: 
    
    <table>
    Name              Value
    kBigFont10        0x0001
    kUniFont10        0x0002
    kFont10           0x0004
    kFont11           0x0008
    kFont10A          0x0010
    kTrueType         0x0020
    kFontGdt          0x0040
    kFontSimplex6     0x0080
    kShapes11         0x0100
    kFontRsc          0x0200
    </table></member>
        <member name="M:OdTextProperties.setSetTriangleCache(System.Boolean)">
\details
    Controls the kTringleCache flag for this TextProperties object.
    \param value [in]  Controls the flag.

</member>
        <member name="M:OdTextProperties.isTriangleCache">
\details
    Returns true if and only if the kTringleCache flag is set for this TextProperties object.

</member>
        <member name="M:OdTextProperties.setTextQuality(System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
    Returns the text quality percent for this vectorization process.
    \remarks
    Sets a value in the range [0,100]. 50 is the default.

</member>
        <member name="M:OdTextProperties.textQuality">
\details
    Returns the text quality percent for this vectorization process.
    \returns
    Returns a value in the range [0,100]. 50 is the default.

</member>
        <member name="M:OdTextProperties.setTrackingPercent(System.Double)">
\details
    Sets the tracking percent for this TextProperties object.
    \param trackingPercent [in]  Tracking percent.

</member>
        <member name="M:OdTextProperties.trackingPercent">
\details
    Returns the tracking percent for this TextProperties object.

</member>
        <member name="M:OdTextProperties.setTtfPolyDraw(System.Boolean)">
\details
    Sets smooth TTF text contour output flag.

    bFlag (in) New flag value.

</member>
        <member name="M:OdTextProperties.ttfPolyDraw">
\details
    Returns smooth TTF text contour output flag.

</member>
        <member name="M:OdTextProperties.setZeroNormals(System.Boolean)">
\details
    Controls the kZeroNormals flag for this TextProperties object.
    \param value [in]  Controls the flag.

</member>
        <member name="M:OdTextProperties.isZeroNormals">
\details
    Returns true if and only if the ZeroNormals flag is set for this TextProperties object.

</member>
        <member name="M:OdTextProperties.setIncludePenups(System.Boolean)">
\details
    Controls the IncludePenups flag for this TextProperties object.
    \param value [in]  Controls the flag.

</member>
        <member name="M:OdTextProperties.isIncludePenups">
\details
    Returns true if and only if the IncludePenups flag is set for this TextProperties object.

</member>
        <member name="M:OdTextProperties.setInBigFont(System.Boolean)">
\details
    Controls the InBigFont flag for this TextProperties object.
    \param value [in]  Controls the flag.

</member>
        <member name="M:OdTextProperties.isInBigFont">
\details
    Returns true if and only if the InBigFont flag is set for this TextProperties object.

</member>
        <member name="M:OdTextProperties.setLastChar(System.Boolean)">
\details
    Controls the LastChar flag for this TextProperties object.
    \param value [in]  Controls the flag.

</member>
        <member name="M:OdTextProperties.isLastChar">
\details
  Returns true if and only if the LastChar flag is set for this TextProperties object.

\details
    Returns true if and only if the LastChar flag is set for this TextProperties object.

</member>
        <member name="M:OdTextProperties.setStriked(System.Boolean)">
\details
    Controls the Striked flag for this TextProperties object.
    \param value [in]  Controls the flag.

</member>
        <member name="M:OdTextProperties.isStriked">
\details
    Returns true if and only if the Striked flag is set for this TextProperties object.

</member>
        <member name="M:OdTextProperties.setOverlined(System.Boolean)">
\details
    Controls the Overlined flag for this TextProperties object.
    \param value [in]  Controls the flag.

</member>
        <member name="M:OdTextProperties.isOverlined">
\details
    Returns true if and only if the Overlined flag is set for this TextProperties object.

</member>
        <member name="M:OdTextProperties.setUnderlined(System.Boolean)">
\details
    Controls the Underlined flag for this TextProperties object.
    \param value [in]  Controls the flag.

</member>
        <member name="M:OdTextProperties.isUnderlined">
\details
    Returns true if and only if the Underlined flag is set for this TextProperties object.

</member>
        <member name="M:OdTextProperties.setVerticalText(System.Boolean)">
\details
    Controls the Vertical Text flag for this TextProperties object.
    \param value [in]  Controls the flag.

</member>
        <member name="M:OdTextProperties.isVerticalText">
\details
    Returns true if and only if the Vertical Text flag is set for this TextProperties object.

</member>
        <member name="M:OdTextProperties.setNormalText(System.Boolean)">
\details
    Controls the Normal Text flag for this TextProperties object.
    \param value [in]  Controls the flag.

</member>
        <member name="M:OdTextProperties.isNormalText">
\details
    Returns true if and only if the Normal Text flag is set for this TextProperties object.

</member>
        <member name="T:OdGiCommonDraw">
\details
  Returns the specified text converted from one code page to another.
  \param source [in]  Source text.
  \param sourceId [in]  Object ID of source code page.
  \param destId [in]  Object ID of destination code page.

</member>
        <member name="M:OdCharMapper.getCheckSumUnicode(OdString)">
\details
     Returns the check sum for a unicode string.
     \param str [in]  String for calculating check sum.  

</member>
        <member name="M:OdCharMapper.getCheckSumAnsi(OdAnsiString)">
\details
     Returns the check sum for an ANSI string.
     \param str [in]  String for calculating check sum.  

</member>
        <member name="M:OdCharMapper.getCpIndexByBigFont(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
     Returns the code page index.
     \remarks
     getCpIndexByBigFont returns one of the following:
     
     <table>
     Value     Description
     1         CP_ANSI_932
     2         CP_ANSI_950
     3         CP_ANSI_949
     5         CP_ANSI_936
     \param bigFont [in]  big font file name.  
     </table></member>
        <member name="M:OdCharMapper.getCpByBigFont(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
     Returns the OdCodePageId.
     \remarks
     getCpByBigFont returns one of the following:
     
     @untitled table
     CP_ANSI_932
     CP_ANSI_950
     CP_ANSI_949
     CP_ANSI_936
     \param bigFont [in]  big font file name.  

</member>
        <member name="M:OdCharMapper.addBigFontWithCodepage(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdCodePageId)">
\details
     Adds the bigFont to map.
     \param bigFont [in]  big font file name.  
     \param codePageId [in]  CodePage ID.

     \remarks
     codePageId must be one of the following:
     
     @untitled table
     CP_ANSI_932
     CP_ANSI_950
     CP_ANSI_949
     CP_ANSI_936

     Returns eOk if successful, or an appropriate error code if not.

</member>
        <member name="M:OdCharMapper.addBigFontWithIndex(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32!System.Runtime.CompilerServices.IsLong)">
\details
     Adds the bigFont to map.
     \param bigFont [in]  big font file name.  
     \param cpIndex [in]  code page index.
     
     \remarks
     cpIndex must be one of the following:
     
     <table>
     Value    Description
     1        CP_ANSI_932
     2        CP_ANSI_950
     3        CP_ANSI_949
     5        CP_ANSI_936
     </table>

     Returns eOk if successful, or an appropriate error code if not.

</member>
        <member name="M:OdCharMapper.isConversionSupported(OdCodePageId)">
\details
   Returns true if and only if the specified code page supports conversion.
   \param codepageId [in]  Object ID of the code page.

</member>
        <member name="M:OdCharMapper.getCodepageByCharset(System.UInt16)">
\details
    Returns the code page corresponding to the specified ANSI character set.
    \param ansiCharacterSet [in]  Character Set.

</member>
        <member name="M:OdCharMapper.acadCpToAnsiCp(OdCodePageId)">
\details
    Returns the ANSI code page corresponding to the specified code page.
    \param acadCodePageId [in]  code page.

</member>
        <member name="M:OdCharMapper.ansiCpToAcadCp(System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
    Returns the code page corresponding to the specified ANSI code page.
    \param ansiCodePage [in]  ANSI code page.

</member>
        <member name="M:OdCharMapper.numValidCodepages">
\details
    Returns the number of valid code pages for this CharMapper object.

</member>
        <member name="M:OdCharMapper.codepageIdToDesc(OdCodePageId,OdString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the description for the specified code page.
    \param description [out]  Receives the description.  
    \param codepageId [in]  Object ID of the code page.
    \returns
    Returns eOk if successful, or an appropriate error code if not.

</member>
        <member name="M:OdCharMapper.codepageDescToId(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdCodePageId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the code page with the specified description.
    \param description [in]  Description.  
    \param codepageId [out]  Receives the object ID of the code page.  
    \returns
    Returns eOk if successful, or an appropriate error code if not.

</member>
        <member name="M:OdCharMapper.isLeadByte(System.Byte,OdCodePageId)">
\details
    Returns true if and only if the specified byte is one of the leading bytes of the specified code page.
    \param testByte [in]  Byte to test.
    \param codepageId [in]  Object ID of the code page.

</member>
        <member name="M:OdCharMapper.codepageToUnicode(System.UInt16,OdCodePageId,System.UInt16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Maps the specified code page character to Unicode.
    \param sourceChar [in]  Code page source character.
    \param codepageId [in]  Object ID of the code page.
    \param unicodeChar [out]  Receives the Unicode character.
    \returns
    Returns eOk if successful, or an appropriate error code if not.

</member>
        <member name="M:OdCharMapper.unicodeToCodepage2(System.UInt16,OdCodePageId,System.UInt16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Maps the specified Unicode character to the specified code page using IMLangFontLink2 interface.
  \param sourceChar [in]  Unicode source character.
  \param codepageId [in]  Object ID of the code page.
  \param codepageChar [out]  Receives the code page character.
  \returns
  Returns eOk if successful, or an appropriate error code if not.

</member>
        <member name="M:OdCharMapper.unicodeToCodepage(System.UInt16,OdCodePageId,System.UInt16*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
\details
    Maps the specified Unicode character to the specified code page.
    \param sourceChar [in]  Unicode source character.
    \param codepageId [in]  Object ID of the code page.
    \param codepageChar [out]  Receives the code page character.
    \param bTryToUseSystemCP [in]   Try to use default ANSI code page and OEM  code page in case conversion with codepageId is not OK
    \returns
    Returns eOk if successful, or an appropriate error code if not.

</member>
        <member name="M:OdCharMapper.initialize(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Initializes this CharMapper object from the specified mapping file.
    \param filename [in]  File name.
    \returns
    Returns eOk if successful, or an appropriate error code if not.

</member>
        <member name="M:odrxDynamicLinker">
\details
    Returns the Teigha global dynamic linker.

</member>
        <member name="D:OdRxDynamicLinkerPtr">
\details
  This template class is a specialization of the OdSmartPtr class for OdRxDynamicLinker pointers.

</member>
        <member name="M:OdRxDynamicLinker.getModule(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the specified abstract (platform-independent) module.

</member>
        <member name="M:OdRxDynamicLinker.getModule(System.Int32,OdString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the specified abstract (platform-independent) module.

</member>
        <member name="M:OdRxDynamicLinker.getModuleCount">
\details
    Returns the count of loaded modules.

</member>
        <member name="M:OdRxDynamicLinker.loadModuleObj(OdRxModule*,System.Boolean)">
\details
    Special internal method - used for non-standard module loading only

</member>
        <member name="M:OdRxDynamicLinker.sysRegistry">
\details
    Returns a SmartPointer to the OdRxDictionary instance that created by OdInitialize.

</member>
        <member name="M:OdRxDynamicLinker.sysServices">
\details
    Returns a SmartPointer to the OdDbSystemServices instance that is used for file creation and access.
    
    \sa
    odInitialize

</member>
        <member name="M:OdRxDynamicLinker.loadApp(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
\details
    Maps the specfied application name to the a module filename,
    and loads that module.

    \param applicationName [in]  TX application name.
    \param silent [in]  If and only if true, no load status message will be printed.

</member>
        <member name="M:OdRxDynamicLinker.unloadUnreferenced">
\details
    Unoads all unreferenced modules.

</member>
        <member name="M:OdRxDynamicLinker.unloadModule(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Unoads the specified abstract (platform-independent) module.
    
    \param moduleFileName [in]  Module filename to unload.

</member>
        <member name="M:OdRxDynamicLinker.loadModule(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
\details
    Loads the specified abstract (platform-independent) module.
    
    \returns
    Returns a SmartPointer to the abstract module object.
    
    \param moduleFileName [in]  Module filename to load.
    \param silent [in]  If true, no load status message will be printed.

</member>
        <member name="M:OdRxDynamicLinker.removeReactor(OdRxDLinkerReactor*)">
\details
    Removes the specified reactor to the dynamic linker reactor chain.
    \param pReactor [in]  Pointer to the reactor.

</member>
        <member name="M:OdRxDynamicLinker.addReactor(OdRxDLinkerReactor*)">
\details
    Adds the specified reactor to the dynamic linker reactor chain.
    \param pReactor [in]  Pointer to the reactor.

</member>
        <member name="D:OdRxModulePtr">
\details
  This template class is a specialization of the OdSmartPtr class for OdRxModule pointers.

</member>
        <member name="M:OdRxModule.moduleName">
\details
    Declares the method returning the module name for the rx-module instance.

    \remarks
    It is the pure virtual method that does not have an implementation. You must redefine it in the derived class.

</member>
        <member name="M:OdRxModule.deleteModule">
\details
    Declares the method deleting (unloading) the rx-module.

    \remarks
    It is the pure virtual method that does not have an implementation. You must redefine it in the derived class.

</member>
        <member name="M:OdRxModule.sysData">
\details
    Declares the method returning the system data for the rx-module instance.

    \remarks
    It is the pure virtual method that does not have an implementation. You must redefine it in the derived class.

</member>
        <member name="M:OdDAI.Repository.session">
\details
    Returns a pointer to session in which the repository was created.
    \returns Returns pointer to the session.

</member>
        <member name="M:OdDAI.Repository.writeFile(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
\details
    Writes data from the repository object to a physical file.
    \param filename     [in] A string that contains the full path to the output file to write data.
    \param saveLogFile  [in] A flag that determines whether the log file should be also written (if equal to true) or not (if equal to false).
    \returns Returns eOk if the data was successfully written; otherwise, the method returns an appropriate error.

</member>
        <member name="M:OdDAI.Repository.readStream(OdSmartPtr&lt;OdStreamBuf&gt;)">
\details
    Reads data from a specified stream buffer.
    \param pStream [in] A smart pointer to the stream buffer object to read data from.
    \returns Returns eOk if the data was successfully read; otherwise, the method returns an appropriate error.

</member>
        <member name="M:OdDAI.Repository.readFile(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details

</member>
        <member name="M:OdDAI.Repository.getModelAccessMode(OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
      Get model access mode by model name.
      \param modelName [in] model name 
      \returns model access mode 

</member>
        <member name="M:OdDAI.Repository.getModelRW(OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
      Get model in read only mode.
      \param modelName [in] model name which should be open in read/write mode
      \returns ModelPtr in read/write mode

</member>
        <member name="M:OdDAI.Repository.getModel(OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
      Get model in read only mode.
      \param modelPtr [in] model name which should be open in read only mode
      \returns ModelPtr in read only mode

</member>
        <member name="M:OdDAI.Repository.getModelRW(OdSmartPtr&lt;OdDAI.Model&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
      Get model in read only mode.
      \param modelPtr [in] model which should be open in read/write mode
      \returns ModelPtr in read/write mode

</member>
        <member name="M:OdDAI.Repository.getModel(OdSmartPtr&lt;OdDAI.Model&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
      Get model in read only mode.
      \param modelPtr [in] model which should be open in read only mode
      \returns ModelPtr in read mode

</member>
        <member name="M:OdDAI.Repository.createModel(OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdSmartPtr&lt;OdDAI.Schema&gt;!System.Runtime.CompilerServices.IsConst)">
\details
      Create a new model with name and schema in the repository.
      \param name [in] name of created model 
      \param schema [in] schema of created model
      \returns ModelPtr 

</member>
        <member name="M:OdDAI.Repository.createModel(OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
      Create a new model with name and schema in the repository.
      \param name [in] name of created model
      \param schema [in] schema name of created model
      \returns ModelPtr

</member>
        <member name="M:OdDAI.Repository.name(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Assigns a name to the repository.

</member>
        <member name="M:OdDAI.Repository.name">
Retrieves the current name of repository.
\returns Returns a string that contains the name.

</member>
        <member name="M:_sdaiGetAttributeType(Sdai_instS*)">
\details
 Returns attributes type
 \param attr [in] attribute
 \returns Returns attribute type

</member>
        <member name="M:_sdaiAttributeDomain(Sdai_instS*)">
\details
 Returns attributes primitive type
 \param attr [in] attribute 
 \returns Returns primitive type 

</member>
        <member name="M:_sdaiGetEntityId(Sdai_instS*)">
\details
 Returns entity ID
 \param entInst [in] entity instance 
 \returns a step-id of an entity instance

</member>
        <member name="M:_sdaiGetEntityById(Sdai_instS*,System.Int32)">
\details
 Returns entity by ID
 \param model [in] model where entity from
 \param id [in] is entity ID
 \returns an entity instance by its step-id, or null if there is no entity with 
  such id in the model. In error case appropriate error codes should be logged

</member>
        <member name="M:_sdaiWriteRepositoryToFile(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details
  Saves repository to file.
  \param repository [in] repository instance
  \param fileName [in] file name for save to
  \returns returns sdaiTRUE if repository write is succeed in other case returns sdaiFALSE

</member>
        <member name="M:_sdaiCreateRepositoryFromFile(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details
  Creates a new repository inside current session. 
  \param session [in] session instance 
  \param fileName [in] file name
  \param name [in] repository name
  \remarks If the name is empty (""), the
    fileName becomes a newly created repository name. If the file stores several data section
    (file_description.implementation_level is "3" or higher), every model gets the name
    predefined in file, otherwise (file_description.implementation_level is 2 ("2;1", "2;2"),
    the single model will have name "default". 
  \returns instance of the created repository, in other case NULL

</member>
        <member name="M:_sdaiCreateRepository(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details
  Creates a new repository with desired name inside current session. 
  \param session [in] session instance
  \param name [in] new repository name
  \returns instance of the created repository, in other case NULL

</member>
        <member name="M:sdaiGetADBTypePath(Sdai_ADBId*,System.Int32*)">
\details
  Returns a pointer to a vector of strings representing the type in the specified ADB.
  \param block [in] ADB instance.
  \param typeNameNumber [in/out] is a size of typeNameVector.
  \returns Returns a pointer to array of strings if successfull, otherwise returns NULL.

</member>
        <member name="M:sdaiPutADBTypePath(Sdai_ADBId*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**)">
\details
  Sets the data_type value of the specified ADB with the EXPRESS TYPE names in the specified vector
  \param block [in] ADB instance
  \param typeNameNumber [in] is a size of typeNameVector 
  \param typeNameVector [in] array of type pathes

</member>
        <member name="M:sdaiCreateNestedAggrByIndex(Sdai_Id_aggr*,System.UInt32)">
\details
  Creates an aggregate instance and replacing the member of the
  aggregate instance referenced by the specified index.
  \param aggregate [in]  aggregate which should be modified.
  \param index [in] the place of modified item.
  \returns Returns identifier of the newly created aggregate instance.


</member>
        <member name="M:sdaiPutAggrByIndex(Sdai_Id_aggr*,System.UInt32,SdaiPrimitiveType,BTEllipsis)">
\details
  replaces and may convert, the value of the member of the specified ordered 
  aggregate instance referenced by the specified index.
  \param aggregate [in] aggregate instance.
  \param index [in] index of the insertion place.
  \param valueType [in] insert value type.
  \param ... [in] values.

</member>
        <member name="M:sdaiPrevious(Sdai_ItrId*)">
\details
  Moves current iterator to the previous aggregate item.
  \param iterator [in] iterator to move.
  \returns Returns sdaiTRUE if there is a member at the new current position; 
  sdaiFALSE if there is no member at the new current position.

</member>
        <member name="M:sdaiEnd(Sdai_ItrId*)">
\details
  Moves current iterator to the end of the aggregate.
  \param iterator [in] iterator to change.

</member>
        <member name="M:sdaiRemove(Sdai_Id_aggr*,SdaiPrimitiveType,BTEllipsis)">
\details
  Removes a member from an unordered aggregate (set/bag) instance.
  \param unorderedAggr [in] Aggregate instance to remove member from.
  \param valueType [in] The desired type of the value to remove.
  \param ... [in] A pointer to the place in memory to remove.

</member>
        <member name="M:sdaiAdd(Sdai_Id_aggr*,SdaiPrimitiveType,BTEllipsis)">
\details
  Adds a member to an unordered aggregate (set/bag) instance.
  \param unorderedAggr [in] Aggregate instance to add member to.
  \param valueType [in] The desired type of the value to get.
  \param value [in] A pointer to the place in memory to set the value.

</member>
        <member name="M:sdaiPutAggrByIterator(Sdai_ItrId*,SdaiPrimitiveType,BTEllipsis)">
\details
  Creates an aggregate instance replacing the current member of the
  aggregate instance referenced by the specified iterator
  \param current [in]  iterator referencing the current member of the aggregate.
  \param selaggrInstance [in] ADB specifying the type of aggregate to create.
  \returns Returns identifier of the newly created aggregate instance.

</member>
        <member name="M:sdaiCreateNestedAggrByItrADB(Sdai_ItrId*,Sdai_ADBId*)">
\details
  Creates an aggregate instance replacing the current member of the
  aggregate instance referenced by the specified iterator
  \param current [in]  iterator referencing the current member of the aggregate.
  \param selaggrInstance [in] ADB specifying the type of aggregate to create.
  \returns Returns identifier of the newly created aggregate instance.

</member>
        <member name="M:sdaiCreateNestedAggrByItr(Sdai_ItrId*)">
\details
  Creates an aggregate instance replacing the current member of the
  aggregate instance referenced by the specified iterator
  \param current [in]  iterator referencing the current member of the aggregate.
  \returns Returns identifier of the newly created aggregate instance.

</member>
        <member name="M:sdaiGetAggrByIterator(Sdai_ItrId*,SdaiPrimitiveType,System.Void*)">
\details
  Retrueves the value of current iterator element.
  \param iterator [in] Iterator to get value from.
  \param valueType [in] The desired type of the value to get.
  \param value [out] A pointer to the place in memory to set the value.

</member>
        <member name="M:sdaiNext(Sdai_ItrId*)">
\details
  Moves the position of iterator to the next element in aggregate instance.
  \param iterator [in] An iterator to set the position.

</member>
        <member name="M:sdaiBeginning(Sdai_ItrId*)">
\details
  Sets the position of iterator to the begginning of aggregate instance.
  \param iterator [in] An iterator to set the position.

</member>
        <member name="M:sdaiDeleteIterator(Sdai_ItrId*)">
\details
  Deletes an iterator.
  \param iterator [in] Iterator to delete.

</member>
        <member name="M:sdaiCreateIterator(Sdai_Id_aggr*)">
\details
  Creates an iterator for traversing aggregate elements.
  \remark Returned object should be deleted by user.
  \param aggregate [in] An aggregate for traversing.

</member>
        <member name="M:sdaiIsMember(Sdai_Id_aggr*,SdaiPrimitiveType,BTEllipsis)">
\details
  Check aggregate whether element is contained in it.
  \param aggregate [in] An aggregate to check.
  \param valueType [in] a type of element.
  \param ... [in] an element value.
  \returns Returns whether element is contained in aggregate.

</member>
        <member name="M:sdaiGetMemberCount(Sdai_Id_aggr*)">
\details
  Returns a number of elements contained in aggregate.
  \param aggregate [in] An aggregate to get number of elements.

</member>
        <member name="M:sdaiPutAttrsBN(Sdai_instS*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,SdaiPrimitiveType,BTEllipsis)">
\details

</member>
        <member name="M:sdaiPutAttrs(Sdai_instS*,System.Int32,Sdai_instS*,SdaiPrimitiveType,BTEllipsis)">
\details

</member>
        <member name="M:sdaiCreateAggrADBBN(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,Sdai_ADBId*)">
\details

</member>
        <member name="M:sdaiCreateAggrADB(Sdai_instS*,Sdai_instS*,Sdai_ADBId*)">
\details

</member>
        <member name="M:sdaiCreateAggrBN(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details

</member>
        <member name="M:sdaiCreateAggr(Sdai_instS*,Sdai_instS*)">
\details

</member>
        <member name="M:sdaiUnsetAttrBN(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details
  Restores the state of the specified attribute in the specified application
  instance such it has no value. 
  \param instance [in] The application instance whose attribute is to be unset.
  \param attributeName [in] The name of the attribute to be unset.

</member>
        <member name="M:sdaiUnsetAttr(Sdai_instS*,Sdai_instS*)">
\details
  Restores the state of the specified attribute in the specified application
  instance such it has no value. 
  \param instance [in] The application instance whose attribute is to be unset.
  \param attribute [in] An attribute definition from the data dictionary.

</member>
        <member name="M:sdaiPutAttrBN(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,SdaiPrimitiveType,BTEllipsis)">
\details

</member>
        <member name="M:sdaiPutAttr(Sdai_instS*,Sdai_instS*,SdaiPrimitiveType,BTEllipsis)">
\details

</member>
        <member name="M:sdaiDeleteInstance(Sdai_instS*)">
\details

</member>
        <member name="M:sdaiFarCopyInstance(Sdai_instS*,Sdai_instS*)">
\details

</member>
        <member name="M:sdaiNearCopyInstance(Sdai_instS*)">
\details

</member>
        <member name="M:sdaiGetAllAttrs(Sdai_instS*,System.Int32*)">
\details

</member>
        <member name="M:sdaiIsSDAIKindOfBN(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details

</member>
        <member name="M:sdaiIsSDAIKindOf(Sdai_instS*,Sdai_instS*)">
\details

</member>
        <member name="M:sdaiIsKindOfBN(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details

</member>
        <member name="M:sdaiIsKindOf(Sdai_instS*,Sdai_instS*)">
\details

</member>
        <member name="M:sdaiIsInstanceOfBN(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details

</member>
        <member name="M:sdaiIsInstanceOf(Sdai_instS*,Sdai_instS*)">
\details

</member>
        <member name="M:sdaiGetInstanceType(Sdai_instS*)">
\details

</member>
        <member name="M:sdaiGetInstanceModel(Sdai_instS*)">
\details
  Provides the identifier of the SDAI-model in which the entity instance exists.
  \param instance [in] entity instance
  \returns Returns a model instance in which the entity instance exists.

</member>
        <member name="M:sdaiTestAttrBN(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details
  Determines if the value of attribute is unset.
  \param instance [in] The instance of the entity whose attribute is being tested.
  \param attributeName [in] The name of the attribute being tested.
  \returns sdaiTRUE if the attribute has a value or sdaiFALSE if the attribute value is not set.

</member>
        <member name="M:sdaiTestAttr(Sdai_instS*,Sdai_instS*)">
\details
  Determines if the value of attribute is unset.
  \param instance [in] The instance of the entity whose attribute is being tested.
  \param attribute [in] An SdaiAttr instance from the SDAI dictionary.
  \returns sdaiTRUE if the attribute has a value or sdaiFALSE if the attribute value is not set.

</member>
        <member name="M:sdaiGetAttrBN(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,SdaiPrimitiveType,System.Void*)">
\details
  Gets the value of an attribute from an entity instance.
  \param instance [in] The instance of the entity whose attribute is being tested.
  \param attributeName [in] attribute name.
  \param valueType [in] the type of value.
  \param value [in/out] value which should used for parameter recording.
  \returns pointer to value if the instance has an attribute or NULL in other case.

</member>
        <member name="M:sdaiGetAttr(Sdai_instS*,Sdai_instS*,SdaiPrimitiveType,System.Void*)">
\details 
  Gets the value of an attribute from an entity instance.
  \param instance [in] The instance of the entity whose attribute is being tested.
  \param attribute [in] attribute instance from the SDAI dictionary.
  \param valueType [in] the type of value.
  \param value [in/out] value which should used for parameter recording.
  \returns pointer to value if the instance has an attribute or NULL in other case.

</member>
        <member name="M:sdaiGetAttrDefinitionBN(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details

</member>
        <member name="M:sdaiGetAttrDefinition(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details

</member>
        <member name="M:sdaiIsSDAISubtypeOfBN(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details

</member>
        <member name="M:sdaiIsSDAISubtypeOf(Sdai_instS*,Sdai_instS*)">
\details

</member>
        <member name="M:sdaiIsSubtypeOfBN(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details
  The Is Subtype Of function shall determine whether an entity definition is a subtype of another entity
  definition.
  \param schemaName [in] schema name
  \param subName [in] name of subtype 
  \param superName [in] name of supertype
  \returns sdaiTRUE if supertype is supertype of subtype, in other case sdaiFALSE

</member>
        <member name="M:sdaiIsSubtypeOf(Sdai_instS*,Sdai_instS*)">
\details
  The Is Subtype Of function shall determine whether an entity definition is a subtype of another entity
  definition.
  \param subtype [in] subtype to check
  \param supertype [in] supertype to check
  \returns sdaiTRUE if supertype is supertype of subtype, in other case sdaiFALSE 

</member>
        <member name="M:sdaiGetEntityExtentBN(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details
Retreives a collection of entity instances that are subtypes of entity type.
\param model [in] The model to get entities collection from.
\param entity [in] The entity definition to find entity instances.
\returns A set of entity instances of type which is derived from entity.

</member>
        <member name="M:sdaiGetEntityExtent(Sdai_instS*,Sdai_instS*)">
\details
Retreives a collection of entity instances that are subtypes of entity type described by entity definition.
\param model [in] The model to get entities collection from.
\param entity [in] The entity definition to find entity instances.
\returns A set of entity instances of type which is derived from entity.

</member>
        <member name="M:sdaiCreateComplexInstanceBN(Sdai_instS*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**)">
\details

\details

</member>
        <member name="M:sdaiSaveChanges(Sdai_instS*)">
\details

</member>
        <member name="M:sdaiUndoChanges(Sdai_instS*)">
\details

</member>
        <member name="M:sdaiCreateInstanceBN(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details

</member>
        <member name="M:sdaiCreateInstance(Sdai_instS*,Sdai_instS*)">
\details

</member>
        <member name="M:sdaiGetEntity(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details
Returns an entity definition for the specified entity name.

</member>
        <member name="M:sdaiEndModelAccess(Sdai_instS*)">
\details

</member>
        <member name="M:sdaiPromoteModel(Sdai_instS*)">
\details

</member>
        <member name="M:sdaiAccessModelBN(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,SdaiAccessMode)">
\details

</member>
        <member name="M:sdaiAccessModel(Sdai_instS*,SdaiAccessMode)">
\details

</member>
        <member name="M:sdaiRenameModelBN(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details

</member>
        <member name="M:sdaiRenameModel(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details

</member>
        <member name="M:sdaiDeleteModelBN(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details

</member>
        <member name="M:sdaiDeleteModel(Sdai_instS*)">
\details

</member>
        <member name="M:sdaiGetSchemaInstance(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,Sdai_instS*)">
\details

</member>
        <member name="M:sdaiGetSchema(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details

\details

</member>
        <member name="M:sdaiRemoveModelBN(Sdai_instS*,Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details

</member>
        <member name="M:sdaiRemoveModel(Sdai_instS*,Sdai_instS*)">
\details

</member>
        <member name="M:sdaiAddModelBN(Sdai_instS*,Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details

</member>
        <member name="M:sdaiAddModel(Sdai_instS*,Sdai_instS*)">
\details

</member>
        <member name="M:sdaiRenameSchemaInstanceBN(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details

</member>
        <member name="M:sdaiRenameSchemaInstance(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details

</member>
        <member name="M:sdaiDeleteSchemaInstanceBN(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,Sdai_instS*)">
\details

</member>
        <member name="M:sdaiDeleteSchemaInstance(Sdai_instS*)">
\details

</member>
        <member name="M:sdaiCloseRepository(Sdai_instS*)">
\details

</member>
        <member name="M:sdaiCreateSchemaInstanceBN(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,Sdai_instS*)">
\details

</member>
        <member name="M:sdaiCreateSchemaInstance(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,Sdai_instS*,Sdai_instS*)">
\details

</member>
        <member name="M:sdaiCreateModelBN(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details

</member>
        <member name="M:sdaiCreateModel(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,Sdai_instS*)">
\details

</member>
        <member name="M:sdaiDeleteADB(Sdai_ADBId*)">
\details
  Deletes the specified ADB.
  \param block [in] the ADB instance.

</member>
        <member name="M:sdaiUnsetADB(Sdai_ADBId*)">
\details
  Unsets the type and value of the specified ADB.
  \param block [in] the ADB instance.

</member>
        <member name="M:sdaiGetADBType(Sdai_ADBId*)">
\details
  Returns the type of the value in the ADB
  \param block [in] the ADB instance.
  \returns Returns the type of ADB.

</member>
        <member name="M:sdaiPutADBValue(Sdai_ADBId*,SdaiPrimitiveType,BTEllipsis)">
\details
  Sets the type and value in the ADB.
  \param block [in] the ADB instance.
  \param valueType [in] value type.
  \param ... [in] values to set.

</member>
        <member name="M:sdaiGetADBValue(Sdai_ADBId*,SdaiPrimitiveType,System.Void*)">
\details
  Gets the value from the ADB.
  \param block [in] the ADB instance.
  \param valueType [in] value type.
  \param value [in/out] pointer to buffer to write result.
  \returns Returns pointer to the value in success, otherwise returns NULL.

</member>
        <member name="M:sdaiCreateEmptyADB">
\details
  Creates an empty ADB.
  \returns Returns created ADB if success, in other case returns NULL.

</member>
        <member name="M:sdaiCreateADB(SdaiPrimitiveType,BTEllipsis)">
\details
  Creates an ADB with type and value preset.
  \param valueType [in] typee of the init values.
  \param ... [in] init values.
  \returns Returns created ADB if success, in other case returns NULL.

</member>
        <member name="M:sdaiIsRecordingOn(Sdai_instS*)">
\details

</member>
        <member name="M:sdaiDeleteNPL(Sdai_Id_aggr*)">
\details
Deletes an instance of Non-Persistent List.

</member>
        <member name="M:sdaiCreateNPL">
\details

\details
Creates an instance of Non-Persistent List (empty unbounded list of entity instances).

</member>
        <member name="M:sdaiOpenRepositoryBN(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details

</member>
        <member name="M:sdaiOpenRepository(Sdai_instS*,Sdai_instS*)">
\details

</member>
        <member name="M:sdaiCloseSession(Sdai_instS*)">
\details

</member>
        <member name="M:sdaiSetEventRecording(Sdai_instS*,System.Int32)">
\details

</member>
        <member name="M:sdaiRecordEvent(Sdai_instS*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details

</member>
        <member name="M:sdaiIsEqual(Sdai_instS*,Sdai_instS*)">
\details
  The Is Equal function shall test whether the two specified SDAI identifiers are identical.
  \param instance1 [in] The first identifier in the comparison.
  \param instance2 [in] The second identifier in the comparison.
  \returns In normal condition: sdaiTRUE if instance1 and instance2 are equal; 
  sdaiFALSE if instance1 and instance2 are not equal.

</member>
        <member name="M:sdaiRestoreErrorHandler">
\details
  The Restore Error Handler function shall remove the most recently added error handling function from
  the top of the last in, first out error handler stack.

  \remarks  The next most recently added error handling function is left at the top of the error 
  handler stack. This function has no effect if the error handler stack is empty.

</member>
        <member name="M:sdaiSetErrorHandler(=FUNC:System.Void(System.UInt32))">
\details
  The Set Error Handler function shall place the specified error handling function on the last in, first out
  error handler stack.

  \remarks This function shall accept the error code as the only parameter and may be executed before 
  the Open Session function, during an SDAI session, and after the Close Session function.
  The system default error handler may be placed on the stack by specifying a NULL function. Multiple
  error handling functions may be placed on the stack. The most recently added error handling function
  is at the top of the stack and shall automatically be invoked when an error condition occurs.
  
  Possible error indicators:
    sdaiSY_ERR Underlying system error

</member>
        <member name="M:sdaiErrorQuery">
\details
  The Error Query function shall return the error code resulting from the C binding function that most
  recently executed unsuccessfully
  \remarks
  After returning the error code, subsequent executions of the ErrorQuery function shall return sdaiNO_ERR 
  until another C language binding function executes unsuccessfully. Prior to executing the Open 
  Session function, the Error Query function shall return sdaiSS_NOPN.
  
  Possible error indicators:
    sdaiSS_NOPN Session is not open.

  \returns Standard error code: The error code of the most recent function that executed unsuccessfully.

</member>
        <member name="M:sdaiLogicalCompare(System.Int32,System.Int32)">
\details 
  The Logical Compare function shall test for the ordering of two values according to the ordering of the
  values of the EXPRESS LOGICAL data type.
  \param value1 [in] value to compare.
  \param value2 [in] value to compare.
  \returns In normal condition: 
    +1 if value1 is greater than value2; 
    0  if value1 is equal to value2; 
    -1 if value1 is less than value2.

</member>
        <member name="M:sdaiOpenSession">
\details
  The Open Session function shall initiate the SDAI implementation and start a new SDAI session.
  \remarks
  Possible error indicators:
    sdaiSS_OPN Session open.
    sdaiSS_NAVL SDAI not available.
    sdaiSY_ERR Underlying system error.
  \returns In normal condition: Session instance identifier. In error condition: NULL identifier.

</member>
        <member name="D:SdaiErrorHandler">
\details
  error handler data type: 

</member>
        <member name="D:SdaiErrorCode">
\details
  error code data type: 

</member>
        <member name="D:SdaiAggrIndex">
\details
  aggregate index data type: 

</member>
        <member name="D:SdaiADB">
\details
  C late binding ADB identifier type: 

</member>
        <member name="D:SdaiNPL">
\details
Unbound empty list of instances.

</member>
        <member name="D:SdaiIterator">
\details
SDAI iterator identifier type

</member>
        <member name="D:SdaiTrx">
\details
  sdai transaction

</member>
        <member name="D:SdaiSchemaInstance">
\details
  sdai schema instance

</member>
        <member name="D:SdaiScope">
\details
  sdai scope

</member>
        <member name="D:SdaiSchema">
\details
  sdai schema

</member>
        <member name="D:SdaiGlobalRule">
\details
  global rule

</member>
        <member name="D:SdaiUniRule">
\details
  uniqueness rule

</member>
        <member name="D:SdaiWhereRule">
\details
  

\details
  where rule

</member>
        <member name="D:SdaiEntity">
\details
  entity definition

</member>
        <member name="D:SdaiNamedType">
\details
  named type

</member>
        <member name="D:SdaiExplicitAttr">
\details
  explicit attribute

</member>
        <member name="D:SdaiAttr">
\details
  attribute

</member>
        <member name="D:SdaiSession">
\details
  sdai session

</member>
        <member name="D:SdaiRep">
\details
  sdai repository

</member>
        <member name="D:SdaiModel">
\details
  sdai model

</member>
        <member name="D:SdaiAppInstance">
\details
  application instance

</member>
        <member name="D:SdaiInstance">
\details
  The handle serves as the identifier of the instance. Identifiers are not persistent. 
  Identifiers shall be unique globally over all types of instances and unchanging within 
  an SDAI session for any particular instance.

</member>
        <member name="D:SdaiBag">
\details
  bag instance

</member>
        <member name="D:SdaiSet">
\details
  set instance

</member>
        <member name="D:SdaiList">
\details
  list instance

</member>
        <member name="D:SdaiArray">
\details
  array instance

</member>
        <member name="D:SdaiUnorderedAggr">
\details
  unordered collection

</member>
        <member name="D:SdaiOrderedAggr">
\details
  ordered collection

</member>
        <member name="D:SdaiAggr">
\details
  The C late binding representation of any aggregate instance is defined by the 
  instance identifier type SdaiInstance and is named SdaiAggr

</member>
        <member name="D:SdaiBinary">
\details
  The EXPRESS BINARY data type shall be represented by the C late binding data type

</member>
        <member name="D:SdaiString">
\details
  The EXPRESS STRING data type shall be represented by the C late binding data type

</member>
        <member name="D:SdaiLogical">
\details
  The EXPRESS LOGICAL data type shall be represented by the C late binding data type

</member>
        <member name="D:SdaiBoolean">
\details
  The EXPRESS BOOLEAN data type shall be represented by the C late binding data type

</member>
        <member name="D:SdaiNumber">
\details
  The EXPRESS NUMBER data type shall be represented by the C late binding data type

</member>
        <member name="D:SdaiReal">
\details
  The EXPRESS REAL data type shall be represented by the C late binding data type

</member>
        <member name="D:SdaiInteger">
\details
  The EXPRESS INTEGER data type shall be represented by the C late binding data type

</member>
        <member name="D:SdaiIndexId">
\details
  The data type SdaiAggrIndex is used to represent aggregation indices. The C late binding type of
  SdaiAggrIndex is represented by an implementation specific handle named SdaiIndexId

</member>
        <member name="T:Sdai_ADBId">
\details
  The C late binding type of the type SdaiADB is represented by an implementation 
  specific handle named SdaiADBId

</member>
        <member name="T:Sdai_ItrId">
\details
  The SDAI iterator data type providing access to aggregate members is represented 
  by an implementation specific handle named SdaiItrId

</member>
        <member name="T:Sdai_Id_aggr">
\details
  

</member>
        <member name="T:Sdai_aggrS">
\details


</member>
        <member name="T:Sdai_instS">
\details


\details
  The value of an attribute or aggregate element that is an instance of an 
  EXPRESS ENTITY type is represented by an implementation specific handle named SdaiId

</member>
        <member name="T:OdDAI.SessionInstance">
\details
  The base class for session instances that can be manipulated with the Data Access Interface (DAI).

</member>
        <member name="M:ExSystemServices.Dispose">
\details
    Virtual destructor.

</member>
        <member name="M:ExSystemServices.#ctor">
\details
    Default constructor.

</member>
        <member name="M:RxSystemServicesImpl.setEnvVar(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Set environment variable with new value.


</member>
        <member name="M:RxSystemServicesImpl.getEnvVar(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Get environment variable. If varName doesn't exist, returns eKeyNotFound.


</member>
        <member name="M:RxSystemServicesImpl.setSystemCodePage(OdCodePageId)">
\details
    Sets the system code page.
    \param codePage [in]  CodePage.

</member>
        <member name="M:RxSystemServicesImpl.systemCodePage">
\details
    Returns the system code page.
    
    \remarks
    On Windows platforms system code page is initialized based on computer's
    Regional Settings. On other platforms with CP_UNDEFINED.
    It can be altered by setSystemCodePage()

</member>
        <member name="M:OdDAI.Schema.setUnnamedTypes(OdSmartPtr&lt;OdRxDictionary&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets a new set of unnamed types for the schema.
    \param types [in] A set of unnamed types to assign to the schema definition.
    \remarks
    This method is for internal use only.

</member>
        <member name="M:OdDAI.Schema.setTypes(OdSmartPtr&lt;OdRxDictionary&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets a new set of defined types for the schema.
    \param types [in] A set of defined types to assign to the schema definition.
    \remarks
    This method is for internal use only.

</member>
        <member name="M:OdDAI.Schema.setEntities(OdSmartPtr&lt;OdRxDictionary&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets a new set of entity definitions for the schema.
    \param entities [in] A set of entity definitions to assign to the schema definition.
    \remarks 
    This method is for internal use only.

</member>
        <member name="M:OdDAI.Schema.setName(OdAnsiString!System.Runtime.CompilerServices.IsConst)">
\details
    Sets a new name for the schema definition.
    \param name [in] A name for the schema definition.
    \remarks 
    This method is for internal use only.

</member>
        <member name="M:OdDAI.Schema.getAttr(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
    Retrieves the current value of an attribute specified by its name.
    \param attrName [in] An ANSI string that contains the attribute name.
    \returns Returns the current value of the attribute.
    \remarks
    The method provides the late binding access to the attribute value by its name.
    Attributes of select and aggregate data types are also supported.

</member>
        <member name="M:OdDAI.Schema.getSuperEntityCollection(OdSmartPtr&lt;OdDAI.Entity&gt;!System.Runtime.CompilerServices.IsConst,std.list&lt;OdSmartPtr&lt;OdDAI.Entity&gt;,std.allocator&lt;OdSmartPtr&lt;OdDAI.Entity&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Retrieves the supertypes collection starting from a specified entity definition.
    The method fills a passed entity list and returns it to a calling subroutine.
    \param targetEntity     [in]  A smart pointer to the starting entity definition.
    \param collectionToFill [out] A placeholder for the supertypes collection.

</member>
        <member name="M:OdDAI.Schema.find(OdAnsiString)">
\details
    Finds an entity definition by its name.
    \returns Returns a smart pointer to the found entity definition. If the entity is not found, the method returns a NULL smart pointer.

</member>
        <member name="M:OdDAI.Schema.types">
\details
    Retrieves a set of defined types of the schema.
    \returns Returns a set of defined types of the schema.

</member>
        <member name="M:OdDAI.Schema.entities">
\details
    Retrieves a set of entity definitions of the schema.
    \returns Returns a set of entity definitions of the schema.

</member>
        <member name="M:OdDAI.Schema.name">
\details
    Retrieves the name of the schema.
    \returns Returns the name of the schema.

</member>
        <member name="T:OdDAI.Schema">
\details
  A class that implements working with a schema definition.

</member>
        <member name="M:OdDAI.DefinedType.domain">
\details
    Retreives a domain of defined type.
    \returns Returns a smart pointer to underlying type of defined type.

</member>
        <member name="M:OdDAI.DefinedType.#ctor">
\details
    Creates a new defined type object with default parameters.

</member>
        <member name="T:OdDAI.DefinedType">
\details
  A class that implements the storing of types established as a result of EXPRESS TYPE declaration.

</member>
        <member name="M:OdDAI.UnderlyingType.domain">
\details
   Retreives a domain of defined type.
   \returns Returns a smart pointer to underlying type of defined type.

</member>
        <member name="M:OdDAI.UnderlyingType.elementType">
\details
    Retrieves data type contained in the aggregation type.
    \returns Returns a smart pointer to the data type.

</member>
        <member name="M:OdDAI.UnderlyingType.type">
\details
    Retreives a type code of contained type.
    \returns Returns a smart pointer to type code of contained type.

</member>
        <member name="T:OdDAI.UnderlyingType">
\details
  Container for simple, aggregation, defined or constructed type.

</member>
        <member name="M:OdDAI.ConstructedType.type">
\details
    Retreives a type code of contained type.
    \returns Returns a smart pointer to type code of contained type.

</member>
        <member name="M:OdDAI.ConstructedType.selections">
\details
    Retreives a set of selectable types.
    \returns Returns a set of selectable types.

</member>
        <member name="M:OdDAI.ConstructedType.elements">
\details
    Retreives a list of values of enumeration type.
    \returns Returns a list of values of enumeration type.

</member>
        <member name="T:OdDAI.ConstructedType">
\details
  Container for enumeration type or select type.

</member>
        <member name="M:OdDAI.SelectType.selections">
\details
    Retreives a set of selectable types.
    \returns Returns a set of selectable types.

</member>
        <member name="M:OdDAI.SelectType.type">
\details
    Retreives a type code of select type.
    \returns Returns a smart pointer to type code of select type.

</member>
        <member name="M:OdDAI.SelectType.#ctor(OdSharedPtr&lt;OdTypeCode&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set&lt;OdDAI.NamedType!System.Runtime.CompilerServices.IsConst**,std.less&lt;OdDAI.NamedType!System.Runtime.CompilerServices.IsConst**&gt;,std.allocator&lt;OdDAI.NamedType!System.Runtime.CompilerServices.IsConst**&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Creates a new select type object with specified parameters.
    \param typeCode   [in] A smart pointer to a type code of select type.
    \param selections [in] A set of selectable types.

</member>
        <member name="M:OdDAI.SelectType.#ctor">
\details
    Creates a new select type object with default parameters.

</member>
        <member name="T:OdDAI.SelectType">
\details
  A class that implements the storing of select types.

</member>
        <member name="D:OdDAI.ExpressIDList">
\details
  A data type that represents an STD list of ansi string objects.

</member>
        <member name="M:OdDAI.EnumerationType.elements">
\details
    Retreives a list of values of enumeration type.
    \returns Returns a list of values of enumeration type.

</member>
        <member name="M:OdDAI.EnumerationType.type">
\details
    Retreives a type code of enumeration type.
    \returns Returns a smart pointer to type code of enumeration type.

</member>
        <member name="M:OdDAI.EnumerationType.#ctor(OdSharedPtr&lt;OdTypeCode&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.list&lt;OdAnsiString,std.allocator&lt;OdAnsiString&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Creates a new enumeration type object with specified parameters.
    \param typeCode [in] A smart pointer to a type code of enumeration type.
    \param elements [in] A list of values of enumeration type.

</member>
        <member name="M:OdDAI.EnumerationType.#ctor">
\details
    Creates a new enumeration type object with default parameters.

</member>
        <member name="T:OdDAI.EnumerationType">
\details
  A class that implements the storing of enumeration types.

</member>
        <member name="M:OdDAI.Entity.getAttr(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
    Retrieves the current value of an attribute specified by its name.
    \param attrName [in] An ANSI string that contains the attribute name.
    \returns Returns the current value of the attribute.
    \remarks
    The method provides the late binding access to the attribute value by its name.
    Attributes of select and aggregate data types are also supported.

</member>
        <member name="M:OdDAI.Entity.appendSuperType(OdDAI.Entity*)">
\details 
    Appends a new supertype to the entity definition.
    \param supertype [in] A raw pointer to an entity definition that defines the new supertype to be appended.

</member>
        <member name="M:OdDAI.Entity.appendAttribute(OdSmartPtr&lt;OdDAI.Attribute&gt;)">
\details 
    Appends a new attribute definition to the entity definitioin.
    \param attributeDef [in] A smart pointer to an attribute definition to be added.

</member>
        <member name="M:OdDAI.Entity.instantiable">
\details
    Retrieves whether the entity definition can be instantiated or not.
    \returns Returns true if the entity definition can be instantiated; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Entity.isSupertypeOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)">
\details
        Check if current Entity is a supertype of another entity.
        \param subtypeToCheck [in] Entity subtype to check
        \returns true if current object is supertype of subtypeToCheck and false in other case. 

</member>
        <member name="M:OdDAI.Entity.supertypes">
\details
    Retrieves the current list of the entity definition's supertypes.
    \returns Returns an STD list of the entity definition's supertypes.

</member>
        <member name="M:OdDAI.Entity.attributes">
\details
    Retrieves the current list of attribute definitions for the entity definition.
    \returns Returns the array of attribute definitions. 
    \remarks 
    The attributes definitions of the superclass entity definition are not included in the resulting array.

</member>
        <member name="M:OdDAI.Entity.createObject(OdDAI.Schema*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
\details
    Creates a new entity definition with a specified owning schema, name instantiable values.
    \param owningSchema [in] Schema in which entity definition is declared.
    \param entityName   [in] An entity definition name.
    \param instantiable [in] A flag that defines whether the entity can be instantiated (equal to true) or not (equal to false).
    \returns Returns a smart pointer to the created entity.

</member>
        <member name="M:OdDAI.Entity.#ctor(OdAnsiString,System.Boolean)">
\details
    Creates a new entity definition with specified parameters.
    \param name [in] A new entity definition name.
    \param instantiable [in] A flag that defines whether the entity can be instantiated (equal to true) or not (equal to false). 

</member>
        <member name="M:OdDAI.Entity.#ctor">
\details
    Creates a new entity definition with default parameters.

</member>
        <member name="T:OdDAI.Entity">
\details
  A class that provides an entity definition within a schema.

</member>
        <member name="M:OdDAI.InverseAttribute.getAttr(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
    Retrieves the current value of an attribute specified by its name.
    \param attrName [in] An ANSI string that contains the attribute name.
    \returns Returns the current value of the attribute.
    \remarks
    The method provides the late binding access to the attribute value by its name.
    Attributes of select and aggregate data types are also supported.

</member>
        <member name="M:OdDAI.InverseAttribute.duplicates">
\details
    Determines whether the attribute may contain duplicates of references from the inverted attribute.
    \returns Returns true if the attribute may contain duplicates; otherwise the method returns false.

</member>
        <member name="M:OdDAI.InverseAttribute.maxCardinality">
\details
    Retrieves maximum number of references from the inverted attribute.
    \returns Returns a maximum number of references.

</member>
        <member name="M:OdDAI.InverseAttribute.minCardinality">
\details
    Retrieves minimum number of references from the inverted attribute.
    \returns Returns a minimum number of references.

</member>
        <member name="M:OdDAI.InverseAttribute.domain">
\details
    Retrieves referencing enity type of the attribute.
    \returns Returns a pointer to the entity type.

</member>
        <member name="M:OdDAI.InverseAttribute.#ctor">
\details
    Creates a new attribute object with default parameters.

</member>
        <member name="T:OdDAI.InverseAttribute">
\details 
  A class that implements the storing and manipulating of attributes.

</member>
        <member name="M:OdDAI.ExplicitAttribute.getAttr(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
    Retrieves the current value of an attribute specified by its name.
    \param attrName [in] An ANSI string that contains the attribute name.
    \returns Returns the current value of the attribute.
    \remarks
    The method provides the late binding access to the attribute value by its name.
    Attributes of select and aggregate data types are also supported.

</member>
        <member name="M:OdDAI.ExplicitAttribute.optional">
\details
    Determines whether the attribute is optional.
    \returns Returns true if the attribute is optional; otherwise the method returns false.

</member>
        <member name="M:OdDAI.ExplicitAttribute.domain">
\details
    Retrieves data type referenced by the attribute.
    \returns Returns a smart pointer to the data type.

</member>
        <member name="M:OdDAI.ExplicitAttribute.#ctor">
\details
    Creates a new attribute object with default parameters.

</member>
        <member name="T:OdDAI.ExplicitAttribute">
\details 
  A class that implements the storing and manipulating of attributes.

</member>
        <member name="M:OdDAI.DerivedAttribute.getAttr(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
    Retrieves the current value of an attribute specified by its name.
    \param attrName [in] An ANSI string that contains the attribute name.
    \returns Returns the current value of the attribute.
    \remarks
    The method provides the late binding access to the attribute value by its name.
    Attributes of select and aggregate data types are also supported.

</member>
        <member name="M:OdDAI.DerivedAttribute.setExpression(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
    Changes expression for evaluation.
    \param expression [in] A pointer to a string that the contains the expression.

</member>
        <member name="M:OdDAI.DerivedAttribute.redeclaring">
\details
    Retrieves defenition of redeclared attribute.
    \returns Returns a smart pointer to the container with defenition of redeclared attribute.

</member>
        <member name="M:OdDAI.DerivedAttribute.domain">
\details
    Retrieves data type referenced by the attribute.
    \returns Returns a smart pointer to the data type.

</member>
        <member name="M:OdDAI.DerivedAttribute.#ctor">
\details
    Creates a new attribute object with default parameters.

</member>
        <member name="T:OdDAI.DerivedAttribute">
\details 
  A class that implements the storing and manipulating of attributes.

</member>
        <member name="T:OdDAI.ExplicitOrDerived">
\details
  Container for defenition of Explicit Attribute or Derived Attribute.

</member>
        <member name="T:OdDAI.BaseType">
\details
  Container for type of Attribute Definition

</member>
        <member name="M:OdDAI.AggregationType.elementType">
\details
    Retrieves data type contained in the aggregation type.
    \returns Returns a smart pointer to the data type.

</member>
        <member name="M:OdDAI.AggregationType.type(OdSharedPtr&lt;OdTypeCode&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets a type code for aggregation type.
    \param typeCode [in] A type code for aggregation type.

</member>
        <member name="M:OdDAI.AggregationType.type">
\details
    Retreives a type code of aggregation type.
    \returns Returns a smart pointer to type code of aggregation type.

</member>
        <member name="M:OdDAI.AggregationType.#ctor(OdSmartPtr&lt;OdDAI.BaseType&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Creates a new aggregation type definition with specified parameters.
    \param elementType [in] A smart pointer to a data type contained in the aggregation type.

</member>
        <member name="M:OdDAI.AggregationType.#ctor">
\details
    Creates a new aggregation type definition with default parameters.

</member>
        <member name="T:OdDAI.AggregationType">
\details
  A class that implements the storing and manipulating of aggregation types.

</member>
        <member name="M:OdDAI.OdSimpleType.type">
\details
    Retrieves the simple type code.
    \returns Returns a const pointer to the type code of the simple type.

</member>
        <member name="T:OdDAI.OdSimpleType">
\details
  A class that implements a data type definition for the EXPRESS SCHEMA SIMPLE type.

</member>
        <member name="M:OdDAI.Attribute.getAttr(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
    Retrieves the current value of an attribute specified by its name.
    \param attrName [in] An ANSI string that contains the attribute name.
    \returns Returns the current value of the attribute.
    \remarks
    The method provides the late binding access to the attribute value by its name.
    Attributes of select and aggregate data types are also supported.

</member>
        <member name="M:OdDAI.Attribute.name">
\details
    Retrieves the current attribute's name.
    \returns Returns an ANSI string that contains the attribute's name.

</member>
        <member name="M:OdDAI.Attribute.#ctor(OdAnsiString,OdDAI.Entity*)">
\details
    Creates a new attribute object with specified parameters.
    \param name     [in] A pointer to a string that contains the attribute name.
    \param optional [in] A flag that determines whether the value of the created attribute is optional (equal to true) or mandatory (equal to false).

</member>
        <member name="T:OdDAI.Attribute">
\details
  A class that implements the storing and manipulating of attributes.

</member>
        <member name="M:OdDAI.AggrUnordered.Remove(OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Removes aggregate item.
    \param anItem [in] a OdRxValue to remove from unordered aggregate.

</member>
        <member name="M:OdDAI.AggrUnordered.Add(OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Adds aggregate item.
    \param anItem [in] a OdRxValue to add to unordered aggregate.

</member>
        <member name="T:OdDAI.AggrUnordered">
\details
  Template class for containers defined within a schema.

</member>
        <member name="T:OdDAI.ConstIterator">
\details
  Abstract class for access to typed const iterator along aggregate.

</member>
        <member name="M:OdDAI.AggrOrdered.getValueBoundByIndex(System.Int32)">
\details
    Get value bound.
    \param index [in] an index of value.

</member>
        <member name="M:OdDAI.AggrOrdered.createAggrInstanceByIndex(System.Int32,OdDAI.Aggr**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Creates a child aggregate by index.
    \param index [in] an index where aggregate create to.
    \param newAggr [in/out] output parameter. If succeeded it should filled by a pointer of new child agggregate.

</member>
        <member name="M:OdDAI.AggrOrdered.putByIndex(System.Int32,OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Puts aggregate item by index.
    \param index [in] an index item to put.
    \param element [in] a value for item set.

</member>
        <member name="M:OdDAI.AggrOrdered.getByIndex(System.Int32)">
\details
    Provides aggregate item by index.
    \param index [in] an index item.
    \returns Returns an OdRxValue of aggregate element.

</member>
        <member name="T:OdDAI.AggrOrdered">
\details
  Class for containers defined within a schema.

</member>
        <member name="T:OdDAI.Iterator">
\details
  Abstract class for access to typed iterator along aggregate.

</member>
        <member name="M:OdDAI.Aggr.rxUninit">
\details
    Temporary method for OdArray compatibility.

</member>
        <member name="M:OdDAI.Aggr.clone">
\details
    Make aggregates clone.
    \returns Returns valid pointer to copy of aggregate if success, otherwise return NULL.
    \remarks 
    Use delete to clean returned pointer.

</member>
        <member name="M:OdDAI.Aggr.empty">
\details
    Check aggregate for any elements. 
    \returns Returns true if aggregate is wempty and false in otherwise.

</member>
        <member name="M:OdDAI.Aggr.compare(OdDAI.Aggr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Aggregates comapring.
    \param right [in] aggregate from right of expression to compare.
    \returns Returns true if aggregates are equal and false in otherwise.

</member>
        <member name="M:OdDAI.Aggr.isMember(OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Check if aggreagate contains a member.
    \param itemToCheck [in] an item to check.
    \returns Returns true if aggregate contains a member and false in otherwise.

</member>
        <member name="M:OdDAI.Aggr.getMemberCount">
\details
    Returns amoung of aggregate elements.
    \returns Returns an amoung of aggregate elements.

</member>
        <member name="M:OdDAI.Aggr.clear">
\details
    Clear the aggregate with deletion of all its content.

</member>
        <member name="M:OdDAI.Aggr.getUpperBound">
\details
    Provides aggregates upper bound.
    \returns Returns an aggregate upper bound.

</member>
        <member name="M:OdDAI.Aggr.getLowerBound">
\details
    Provides aggregates lower bound.
    \returns Returns an aggregate lower bound.

</member>
        <member name="M:OdDAI.Aggr.createEmpty">
\details
    Init aggregate. Creates an empty instance inside aggregate.
    \returns Returns true if operation succeeded, in other case function  returns false

</member>
        <member name="M:OdDAI.Aggr.isOrdered">
\details
    Check if aggregate is ordered.
    \returns Returns true if oredered, otherwise returns false.

</member>
        <member name="M:OdDAI.Aggr.aggrType">
\details
    Returns a type of aggregate.
    \returns Returns a type of aggregate.

</member>
        <member name="M:OdDAI.Aggr.type">
\details
    Returns a value type of aggregate instance elements.
    \returns Returns a value type of aggregate instance elements.

</member>
        <member name="M:OdDAI.Aggr.nullify">
\details
    Clean the aggregate with deletion of all its content.

</member>
        <member name="M:OdDAI.Aggr.isNil">
\details
    Checks if aggregate is unset.
    \return Returns true if aggregate is unset.

</member>
        <member name="M:OdDAI.Aggr.createConstIterator">
\details
    Creates a new const iterator along elements of aggregate.
    \return Returns a shared pointer to the newly created const iterator.

</member>
        <member name="M:OdDAI.Aggr.createIterator">
\details
    Creates a new iterator along elements of aggregate.
    \return Returns a shared pointer to the newly created iterator.

</member>
        <member name="M:OdDAI.Aggr.Dispose">
\details
    Non-virtual destructor!

</member>
        <member name="M:OdDAI.Aggr.#ctor(OdDAI.Aggr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    constructor of copy!

</member>
        <member name="T:OdDAI.Aggr">
\details
  A base class for containers defined within a schema.

</member>
        <member name="T:OdDAI.AggrType">
\details
  Defines aggregation types.

</member>
        <member name="F:aggrTypeSet">
Set type 
</member>
        <member name="F:aggrTypeList">
List type 
</member>
        <member name="F:aggrTypeBag">
Bag type 
</member>
        <member name="F:aggrTypeArray">
Array type 
</member>
        <member name="M:OdRxDisplayAsAttribute.getDisplayValue(OdRxValue*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
\details
    By default this function dereferences the value and retrieves the property
    which name is stored in the attribute.

    \param value                [in]  Value to dereference and retrieve the property of.
    \param useDynamicProperties [in]  Flag to optimize getting the displayed value.
                                      It can be set to false only if all properties
                                      of database objects are statically dependent
                                      on the object type. Default value is true.

    \returns
    Name of the property of the dereferenced object to use instead of the object
    ID. If the value type is not a reference or the referenced object has no
    such property, returns an empty string.

    \remarks
     Can be overloaded in custom implementations.

</member>
        <member name="M:OdRxDisplayAsAttribute.propertyName">
\details
    Retrieves the name of the property of the dereferenced object to use instead
    of the object ID.

    \returns
    Name of the property of the dereferenced object to use instead of the object
    ID.

</member>
        <member name="M:OdRxDisplayAsAttribute.createObject(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Constructor. Creates an attribute of the OdRxDisplayAsAttribute type.

    \param property_name [in]  The name of the property of the dereferenced
                               object to use instead of the object ID.

    \returns
    Smart pointer to a constructed attribute object.

</member>
        <member name="M:OdRxHierarchyLevelAttribute.value(OdRxValue*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Retrieves a string describing CDA hierarchy level of the specified value.

    \returns
    String describing CDA hierarchy level of this node (e.g. 'Model', 'Block').

</member>
        <member name="M:OdRxHierarchyLevelAttribute.defaultValue">
\details
    Retrieves a string describing CDA hierarchy level of this node.

    \returns
    String describing CDA hierarchy level of this node (e.g. 'Model', 'Block').

</member>
        <member name="M:OdRxHierarchyLevelAttribute.createObject(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Constructor. Creates an attribute of the OdRxHierarchyLevelAttribute type.

    \param value [in]  String describing CDA hierarchy level of this node.

    \returns
    Smart pointer to a constructed attribute object.

</member>
        <member name="M:OdRxDefaultValueAttribute.value">
\details
    Gets the default value of the property.

    \returns
    Default value of the property.

</member>
        <member name="M:OdRxDefaultValueAttribute.createObject(OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Constructor. Creates an attribute containing the default value for the
    property.

    \param value [in]  Default value of the property.

    \returns
    Smart pointer to a constructed attribute object.

</member>
        <member name="M:OdRxUnionTypeAttribute.typenames">
\details
    Gets the list of possible types.

    \returns
    Semicolon separated list of possible types.

</member>
        <member name="M:OdRxUnionTypeAttribute.createObject(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Constructor. Creates an attribute that defines possible types of a property,
    if it returns values of types void or OdRxObjectPtr.

    \param typenames [in]  Semicolon separated list of possible types.

    \returns
    Smart pointer to a constructed attribute object.

</member>
        <member name="M:OdRxTypePromotionAttribute.properties">
\details
    Gets the list of subproperties.

    \returns
    List of subproperties.

</member>
        <member name="M:OdRxTypePromotionAttribute.createObject(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Constructor. Creates an attribute that defines which subproperties to show
    besides the property in the promotion mode with OdRxPromotingQueryContext.

    \param properties [in]  List of subproperties.

    \returns
    Smart pointer to a constructed attribute object.

</member>
        <member name="M:OdRxAffinityAttribute.name">
    \details
    Gets the list of names of additional objects.

    \returns
    List of names of additional objects.

</member>
        <member name="M:OdRxAffinityAttribute.createObject(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
    \details
    Constructor. Creates an attribute of the OdRxAffinityAttribute type.

    \param name [in]  Names of additional objects.

    \returns
    Smart pointer to a constructed attribute object.

</member>
        <member name="M:OdRxCumulativeAttribute.type">
\details
    Gets the string specifying the type of cumulative value.

    \returns
    String specifying the type of cumulative value ("area", "length").

</member>
        <member name="M:OdRxCumulativeAttribute.createObject(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Constructor. Creates an attribute that marks properties with cumulative
    values.

    \param type [in]  String specifying the type of cumulative value ("area", "length").

    \returns
    Smart pointer to a constructed attribute object.

</member>
        <member name="M:OdRxUnitTypeAttribute.unitType">
\details
    Gets the property unit type.

    \returns
    Unit type.

</member>
        <member name="M:OdRxUnitTypeAttribute.createObject(OdRxUnitTypeAttribute.UnitType)">
\details
    Constructor. Creates an attribute containing a unit type for properties.

    \param unitType [in]  Unit type.

    \returns
    Smart pointer to a constructed attribute object.

</member>
        <member name="T:OdRxUnitTypeAttribute.UnitType">
\details
    Defines possible unit types.

</member>
        <member name="M:OdRxCOMAttribute.name">
\details
    Gets the name of the corresponding COM property.

    \returns
    Name of the corresponding COM property.

</member>
        <member name="M:OdRxCOMAttribute.createObject(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Constructor. Creates an attribute containing the corresponding COM property.

    \param name [in]  Name of the corresponding COM property.

    \returns
    Smart pointer to a constructed attribute object.

</member>
        <member name="M:OdRxRefersToAttribute.parseReference(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxObject!System.Runtime.CompilerServices.IsConst*,=FUNC:OdSmartPtr&lt;OdRxPropertyBase&gt;(OdRxObject!System.Runtime.CompilerServices.IsConst*,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced),=FUNC:System.Boolean(OdRxPropertyBase!System.Runtime.CompilerServices.IsConst*,OdRxValue*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
\details
    Parses the reference path returning the last property. E.g. for
    "/BlockTableId/Items" it would be "Items" property of the block table.

    \param path    [in]  Path to the property. Intermediate names are separated by '/'.
                         All the properties but the last should be dereferenceable (type().isReference() == true).
    \param pObject [in]  The object to start with. Usually database, for paths starting with '/'.
    \param find    [in]  Optional callback to customize the property retrieval. OdRxMemberQueryEngine::find() is used by default.
    \param convert [in]  Optional callback to convert the property value to another type.

    \returns
    The last property in the path.

</member>
        <member name="M:OdRxRefersToAttribute.path">
\details
    Gets the path to the related property.

    \returns
    Path to the related property (starting with database).
    E.g. "/BlockTableId/Items" for OdDbEntity "BlockId" property.

</member>
        <member name="M:OdRxRefersToAttribute.createObject(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Constructor. Creates an attribute containing the provided path.

    \param path [in]  Path to the related property (starting with database).
                      E.g. "/BlockTableId/Items" for OdDbEntity "BlockId" property.
    \returns
    Smart pointer to a constructed attribute object.

</member>
        <member name="D:ConvertValueCallback">
\details
  Callback type to optionally convert some known property values in
  OdRxRefersToAttribute::parseReference().

</member>
        <member name="D:FindPropertyCallback">
\details
  Callback type to customize property retrieval in
  OdRxRefersToAttribute::parseReference().

</member>
        <member name="M:OdRxDescriptionAttribute.sourceHint">
\details
    Gets the description string resource identifier hint.

    \returns 
    Description string resource identifier hint. Zero if not set.

</member>
        <member name="M:OdRxDescriptionAttribute.id">
\details
    Gets the description string resource identifier.

    \returns
    Description string resource identifier.

</member>
        <member name="M:OdRxDescriptionAttribute.getDescription(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Looks up OdRxDescriptionAttribute on the object if it is a member, (and in
    the object class attribute list if it is not), and uses OdRxResourceLoader
    to get the string from resources identified by ID and hint.

    \param pO [in]  Object to be queried for a description.

    \returns
    A description string if found; empty string otherwise.

</member>
        <member name="M:OdRxDescriptionAttribute.createObject(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.UInt32)">
\details
    Constructor. Creates an attribute to store a description string resource ID
    and a resource ID hint.

    \param description [in]  Description string.
    \param id          [in]  Resource ID of the string.
    \param sourceHint  [in]  Resource ID hint.

    \returns
    Smart pointer to a constructed attribute object.

</member>
        <member name="M:OdRxUiPlacementAttribute.getWeight(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the UI weight for this member.

    \param member [in]  Member to get weight of.

    \returns
    Weight as float value.

</member>
        <member name="M:OdRxUiPlacementAttribute.getCategory(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Retrieves the UI category for this member.

    \param member [in]  Member to get category of.

    \returns
    Category name.

</member>
        <member name="M:OdRxUiPlacementAttribute.createObject(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
\details
    Constructor. Creates the attribute to store UI category and weight.

    \param category [in]  Category name.
    \param weight   [in]  Weight.

    \returns
    Smart pointer to the created attribute.

</member>
        <member name="M:OdRxAlternateLocalizedNameAttribute.createObject(System.UInt32,System.UInt32)">
\details
    Constructor. Creates an instance of the attribute to store a string
    identifier.

    \param id         [in]  Resource ID of the string.
    \param sourceHint [in]  Resource ID hint.

    \returns
    Smart pointer to a constructed attribute object.

</member>
        <member name="M:OdRxLocalizedNameAttribute.sourceHint">
\details
    Retrieves a name string resource identifier hint.

    \returns
    Name string resource identifier hint. Zero if not set.

</member>
        <member name="M:OdRxLocalizedNameAttribute.id">
\details
    Retrieves a name string resource identifier.

    \returns
    Name string resource identifier.

</member>
        <member name="M:OdRxLocalizedNameAttribute.getLocalizedName(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Looks up OdRxLocalizedNameAttribute on the object if it is a member, (and in
    the object class attribute list if it is not), and uses OdRxResourceLoader
    to get the string from resources identified by ID and hint.

    \param pO [in]  Object to get localized name of.

    \returns
    Localized name of the object if operation was successful; empty string
    otherwise.

</member>
        <member name="M:OdRxLocalizedNameAttribute.createObject(System.UInt32,System.UInt32)">
\details
    Construct an instance of the attribute to store a string identifier.

    \param id         [in]  ID of the string.
    \param sourceHint [in]  Resource ID hint.

    \returns
    Smart pointer to a constructed attribute object.

</member>
        <member name="M:OdRxResourceLoader.loadString(OdRxObject!System.Runtime.CompilerServices.IsConst*,System.UInt32,System.UInt32,OdString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Load the string identified by the ID and a hint. Queries the class for
    OdRxResourceLoader and calls subLoadString() to do the actual loading.

    \param pClass     [in]  Class to be queried.
    \param id         [in]  Resource ID of the string.
    \param sourceHint [in]  Resource ID hint.
    \param result    [out]  Loaded string.

    \returns
    Result of the subLoadString() call for the queried class or eNotImplemented
    if the subLoadString() is not implemented in the queried class.

</member>
        <member name="M:OdRxResourceLoader.subLoadString(System.UInt32,System.UInt32,OdString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Load the string identified by the ID and a hint. Implementation is up to the
    application.

    \param id         [in]  Resource ID of the string.
    \param sourceHint [in]  Resource ID hint.
    \param result    [out]  Loaded string.

    \returns
    Result of the operation. Depends on implementation.

</member>
        <member name="M:OdRxAttributeCollection.remove(OdRxAttribute!System.Runtime.CompilerServices.IsConst*)">
\details
    Removes the attribute of that type from the collection.

    \param attribute [in]  Attribute to be removed from the collection.

    \returns
    eOk if successful or eKeyNotFound otherwise.

</member>
        <member name="M:OdRxAttributeCollection.override(OdRxAttribute!System.Runtime.CompilerServices.IsConst*)">
\details
    Add an attribute to the collection. If the collection already has an
    attribute of this class, it will be replaced.

    \param attribute [in]  Attribute to be added to the collection.

    \returns
    eOk if operation was successful; eInvalidInput if the attribute parameter is
    invalid.

</member>
        <member name="M:OdRxAttributeCollection.add(OdRxAttribute!System.Runtime.CompilerServices.IsConst*)">
\details
    Add an attribute to the collection. If the collection already has an
    attribute of this class, it will not be replaced.

    \param attribute [in]  Attribute to be added to the collection.

    \returns
    eOk if operation was successful; eInvalidInput if the attribute parameter is
    invalid; eDuplicateKey if the collection already has an attribute of this
    type.

</member>
        <member name="M:OdRxAttributeCollection.get(OdRxClass!System.Runtime.CompilerServices.IsConst*)">
\details
    Finds the attribute of the given class in the collection (constant version).

    \param type [in]  Class of the attribute to be found.

    \returns
    Pointer to the attribute of the given class. Returns 0 if not found.


\details
    Finds the attribute of the given class in the collection.

    \param type [in]  Class of the attribute to be found.

    \returns
    Pointer to the attribute of the given class. Returns 0 if not found.

</member>
        <member name="M:OdRxAttributeCollection.getAt(System.Int32)">
\details
    Retrieve the attribute at the index (constant version).

    \param index [in]  Index of the attribute to be retrieved.

    \returns
    Pointer to the attribute at the given index.


\details
    Retrieve the attribute at the index (non-constant version).

    \param index [in]  Index of the attribute to be retrieved.

    \returns
    Pointer to the attribute at the given index.

</member>
        <member name="M:OdRxAttributeCollection.count">
\details
    Get the number of elements in the collection.

    \returns
    Number of elements in the collection.

</member>
        <member name="M:OdRxAttributeCollection.Dispose">
\details
    Default destructor for objects of the OdRxAttributeCollection class.

</member>
        <member name="M:OdRxAttributeCollection.#ctor">
\details
    Default constructor for objects of the OdRxAttributeCollection class.

</member>
        <member name="M:OdRxAttribute.Dispose">
\details
    Default destructor for objects of the OdRxAttribute class.

</member>
        <member name="M:OdRxSpecifiedValueType.delete(System.Void*)">
\details
    Enable use delete operator.

</member>
        <member name="M:OdRxSpecifiedValueType.new(System.UInt64)">
\details
  Enable operator new.

</member>
        <member name="M:OdRxSpecifiedValueType.op_Inequality(OdRxSpecifiedValueType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Negative comparison operator.

    \param rhs [in] Value type to compare with the current value type.

    \returns
    True if value types are not equal; false otherwise.

</member>
        <member name="M:OdRxSpecifiedValueType.op_Equality(OdRxSpecifiedValueType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Comparison operator.

    \param rhs [in] Value type to compare with the current value type.

    \returns
    True if value types are equal; false otherwise.

</member>
        <member name="M:OdRxSpecifiedValueType.typePath">
\details
    Retreives an ANSI string in format of path that elaborates the sense of
    value of the value type.

    \returns
    ANSI string with clarification of value sense.

</member>
        <member name="M:OdRxSpecifiedValueType.createValue">
\details
    Create a new wrapped value of this type.

    \returns
    Created wrapped value of this type.

</member>
        <member name="M:OdRxSpecifiedValueType.subEqualTo(System.Void!System.Runtime.CompilerServices.IsConst*,System.Void!System.Runtime.CompilerServices.IsConst*)">
\details
    Compares two values of the underlying C++ type.

    \param a [in] First value to compare.
    \param b [in] Second value to compare.

    \returns
    True if compared values are equal; false otherwise.

</member>
        <member name="M:OdRxSpecifiedValueType.subToString(System.Void!System.Runtime.CompilerServices.IsConst*,OdRxValueType.StringFormat)">
\details
    Convert value to string.

    \param instance [in] Instance of the value to convert.
    \param format   [in] Defines the format of the resulting string.

    \returns
    Converted value.

    \remarks
    Mostly for debug purposes.

</member>
        <member name="M:OdRxSpecifiedValueType.rxObjectValue">
\details
    Returns the interface, that describes OdRxObject-descendant pointers.

    \returns
    Interface, describing OdRxObject-descendant pointers. NULL for types other
    than OdRxObject-descendant pointers.

</member>
        <member name="M:OdRxSpecifiedValueType.reference">
\details
    Returns the interface, that describes references (handlers).

    \returns
    Interface, describing references. NULL for non-reference types.

</member>
        <member name="M:OdRxSpecifiedValueType.enumeration">
\details
    Implementation of the base class 'enumeration'.

    \returns
    Interface to the enumeration.

</member>
        <member name="M:OdRxSpecifiedValueType.underlyingValueType">
\details
    Retrieves a pointer to the underlying value type (which coincide with the
    actual ValueType of OdRxValue.m_value).

    \returns
    Pointer to the underlying value type.

</member>
        <member name="M:OdRxSpecifiedValueType.#ctor(OdRxValueType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
    Constructor which takes an original ValueType and a string that contains
    additional specification of the type in "Folder/SubFolder/Type" format.

    \param underlyingValueType [in] A pointer to the value type for specification.
    \param typePath            [in] A string for the value type specification.

</member>
        <member name="M:OdRxValueIterator.current">
\details
    Returns the current item.

</member>
        <member name="M:OdRxValueIterator.next">
\details
    Step to the next item. Returns true if there actually was a next item.

</member>
        <member name="M:OdRxValueIterator.done">
\details
    Returns true if the iteration is ended.

</member>
        <member name="M:OdRxProperty.subSetValue(OdRxObject*,OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Method called by setValue() to actually set the value. To be overloaded by the property implementation.

</member>
        <member name="M:OdRxProperty.subGetValue(OdRxObject!System.Runtime.CompilerServices.IsConst*,OdRxValue*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Method called by getValue() to actually get the value. To be overloaded by the property implementation.

</member>
        <member name="M:OdRxProperty.setValue(OdRxObject*,OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Set the property value.
    \param pO [in] The object which property to set.
    \param value [in] Property value to set.
    \returns Returns eOk if successful. If it returns eNotApplicable the property is considered read-only.

</member>
        <member name="M:OdRxProperty.getValue(OdRxObject!System.Runtime.CompilerServices.IsConst*,OdRxValue*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Get the property value. 
    \param pO [in] The object which property to retrieve. 
    \param value [out] Resulting value.
    \returns Returns eOk if successful.

</member>
        <member name="M:OdDAI.NamedType.getAttr(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
    Retrieves the current value of an attribute specified by its name.
    \param attrName [in] An ANSI string that contains the attribute name.
    \returns Returns the current value of the attribute.
    \remarks
    The method provides the late binding access to the attribute value by its name.
    Attributes of select and aggregate data types are also supported.

</member>
        <member name="M:OdDAI.NamedType.type(OdSharedPtr&lt;OdTypeCode&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets a type code for named type.

</member>
        <member name="M:OdDAI.NamedType.type">
\details
    Retreives a type code of named type.
    \returns Returns a smart pointer to type code of named type.

</member>
        <member name="M:OdDAI.NamedType.name">
\details
    Retrieves the name of the entity definition.
    \returns Returns an ANSI string that contains the name of the entity definition.

</member>
        <member name="M:OdDAI.NamedType.parentSchema">
\details
    Retrieves the owner schema of the entity definition.
    \returns Returns a pointer to the owner schema of the entity definition.

</member>
        <member name="M:OdDAI.NamedType.#ctor(OdDAI.Schema*,OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Creates a new named type object with specified parameters.
    \param parentSchema [in] A pointer to a schema in which defined type is declared.
    \param name [in] A name of defined type.

</member>
        <member name="M:OdDAI.NamedType.#ctor">
\details
    Creates a new named type object with default parameters.

</member>
        <member name="T:OdDAI.NamedType">
\details
  A class that implements the storing of named types.

</member>
        <member name="T:OdTypeCode">
\details
    Object of this class contains the description of the express type of
    the value contained in OdAny.

</member>
        <member name="M:OdDAI.Select.writeTypedField(OdDAI.OdSpfFilerBase*)">
\details
      Writes typed value into the file which is assigned to the wrFiler.

</member>
        <member name="M:OdDAI.Select.readTypedField(OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdDAI.OdSpfFilerBase*)">
\details
      Reads typed value from the file which is assigned to the rdFiler.

</member>
        <member name="M:OdDAI.Select.unset">
\details
      Unsets the discriminant of the derived type.

</member>
        <member name="M:OdDAI.Select.refreshSelectHandle">
\details
      Reload handle after document loading.

</member>
        <member name="M:OdDAI.Select.setHandleOnLoad(OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
      Sets handle during document loading.

</member>
        <member name="M:OdDAI.Select.setHandleD(OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
      Sets the specific underlying type enum for the stored handle.

</member>
        <member name="M:OdDAI.Select.reset">
\details
    Destructs the underlying object.

</member>
        <member name="M:OdDAI.Select.getAggr(OdDAI.Aggr**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Retrieves the current value as a pointer to Aggr.
    \param ret [out] A placeholder for the value to be returned to a calling subroutine.
    \returns Returns true if the value was successfully converted and returned to a calling subroutine; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.getEnum(System.UInt32!System.Runtime.CompilerServices.IsLong*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Retrieves the current value as a unsigned long value.
    \param ret [out] A placeholder for the value to be returned to a calling subroutine.
    \returns Returns true if the value was successfully converted and returned to a calling subroutine; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.getBINARY(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Retrieves the current value as a binary value.
    \param res [out] A placeholder for the raw pointer that refers to the binary data. This pointer is returned to a calling subroutine.
    \returns Returns true if the value is successfully converted and the raw pointer is returned to a calling subroutine; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.getDoubleArray(OdArray&lt;System.Double,OdObjectsAllocator&lt;System.Double&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Retrieves the current value as an array of double values.
    \param res [out] A placeholder for the array to be filled and returned to a calling subroutine.
    \returns Returns true if the value is successfully converted and returned to a calling subroutine; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.getHandleArray(OdArray&lt;OdDAIObjectId,OdObjectsAllocator&lt;OdDAIObjectId&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Retrieves the current value as an array of object identifiers.
    \param res [out] A placeholder for the array to be filled and returned to a calling subroutine.
    \returns Returns true if the value is successfully converted and returned to a calling subroutine; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.getInt32Array(OdArray&lt;System.Int32,OdObjectsAllocator&lt;System.Int32&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Retrieves the current value as an array of unsigned 32-bit integer values.
    \param res [out] A placeholder for the array to be filled and returned to a calling subroutine.
    \returns Returns true if the value is successfully converted and returned to a calling subroutine; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.getBINARY(OdAnsiString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Retrieves the current value as a binary value.
    \param res [out] A placeholder for the value to be returned to a calling subroutine.
    \returns Returns true if the value was successfully converted and returned to a calling subroutine; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.getLogical(OdDAI.Logical*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Retrieves the current value as a logical value.
    \param ret [out] A placeholder for the value to be returned to a calling subroutine.
    \returns Returns true if the value was successfully converted and returned to a calling subroutine; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.getHandleId">
\details
	  Retrieves the current handle of object identifier.
	  \returns Returns the current value converted into OdDbHandle.
    \remarks 
    The handle returned by the method is read-only.

</member>
        <member name="M:OdDAI.Select.getHandle">
\details 
    Retrieves the current value as an object identifier.
    \returns Returns the current value converted into an object identifier.

</member>
        <member name="M:OdDAI.Select.getHandle(OdDAIObjectId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Retrieves the current value as an object identifier.
    \param ret [out] A placeholder for the value to be returned to a calling subroutine.
    \returns Returns true if the value is successfully converted and returned to a calling subroutine; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.getString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Retrieves the current value as constant pointer to null-terminated string.
    \param ret [out] A placeholder for the value to be returned to a calling subroutine.
    \returns Returns true if the value is successfully converted and returned to a calling subroutine; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.getString(OdAnsiString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Retrieves the current value as an ANSI string.
    \param ret [out] A placeholder for the value to be returned to a calling subroutine.
    \returns Returns true if the value is successfully converted and returned to a calling subroutine; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.getBoolean(OdDAI.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Retrieves the current value as a boolean value.
    \param ret [out] A placeholder for the value to be returned to a calling subroutine.
    \returns Returns true if the value is successfully converted and returned to a calling subroutine; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.getBool(System.Boolean*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Retrieves the current value as a boolean value.
    \param ret [out] A placeholder for the value to be returned to a calling subroutine.
    \returns Returns true if the value is successfully converted and returned to a calling subroutine; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.getDouble(System.Double*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Retrieves the current value as a double value.
    \param ret [out] A placeholder for the value to be returned to a calling subroutine.
    \returns Returns true if the value was successfully converted and returned to a calling subroutine; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.getInt32(System.Int32*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Retrieves the current value as an unsigned 32-bit integer value.
    \param ret [out] A placeholder for the value to be returned to a calling subroutine.
    \returns Returns true if the value is successfully converted and returned to a calling subroutine; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.setAggr(OdDAI.Aggr*)">
\details
    Sets a new value represented with an aggregation.
    \param val [in] A new nested value.
    \returns Returns true if the value was successfully set; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.setEnum(System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
    Sets a new value represented with a unsigned long value.
    \param val [in] A new value.
    \returns Returns true if the value was successfully set; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.setDoubleArray(OdArray&lt;System.Double,OdObjectsAllocator&lt;System.Double&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Sets a new value represented with an array of double values.
    \param val [in] A new value.
    \returns Returns true if the value was successfully set; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.setHandleArray(OdArray&lt;OdDAIObjectId,OdObjectsAllocator&lt;OdDAIObjectId&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Sets a new value represented with an array of object identifiers.
    \param val [in] A new value.
    \returns Returns true if the value was successfully set; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.setInt32Array(OdArray&lt;System.Int32,OdObjectsAllocator&lt;System.Int32&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Sets a new value represented with an array of unsigned 32-bit integers.
    \param val [in] A new value.
    \returns Returns true if the value was successfully set; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.setLogical(OdDAI.Logical*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Sets a new value represented with a logical value.
    \param val [in] A new value.
    \returns Returns true if the value was successfully set; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.setBINARY(OdAnsiString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Sets a new value represented with a binary value.
    \param val [in] A new value.
    \returns Returns true if the value was successfully set; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.setString(OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    Sets a new value represented with an ANSI string.
    \param val [in] A new value.
    \returns Returns true if the value was successfully set; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.setDouble(System.Double)">
\details 
    Sets a new value represented with a double value.
    \param val [in] A new value.
    \returns Returns true if the value was successfully set; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.setBoolean(OdDAI.Boolean!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets a new value represented with a OdDAI::Boolean value.
    \param val [in] A new value.
    \returns Returns true if the value was successfully set; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.setBool(System.Boolean)">
\details 
    Sets a new value represented with a boolean value.
    \param val [in] A new value.
    \returns Returns true if the value was successfully set; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.setInt32(System.Int32)">
\details 
    Sets a new value represented with an unsigned 32-bit integer.
    \param val [in] A new value.
    \returns Returns true if the value was successfully set; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.setHandle(OdDAIObjectId)">
\details 
    Sets a new value represented as an object identifier.
    \param val [in] A new value.
    \returns Returns true if the value was successfully set; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.Select.type">
\details
    Retrieves the current underlying class description.
    \returns Returns a pointer that contains the description of the underlying class.

</member>
        <member name="M:OdDAI.Select.underlyingTypeName(OdAnsiString)">
\details
    Sets a new name of the underlying type. 
    \param typeName [in] An ANSI string that contains the new name.
    \returns Returns false if the new type name is incorrect for the "Select" data type.

</member>
        <member name="M:OdDAI.Select.underlyingTypeName">
\details
    Retrieves the name of the current underlying type.
    \returns Returns an ANSI string that contains the name of the underlying type.

</member>
        <member name="M:OdDAI.Select.kind">
\details
    Retrieves the type of the underlying object.
    \returns Returns the type of the "Select" type's underlying value.

</member>
        <member name="M:OdDAI.Select._d">
\details
    Retrieves the "Select" data type determinant.
    \returns Returns a long value that represents the type determinant.

</member>
        <member name="M:OdDAI.Select.exists">
\details
    Determines whether receiver of the value is set into the "Select" instance.
    \returns Returns 1 if the receiver for the value has been set.

</member>
        <member name="M:OdDAI.Select.op_LessThan(OdDAI.Select!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    The greater operator for the "Select" value.
    \param other [in] other value (right-hand operand of the greater operation).
    \returns Returns false if other greater than this, or false in other case.
    \remarks
    The operator makes a deep copy of underlying data of the right-hand operand and assigns it to this "Select" value.

</member>
        <member name="M:OdDAI.Select.op_Assign(OdDAI.Select!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    The assignment operator for the "Select" value.
    \param other [in] Another value (right-hand operand of the assignment operation).
    \returns Returns a reference to the "Select" value after the assignment operation is done.
    \remarks 
    The operator makes a deep copy of underlying data of the right-hand operand and assigns it to this "Select" value. 

</member>
        <member name="M:OdDAI.Select.Dispose">
Destroys the "Select" value.

</member>
        <member name="M:OdDAI.Select.#ctor">
\details
    Creates a new "Select" value.

</member>
        <member name="M:OdDAI.Select.#ctor(OdDAI.Select!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Creates a new "Select" value as a copy of an existing one (copy constructor).
    \param other [in] Another value to be copied.

</member>
        <member name="T:OdDAI.Select">
\details
  Base class that implements the base functionality for working with the EXPRESS SCHEMA of the "Select" data type.

</member>
        <member name="T:OdDAI.Boolean">
\details
  Class represents SDAI primitive type Boolean.

</member>
        <member name="T:OdDAI.Logical">
\details
  Class represents SDAI primitive type Logical.

</member>
        <member name="M:OdDAIObjectId.erase">
\details
    Erases the object associated with the identifier.
    \remarks Objects can be erased by calling Model::deleteInstance() method only.

</member>
        <member name="M:OdDAIObjectId.getHandle">
\details
    Retrieves the database handle of the object referenced by the identifier.
    \returns Returns the object's database handle.
    \remarks 
    Returns a NULL handle if no database object is referenced by the identifier. The handle equals the file's step-id if
    the owning model of the entity was loaded from a file.
</member>
        <member name="M:OdDAIObjectId.isErased">
\details 
    Determines whether the object associated with the identifier was erased.
    \returns Returns true if the object associated with the identifier was erased; otherwise, the method returns false.

</member>
        <member name="M:OdDAIObjectId.model">
\details 
Retrieves the model identifier object is associated with.
\returns Returns a raw pointer to the database object.
\remarks 
Returns a NULL pointer if the identifier object is not associated with any database.

</member>
        <member name="M:OdDAIObjectId.op_MemberSelection">
\details 
    The operator for the access through a pointer to an identifier.
    \remarks 
    This method is for internal use.

</member>
        <member name="M:OdDAIObjectId.op_Implicit~OdDbStub*">
\details 
    The operator for convertion to a raw pointer to the OdDbStub object.
    \remarks 
    This method is for internal use.

</member>
        <member name="M:OdDAIObjectId.op_LogicalNot">
\details 
    The negation operator for the object identifier.
    \returns Returns true if the object identifier is NULL; otherwise, the method returns false.

</member>
        <member name="M:OdDAIObjectId.op_Inequality(OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    The non-equality operator for the object identifier.
    \param objectId [in] Another identifier (right-hand operand of the operation) to be compared with.
    \returns Returns true if the object identifier is not equal to another one; otherwise, the method returns false.

</member>
        <member name="M:OdDAIObjectId.op_Equality(OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    The equality operator for the object identifier.
    \param objectId [in] Another identifier (right-hand operand of the operation) to be compared with.
    \returns Returns true if the object identifier is equal to another one; otherwise, the method returns false.

</member>
        <member name="M:OdDAIObjectId.op_LessThanOrEqual(OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    The "less or equal than" operator for the object identifier.
    \param objectId [in] Another identifier (right-hand operand of the operation) to be compared with.
    \returns Returns true if the object identifier is less or equal than another one; otherwise, the method returns false.

</member>
        <member name="M:OdDAIObjectId.op_GreaterThanOrEqual(OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    The "more or equal than" operator for the object identifier.
    \param objectId [in] Another identifier (right-hand operand of the operation) to be compared with.
    \returns Returns true if the object identifier is more or equal than another one; otherwise, the method returns false.

</member>
        <member name="M:OdDAIObjectId.op_GreaterThan(OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    The "more than" operator for the object identifier.
    \param objectId [in] Another identifier (right-hand operand of the operation) to be compared with.
    \returns Returns true if the object identifier is more than another one; otherwise, the method returns false.

</member>
        <member name="M:OdDAIObjectId.op_LessThan(OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    The "less than" operator for the object identifier.
    \param objectId [in] Another identifier (right-hand operand of the operation) to be compared with.
    \returns Returns true if the object identifier is less than another one; otherwise, the method returns false.

</member>
        <member name="M:OdDAIObjectId.op_Assign(OdDbStub*)">
\details 
    The assignment operator for the object identifier.
    \param objectId [in] Another identifier (right-hand operand of the assignment operation) represented with a raw pointer to an OdDbStub object.
    \returns Returns the reference to the object identifier after the assignment operation is finished.

</member>
        <member name="M:OdDAIObjectId.op_Assign(OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details 
    The assignment operator for the object identifier.
    \param objectId [in] Another identifier (right-hand operand of the assignment operation).
    \returns Returns the reference to the object identifier after the assignment operation is finished.

</member>
        <member name="M:OdDAIObjectId.objectLeftOnDisk">
\details
    \returns Returns true if object was unloaded from memory and left on disk

</member>
        <member name="M:OdDAIObjectId.isValid">
\details 
    Retrieves whether the identifier is valid.
    \returns Returns true if the identifier is valid; otherwise, the method returns false.

</member>
        <member name="M:OdDAIObjectId.setNull">
\details 
    Sets the identifier to the NULL state.

</member>
        <member name="M:OdDAIObjectId.isNull">
\details 
    Returns whether the identifier is NULL.
    \returns Returns true if the identifier is NULL; otherwise, the method returns false.

</member>
        <member name="M:OdDAIObjectId.#ctor(OdDbStub*)">
\details 
    Creates a new object identifier based on a specified value.
    \param objectId [in] A pointer to an OdDbStub object that stores data for the newly created identifier.

</member>
        <member name="M:OdDAIObjectId.#ctor">
\details 
    Creates a new empty object identifier.

</member>
        <member name="T:OdDAIObjectId">
\details
  A class that implements an identifier of the Data Access Interface (DAI) object functionality.

</member>
        <member name="T:OdDAI.OpenMode">
\details
  Object open modes.

</member>
        <member name="M:OdDAI.ApplicationInstance.id">
\details
    Retrieves the database object identifier of the application instance.
    \returns Returns the application instance's database identifier.
    \remarks
    The method returns a NULL pointer if the application instance is not persistent (i.e. not stored in a database).

</member>
        <member name="M:OdDAI.ApplicationInstance.unsetAttr(OdSmartPtr&lt;OdDAI.Attribute&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Clears the attribute value.
    \param attribute [in] attribute to unset.

</member>
        <member name="M:OdDAI.ApplicationInstance.unsetAttr(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
    Clears the attribute value.
    \param explicitAttrName [in] An ANSI string that contains the attribute name.

</member>
        <member name="M:OdDAI.ApplicationInstance.unsetAttrCaseInsensitive(OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Retrieves whether the attribute value is set or is unset  in case insencitive mode.
    \param attribute [in] an attribute type.
    \returns Returns true if the attribute has a value; otherwise, the method returns false (it means that the attribute value is not set).

</member>
        <member name="M:OdDAI.ApplicationInstance.putAttrCaseInsensitive(OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
   Sets a new value of an attribute that is specified by its name in case insencitive mode.
   \param explicitAttrName [in] An ANSI string that contains the attribute name.
   \param val              [in] A new attribute value to be set.
   \returns Returns true if the attribute value was successfully set; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.ApplicationInstance.putAttr(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets a new value of an attribute that is specified by its name.
    \param explicitAttrName [in] An ANSI string that contains the attribute name.
    \param val              [in] A new attribute value to be set.
    \returns Returns true if the attribute value was successfully set; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.ApplicationInstance.testAttr(OdSmartPtr&lt;OdDAI.Attribute&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Retrieves whether the attribute value is set or is unset.
    \param attribute [in] an attribute type.
    \returns Returns true if the attribute has a value; otherwise, the method returns false (it means that the attribute value is not set).

</member>
        <member name="M:OdDAI.ApplicationInstance.testAttr(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
   Retrieves whether the attribute value is set or is unset.
   \param explicitAttrName [in] An ANSI string that contains the attribute name.
   \returns Returns true if the attribute has a value; otherwise, the method returns false (it means that the attribute value is not set).

</member>
        <member name="M:OdDAI.ApplicationInstance.getAttr(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
    Retrieves the current value of an attribute specified by its name.
    \param attrName [in] An ANSI string that contains the attribute name.
    \returns Returns the current value of the attribute.
    \remarks
    The method provides the late binding access to the attribute value by its name.
    Attributes of select and aggregate data types are also supported.

</member>
        <member name="M:OdDAI.ApplicationInstance.typeName">
\details
    Retrieves the type name of the application instance.
    \returns Returns an ANSI string that contains the type name.

</member>
        <member name="M:OdDAI.ApplicationInstance.resetInverseCounterParts">
\details
    Removes inverse attributes from related application instances.

</member>
        <member name="M:OdDAI.ApplicationInstance.setInverseCounterParts">
\details
    Sets inverse attributes to related application instances.

</member>
        <member name="M:OdDAI.ApplicationInstance.isKindOf(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
    Retrieves whether the application instance belongs to a certain entity type with a specified name.
    \param entityName [in] A name of entities type.
    \returns Returns true if the application instance belongs to the type of entity with the specified name; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.ApplicationInstance.isInstanceOf(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
   Retrieves whether the application instance is an instance of an instance type with a specified name.
   \param entityName [in] An entity's type name.
   \returns Returns true if the application instance is an instance of the specified type; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.ApplicationInstance.outFields(OdDAI.OdSpfFilerBase*)">
\details
    Writes values of the instance's explicit attribute fields to a file buffer that is assigned to a specified filer object.
    \param wrFiler [in] A raw pointer to the filer object assigned with the file buffer to write data to.
    \returns Returns eOk if the attribute fields values are successfully written; otherwise, the method returns an appropriate error.
    \remarks 
    The method's default implementation returns the eNotImplemented value.

</member>
        <member name="M:OdDAI.ApplicationInstance.inFields(OdDAI.OdSpfFilerBase*)">
\details
    Reads values of the instance's explicit attribute fields from a file buffer that is associated with a specified filer object.
    \param rdFiler [in] A raw pointer to the filer object associated with the file buffer to read data from.
    \returns Returns eOk if the attribute fields values are successfully read; otherwise, the method returns an appropriate error.
    \remarks 
    The method's default implementation returns the eNotImplemented value.

</member>
        <member name="M:OdDAI.ApplicationInstance.owningModel">
\details
   Retrieves the model that contains the application instance.
   \returns Returns a raw pointer to the owning model; if the application instance is not appended to any model, the method returns a NULL pointer.

</member>
        <member name="M:OdDAI.ApplicationInstance.#ctor">
\details 
    Creates a new application instance with default parameters.

</member>
        <member name="T:OdDAI.ApplicationInstance">
\details
  The base class for application instances that can be manipulated with the Data Access Interface (DAI).

</member>
        <member name="T:OdDAI.DictionaryInstance">
\details
  The base class for dictionary instances that can be manipulated with the Data Access Interface (DAI).

</member>
        <member name="M:OdDAI.OdSDAIInstance.testAttr(OdSmartPtr&lt;OdDAI.Attribute&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Retrieves whether the attribute value is set or is unset.
    \param attribute [in] an attribute type.
    \returns Returns true if the attribute has a value; otherwise, the method returns false (it means that the attribute value is not set).

</member>
        <member name="M:OdDAI.OdSDAIInstance.testAttr(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
   Retrieves whether the attribute value is set or is unset.
   \param explicitAttrName [in] An ANSI string that contains the attribute name.
   \returns Returns true if the attribute has a value; otherwise, the method returns false (it means that the attribute value is not set).

</member>
        <member name="M:OdDAI.OdSDAIInstance.getAttr(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
    Retrieves the current value of an attribute specified by its name.
    \param attrName [in] An ANSI string that contains the attribute name.
    \returns Returns the current value of the attribute.
    \remarks
    The method provides the late binding access to the attribute value by its name.
    Attributes of select and aggregate data types are also supported.

</member>
        <member name="M:OdDAI.OdSDAIInstance.isKindOf(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
    Retrieves whether the SDAI instance belongs to a certain entity type with a specified name.
    \param entityName [in] A name of entities type.
    \returns Returns true if the SDAI instance belongs to the type of entity with the specified name; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.OdSDAIInstance.isInstanceOf(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
   Retrieves whether the SDAI instance is an instance of an instance type with a specified name.
   \param entityName [in] An entity's type name.
   \returns Returns true if the SDAI instance is an instance of the specified type; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.OdSDAIInstance.owningModel">
\details
    Retrieves the model that contains the SDAI instance.
    \returns Returns a raw pointer to the owning model; if the SDAI instance is not appended to any model, the method returns a NULL pointer.

</member>
        <member name="M:OdDAI.OdDAIObjectSDAI.gsNode">
\details
    Retrieves the current Gs node object of the sdai object.
    \returns Returns a raw pointer to the <exref target="https://docs.opendesign.com/tv/OdGsCache.html">OdGsCache</exref> object associated with the sdai object.

</member>
        <member name="M:OdDAI.OdDAIObjectSDAI.setGsNode(OdGsCache*)">
\details
    Sets a new Gs node cache for the sdai object.
    \param pGsNode [in] A raw pointer to an <exref target="https://docs.opendesign.com/tv/OdGsCache.html">OdGsCache</exref> object.

</member>
        <member name="M:OdDAI.OdDAIObjectSDAI.id">
\details
    Retrieves the database object identifier of the sdai object.
    \returns Returns the sdai object's database identifier.
    \remarks
    The method returns a NULL pointer if the sdai object is not persistent (i.e. not stored in a database).

</member>
        <member name="M:OdDAI.OdDAIObjectSDAI.isPersistent">
\details
    Retrieves whether the sdai object is a persistent one.
    \returns Returns true if the sdai object is a persistent one; otherwise, the method returns false.
    \remarks
    Persistent objects are database-resident objects (i.e. they are stored in a database).

</member>
        <member name="M:OdDAI.OdDAIObjectSDAI.testAttrCaseInsensitive(OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Retrieves whether the attribute value is set or is unset in case insencitive mode.
    \param explicitAttrName [in] An ANSI string that contains the attribute name.
    \returns Returns true if the attribute has a value; otherwise, the method returns false (it means that the attribute value is not set).

</member>
        <member name="M:OdDAI.OdDAIObjectSDAI.testAttr(OdSmartPtr&lt;OdDAI.Attribute&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Retrieves whether the attribute value is set or is unset.
    \param attribute [in] an attribute type.
    \returns Returns true if the attribute has a value; otherwise, the method returns false (it means that the attribute value is not set).

</member>
        <member name="M:OdDAI.OdDAIObjectSDAI.testAttr(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
   Retrieves whether the attribute value is set or is unset.
   \param explicitAttrName [in] An ANSI string that contains the attribute name.
   \returns Returns true if the attribute has a value; otherwise, the method returns false (it means that the attribute value is not set).

</member>
        <member name="M:OdDAI.OdDAIObjectSDAI.getAttrCaseInsensitive(OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Retrieves the current value of an attribute specified by its name in case insencitive mode.
    \param attrName [in] An ANSI string that contains the attribute name.
    \returns Returns the current value of the attribute.
    \remarks
    The method provides the late binding access to the attribute value by its name.
    Attributes of select and aggregate data types are also supported.

</member>
        <member name="M:OdDAI.OdDAIObjectSDAI.getAttr(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
    Retrieves the current value of an attribute specified by its name.
    \param attrName [in] An ANSI string that contains the attribute name.
    \returns Returns the current value of the attribute.
    \remarks
    The method provides the late binding access to the attribute value by its name.
    Attributes of select and aggregate data types are also supported.

</member>
        <member name="M:OdDAI.OdDAIObjectSDAI.isKindOf(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
    Retrieves whether the sdai object belongs to a certain entity type with a specified name.
    \param entityName [in] A name of entities type.
    \returns Returns true if the sdai object belongs to the type of entity with the specified name; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.OdDAIObjectSDAI.isInstanceOf(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
   Retrieves whether the sdai object is an instance of an instance type with a specified name.
   \param entityName [in] An entity's type name.
   \returns Returns true if the sdai object is an instance of the specified type; otherwise, the method returns false.

</member>
        <member name="M:OdDAI.OdDAIObjectSDAI.owningModel">
\details
    Retrieves the model that contains the sdai object.
    \returns Returns a raw pointer to the owning model; if the sdai object is not appended to any model, the method returns a NULL pointer.

</member>
        <member name="T:OdDAI.OdDAIObjectSDAI">
\details
  The base class for dictionary and application instances that can be manipulated with the Data Access Interface (DAI).

</member>
        <member name="M:OdRxBoxedValueOnStack.value">
\details
    Returns contained OdRxValue (const version).

    \returns
    Contained value.


 \details
    Returns contained OdRxValue.

    \returns
    Contained value.

</member>
        <member name="M:OdRxBoxedValueOnStack.#ctor(OdRxValue*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Default constructor.

    \param value [in] Value to be wrapped.

</member>
        <member name="M:OdRxBoxedValue.comparedTo(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
 \details
    Establish order relation with another value.

    \returns
    OdRx::Ordering::kLessThan if this object is less then the specified object;
    OdRx::Ordering::kEqual if this object is equal to the specified object;
    OdRx::Ordering::kGreaterThan if this object is grater then the specified object;
    OdRx::Ordering::kNotOrderable if these objects cannot be ordered.

</member>
        <member name="M:OdRxBoxedValue.isEqualTo(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
 \details
    Compare with another value.

    \param other [in] Object which to compare value with.

    \returns
    True if values of both objects are equal; false otherwise.

</member>
        <member name="M:OdRxBoxedValue.copyFrom(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
 \details
    Copy contents from another value.

    \param other [in] Object to copy value from.

</member>
        <member name="M:OdRxBoxedValue.clone">
 \details
    Clone this value.

    \returns
    Reference to the cloned object.

</member>
        <member name="M:OdRxBoxedValue.newBoxedValueOnHeap(OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 \details
    Create a new boxed value on the heap. Returns a reference-counted smart
    pointer.

    \param value [in] Object of the OdRxValue to be wrapped.

    \returns
    Reference-counted smart pointer to the created OdRxBoxedValue object.

</member>
        <member name="M:OdRxBoxedValue.value">
 \details
    Returns contained OdRxValue.

    \returns
    Contained OdRxValue.


 \details
    Returns contained OdRxValue.

    \returns
    Contained OdRxValue.

</member>
        <member name="D:OdRxBoxedValuePtr">
\details
  Smart pointer to objects of the OdRxBoxedValue class.

</member>
        <member name="M:OdRxValue.serializeIn(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt64)">
\details
    Read value from the byte array.

    \param pBytes        [out] Pointer to the byte array.
    \param maxBytesToRead [in] Maximum number of bytes to read.

    \returns
    Actual number of bytes read.

</member>
        <member name="M:OdRxValue.serializeOut(System.Void*,System.UInt64*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Store value in the byte array.

    \param pBytes         [out] Pointer to the byte array.
    \param maxBytesToWrite [in] Maximum number of bytes to write.

    \returns
    Actual number of bytes written.

</member>
        <member name="M:OdRxValue.getEnumTag">
\details
    Get the corresponding descriptor, if this value contains an enumeration
    item.

    \returns
    Enumeration item descriptor.

</member>
        <member name="M:OdRxValue.unbox(OdRxObject*)">
\details
    Unwraps RxValue contained in OdRxBoxedValue.

    \param pO [in] OdRxBoxedValue to be unboxed.

    \returns
    Unwrapped value.

</member>
        <member name="M:OdRxValue.unbox(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Unwraps RxValue contained in OdRxBoxedValue.

    \param pO [in] OdRxBoxedValue to be unboxed.

    \returns
    Unwrapped value.

</member>
        <member name="M:OdRxValue.typePath">
\details
    Retreives an ANSI string in format of path that elaborates the sense of
    value of the value type. Can be interpreted additionally when working with
    RxValue.

    \returns
    ANSI string with clarification of value sense.

</member>
        <member name="M:OdRxValue.op_Inequality(OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Negative comparison operator.

    \param value [in] Value to compare with the current value.

    \returns
    True if values are not equal; false otherwise.

</member>
        <member name="M:OdRxValue.op_Equality(OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Comparison operator.

    \param value [in] Value to compare with the current value.

    \returns
    True if values are equal; false otherwise.

</member>
        <member name="M:OdRxValue.toString(OdRxValueType.StringFormat)">
\details
    Convert value to string.

    \param format [in] Defines the format of the resulting string.

    \returns
    Converted value.

    \remarks
    Mostly for debug purposes.

</member>
        <member name="M:OdRxValue.varies">
\details
    Returns singleton, representing undefined value.

    \returns
    Singleton, representing undefined value.

</member>
        <member name="M:OdRxValue.isVaries">
\details
    Returns true if the value is undefined. This is represented by assigning
    special singleton value "varies".

    \returns
    True if the value is undefined; false otherwise.

</member>
        <member name="M:OdRxValue.empty">
\details
    Returns canonical empty value.

    \returns
    Canonical empty value.

</member>
        <member name="M:OdRxValue.isEmpty">
\details
    Checks if the value is empty.

    \returns
    True if the value is empty; false otherwise.

</member>
        <member name="M:OdRxValue.type">
\details
    Get metaclass describing C++ type of the stored value.

    \returns
    Metaclass describing C++ type of the stored value.

</member>
        <member name="M:OdRxValue.Dispose">
\details
    Default destructor for objects of the OdRxValue class.

</member>
        <member name="M:OdRxValue.op_Assign(OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Assignment operator.

    \param rhs [in] Value to be assigned.

</member>
        <member name="M:OdRxValue.#ctor(OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Copy constructor for objects of the OdRxValue class. Clones an existing
    instance of the OdRxValue class.

    \param rhs [in] Object of the OdRxValue class to be cloned.

</member>
        <member name="M:OdRxValue.#ctor">
\details
    Default constructor for objects of the OdRxValue class.

</member>
        <member name="D:OdHandleArray">
\details
  This template class is a specialization of the OdArray class for OdDbHandle objects.

</member>
        <member name="M:OdDbHandle.bytes(System.Byte*)">
\details
    Returns the this Handle object as an array OdUInt8[8].
    
    \param bytes [in]  array of bytes to receive the handle.
    
    \remarks
    The low order byte is returned in bytes[0].
    
    \remarks
    The buffer must be at least 17 bytes long.

</member>
        <member name="M:OdDbHandle.isNull">
\details
    Returns true and only if this Handle object is null.

</member>
        <member name="M:OdDbHandle.ascii">
\details
    Returns the hexidecmal representation of this Handle object as an OdString.

</member>
        <member name="M:OdDbHandle.getIntoAsciiBuffer(System.UInt16*)">
\details
    Returns the hexidecmal representation of this Handle object as a null terminated string.
    
    \param pBuf [in]  Pointer to the buffer to receive the string.
    
    \remarks
    The buffer must be at least 17 bytes long.

</member>
        <member name="M:getHexValue(System.Int32)">
\details
  Returns the decimal value of a hexadecimal digit.
  
  \param hexDigit [in]  Hex digit.
  
  Examples:  
  getHexValue('A') returns 10, etc.

</member>
        <member name="F:OdCmTransparency.m_AM">
\details
    The combined value of the transparency method and transparency components.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_method.html">Methods of the Transparency Definition</exref></member>
        <member name="M:OdCmTransparency.dwgOut(OdDbDwgFiler*)">
\details
    Writes to the specified .dwg filer data of this object.

    \param pFiler [in]  Pointer to the filer that the data is to be written to.

</member>
        <member name="M:OdCmTransparency.dwgIn(OdDbDwgFiler*)">
\details
    Reads from the specified .dwg filer data for this object.

    \param pFiler [in]  Pointer to the filer that the data is to be read from.

</member>
        <member name="M:OdCmTransparency.serializeIn(System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
    Sets the transparency method and transparency components as an integer value
    for the transparency object.

    \param transparency [in]  A packed 32-bit integer value that specifies the
      transparency method and transparency components.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_sample.html">Example of Working with Transparency</exref><exref target="https://docs.opendesign.com/td/cm_transparency_method.html">Methods of the Transparency Definition</exref><exref target="https://docs.opendesign.com/td/cm_transparency_integer.html">Transparency Functionality as an Integer-value</exref></member>
        <member name="M:OdCmTransparency.serializeOut">
\details
    Returns the packed 32-bit integer value that stores the transparency method
    and transparency components.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_sample.html">Example of Working with Transparency</exref><exref target="https://docs.opendesign.com/td/cm_transparency_method.html">Methods of the Transparency Definition</exref><exref target="https://docs.opendesign.com/td/cm_transparency_integer.html">Transparency Functionality as an Integer-value</exref></member>
        <member name="M:OdCmTransparency.isSolid">
\details
    Checks whether the transparency method is byAlpha and the opacity is set to
    full for this transparency object. It returns true if and only if the
    transparency method is set to kByAlpha and Alpha = 255, otherwise it returns
    false.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_sample.html">Example of Working with Transparency</exref><exref target="https://docs.opendesign.com/td/cm_transparency_method.html">Methods of the Transparency Definition</exref><exref target="https://docs.opendesign.com/td/cm_transparency_alpha.html">Transparency Functionality as an Alpha-value</exref></member>
        <member name="M:OdCmTransparency.isClear">
\details
    Checks whether the transparency method is byAlpha and the transparency is
    set to full for this transparency object. It returns true if and only if the
    transparency method is set to kByAlpha and Alpha = 0, otherwise it returns
    false.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_sample.html">Example of Working with Transparency</exref><exref target="https://docs.opendesign.com/td/cm_transparency_method.html">Methods of the Transparency Definition</exref><exref target="https://docs.opendesign.com/td/cm_transparency_alpha.html">Transparency Functionality as an Alpha-value</exref></member>
        <member name="M:OdCmTransparency.isInvalid">
\details
    Checks whether the transparency method is an error value for the transparency
    object and returns true if and only if the transparency method is set to
    kErrorValue, otherwise it returns false.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_sample.html">Example of Working with Transparency</exref><exref target="https://docs.opendesign.com/td/cm_transparency_method.html">Methods of the Transparency Definition</exref></member>
        <member name="M:OdCmTransparency.isByLayer">
\details
    Checks whether the transparency method is byLayer for the transparency
    object and returns true if and only if the transparency method is set to
    kByLayer, otherwise it returns false.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_sample.html">Example of Working with Transparency</exref><exref target="https://docs.opendesign.com/td/cm_transparency_method.html">Methods of the Transparency Definition</exref></member>
        <member name="M:OdCmTransparency.isByBlock">
\details
    Checks whether the transparency method is byBlock for the transparency
    object and returns true if and only if the transparency method is set to
    kByBlock, otherwise it returns false.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_sample.html">Example of Working with Transparency</exref><exref target="https://docs.opendesign.com/td/cm_transparency_method.html">Methods of the Transparency Definition</exref></member>
        <member name="M:OdCmTransparency.isByAlpha">
\details
    Checks whether the transparency method is byAlpha for the transparency
    object and returns true if and only if the transparency method is set to
    kByAlpha, otherwise it returns false.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_sample.html">Example of Working with Transparency</exref><exref target="https://docs.opendesign.com/td/cm_transparency_method.html">Methods of the Transparency Definition</exref></member>
        <member name="M:OdCmTransparency.setMethod(OdCmTransparency.transparencyMethod)">
\details
    Sets the transparency method for the transparency object.

    \param method [in]  Transparency method as the transparencyMethod enumeration.

    \remarks
    The transparency method can be one of the following:

    <table><b>Name</b><b>Value</b><b>Description</b>
    kByLayer       0               Transparency is specified by the layer object that the object is assigned to.
    kByBlock       1               Transparency is specified by the block object that the object is contained in.
    kByAlpha       2               Transparency is specified by an alpha value.
    </table>

    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_sample.html">Example of Working with Transparency</exref><exref target="https://docs.opendesign.com/td/cm_transparency_method.html">Methods of the Transparency Definition</exref></member>
        <member name="M:OdCmTransparency.method">
\details
    Returns the transparency method of the transparency object as a value of the transparencyMethod enumeration.

    \remarks
    The transparency method can be a one of the following:

    <table><b>Name</b><b>Value</b><b>Description</b>
    kByLayer       0               Transparency is specified by the layer object that the object is assigned to.
    kByBlock       1               Transparency is specified by the block object that the object is contained in.
    kByAlpha       2               Transparency is specified by an alpha value.
    </table>

    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_sample.html">Example of Working with Transparency</exref><exref target="https://docs.opendesign.com/td/cm_transparency_method.html">Methods of the Transparency Definition</exref></member>
        <member name="M:OdCmTransparency.alphaPercent">
\details
    Returns the alpha value in the range from 0.0 to 1.0 of the transparency object.

    \remarks
    An alpha value defines the degree of transparency.
    Alpha = 0.0 corresponds to full transparency. Alpha = 1.0 corresponds to full opacity.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_sample.html">Example of Working with Transparency</exref><exref target="https://docs.opendesign.com/td/cm_transparency_alpha.html">Transparency Functionality as an Alpha-value</exref></member>
        <member name="M:OdCmTransparency.setAlphaPercent(System.Double)">
\details
    Sets the alpha value as a percentage and switches the transparency method to
    kByAlpha for the transparency object.

    \param alphaPercent [in]  Alpha as a double value in the range from 0.0 to 1.0.

    \remarks
    An alpha value defines the degree of transparency.
    Alpha = 0.0 corresponds to full transparency. Alpha = 1.0 corresponds to full opacity.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_sample.html">Example of Working with Transparency</exref><exref target="https://docs.opendesign.com/td/cm_transparency_alpha.html">Transparency Functionality as an Alpha-value</exref></member>
        <member name="M:OdCmTransparency.alpha">
\details
    Returns the alpha value in the range from 0 to 255 of the transparency object.

    \remarks
    An alpha value defines the degree of transparency.
    Alpha = 0 corresponds to full transparency. Alpha = 255 corresponds to full opacity.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_sample.html">Example of Working with Transparency</exref><exref target="https://docs.opendesign.com/td/cm_transparency_alpha.html">Transparency Functionality as an Alpha-value</exref></member>
        <member name="M:OdCmTransparency.setAlpha(System.Byte)">
\details
    Sets the alpha value and switches the transparency method to kByAlpha for the transparency object.

    \param alpha [in]  Alpha value as an integer value in the range 0 to 255.

    \remarks
    An alpha value defines the degree of transparency.
    Alpha = 0 corresponds to full transparency. Alpha = 255 corresponds to full opacity.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_sample.html">Example of Working with Transparency</exref><exref target="https://docs.opendesign.com/td/cm_transparency_alpha.html">Transparency Functionality as an Alpha-value</exref></member>
        <member name="M:OdCmTransparency.op_Inequality(OdCmTransparency!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Compares two transparency objects as integer values, and returns true when
    their values are not equal or false when their values are equal.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_sample.html">Example of Working with Transparency</exref><exref target="https://docs.opendesign.com/td/cm_transparency_integer.html">Transparency Functionality as an Integer-value</exref></member>
        <member name="M:OdCmTransparency.op_Equality(OdCmTransparency!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Compares two transparency objects as integer values, and returns true when
    their values are equal or false when their values are not equal.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_sample.html">Example of Working with Transparency</exref><exref target="https://docs.opendesign.com/td/cm_transparency_integer.html">Transparency Functionality as an Integer-value</exref></member>
        <member name="M:OdCmTransparency.op_Assign(OdCmTransparency!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Copies a transparency object specified on the right of the operator to the transparency object specified on the left.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_sample.html">Example of Working with Transparency</exref><exref target="https://docs.opendesign.com/td/cm_transparency_integer.html">Transparency Functionality as an Integer-value</exref></member>
        <member name="M:OdCmTransparency.#ctor(OdCmTransparency!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details Creates a copy of an existing transparency object.

    \param transparency [in] The transparency object to be copied.

</member>
        <member name="M:OdCmTransparency.#ctor(System.Double)">
\details Creates a transparency object and sets its transparency property
    using a specified alpha value as a percentage.

    \param alphaPercent [in] An alpha value of transparency in percent as a
      double value in the range from 0.0 to 1.0.

    \remarks
    The transparency method is set to kByAlpha.
    Alpha = 0.0 corresponds to full transparency. Alpha = 1.0 corresponds to full opacity.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_alpha.html">Transparency Functionality as an Alpha-value</exref></member>
        <member name="M:OdCmTransparency.#ctor(System.Byte)">
\details Creates a transparency object and sets its transparency property
    using a specified alpha value.

    \param alpha [in] An alpha value of transparency as an integer value in the
      range from 0 to 255.

    \remarks
    The transparency method is set to kByAlpha.
    Alpha = 0 corresponds to full transparency. Alpha = 255 corresponds to full opacity.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_alpha.html">Transparency Functionality as an Alpha-value</exref></member>
        <member name="M:OdCmTransparency.#ctor(OdCmTransparency.transparencyMethod)">
\details Creates a transparency object and sets the specified transparency
    method for it.

    \param method [in] Transparency method.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_method.html">Methods of the Transparency Definition</exref></member>
        <member name="M:OdCmTransparency.#ctor">
\details Creates a transparency object with default properties.

    \remarks
    The default transparency method is kByLayer.

</member>
        <member name="T:OdCmTransparency.transparencyMethod">
\details
    Represents the transparency method.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_method.html">Methods of the Transparency Definition</exref></member>
        <member name="M:OdCmColorBase.colorNameForDisplay">
\details
    Returns the display color name of the database color object.

    \remarks
    For named colors, this is the same as colorName(). For unnamed colors, it is
    an 'appropriate' name.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_base.html">Example of Working with the Database Color</exref><exref target="https://docs.opendesign.com/td/cm_color_book.html">Color Functionality as a Book Name</exref></member>
        <member name="M:OdCmColorBase.bookName">
\details
    Returns the book name of the database color object.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_base.html">Example of Working with the Database Color</exref><exref target="https://docs.opendesign.com/td/cm_color_book.html">Color Functionality as a Book Name</exref></member>
        <member name="M:OdCmColorBase.colorName">
\details
    Returns the color name of the database color object.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_base.html">Example of Working with the Database Color</exref><exref target="https://docs.opendesign.com/td/cm_color_book.html">Color Functionality as a Book Name</exref></member>
        <member name="M:OdCmColorBase.setNames(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Converts to the named color and sets the color name and book name for the
    database color object.
    If the book name is an empty string, the method sets the book name to
    UNNAMED.
    If the color name is an empty string, the method ignores the specified
    values.
    If the book name and the color name are empty strings, the method
    converts the database color object to the unnamed color.

    \param colorName [in] Color name as a string value.
    \param bookName  [in] Book name as a string value.

    \returns
    Returns true if and only if the conversion is successful.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_base.html">Example of Working with the Database Color</exref><exref target="https://docs.opendesign.com/td/cm_color_book.html">Color Functionality as a Book Name</exref><exref target="https://docs.opendesign.com/td/cm_color_integer.html">Color Functionality as an Integer-value</exref></member>
        <member name="M:OdCmColorBase.setColorIndex(System.UInt16)">
\details
    Sets the color index (ACI) of a color palette and sets the color method
    to byACI for the database color object.

    \param colorIndex [in]  An integer value that is the index of the color in a palette.

    \remarks
    The color index can be a one of the following:

    <table><p>Name</p><b>Value</b><b>Description</b>
    kACIbyBlock       0               Sets the color method to byBlock.
    kACIRed           1               Red.
    kACIYellow        2               Yellow.
    kACIGreen         3               Green.
    kACICyan          4               Cyan.
    kACIBlue          5               Blue.
    kACIMagenta       6               Magenta.
    kACIforeground    7               Sets the color method to Foreground.
    ..                8-255           Defined by display device.
    kACIbyLayer       256             Sets the color method to byLayer.
    kACInone          257             Sets the color method to None.
    </table>

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_base.html">Example of Working with the Database Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref><exref target="https://docs.opendesign.com/td/cm_color_index.html">Color Functionality as an ACI-value</exref></member>
        <member name="M:OdCmColorBase.colorIndex">
\details
    Returns the color index (ACI) of the database color object.

    \remarks
    The color index can be one of the following:

    <table><b>Name</b><b>Value</b><b>Description</b>
    kACIbyBlock       0               Sets the color method to byBlock.
    kACIRed           1               Red.
    kACIYellow        2               Yellow.
    kACIGreen         3               Green.
    kACICyan          4               Cyan.
    kACIBlue          5               Blue.
    kACIMagenta       6               Magenta.
    kACIforeground    7               Sets the color method to Foreground.
    ..                8-255           Defined by display device.
    kACIbyLayer       256             Sets the color method to byLayer.
    kACInone          257             Sets the color method to None.
    </table>

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_base.html">Example of Working with the Database Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref><exref target="https://docs.opendesign.com/td/cm_color_index.html">Color Functionality as an ACI-value</exref></member>
        <member name="M:OdCmColorBase.blue">
\details
    Returns the blue color component of the database color object as a value in
    the range from 0 to 255.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_base.html">Example of Working with the Database Color</exref><exref target="https://docs.opendesign.com/td/cm_color_RGB.html">Color Functionality as an RGB-value</exref></member>
        <member name="M:OdCmColorBase.green">
\details
    Returns the green color component of the database color object as a value in
    the range from 0 to 255.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_base.html">Example of Working with the Database Color</exref><exref target="https://docs.opendesign.com/td/cm_color_RGB.html">Color Functionality as an RGB-value</exref></member>
        <member name="M:OdCmColorBase.red">
\details
    Returns the red color component of the database color object as a value in
    the range from 0 to 255.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_base.html">Example of Working with the Database Color</exref><exref target="https://docs.opendesign.com/td/cm_color_RGB.html">Color Functionality as an RGB-value</exref></member>
        <member name="M:OdCmColorBase.setBlue(System.Byte)">
\details
    Sets the blue color component for the database color object.

    \param blue [in] Blue component as an integer value in the range from 0 to 255.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_base.html">Example of Working with the Database Color</exref><exref target="https://docs.opendesign.com/td/cm_color_RGB.html">Color Functionality as an RGB-value</exref></member>
        <member name="M:OdCmColorBase.setGreen(System.Byte)">
\details
    Sets the green color component for the database color object.

    \param green [in] Green component as an integer value in the range from 0 to 255.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_base.html">Example of Working with the Database Color</exref><exref target="https://docs.opendesign.com/td/cm_color_RGB.html">Color Functionality as an RGB-value</exref></member>
        <member name="M:OdCmColorBase.setRed(System.Byte)">
\details
    Sets the red color component for the database color object.

    \param red [in]  Red component as an integer value in the range from 0 to 255.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_base.html">Example of Working with the Database Color</exref><exref target="https://docs.opendesign.com/td/cm_color_RGB.html">Color Functionality as an RGB-value</exref></member>
        <member name="M:OdCmColorBase.setRGB(System.Byte,System.Byte,System.Byte)">
\details
    Sets the red, green, and blue color components and the color method to byColor
    for the database color object.

    \param red   [in] Red component as an integer value in the range from 0 to 255.
    \param green [in] Green component as an integer value in the range from 0 to 255.
    \param blue  [in] Blue component as an integer value in the range from 0 to 255.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_base.html">Example of Working with the Database Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref><exref target="https://docs.opendesign.com/td/cm_color_RGB.html">Color Functionality as an RGB-value</exref></member>
        <member name="M:OdCmColorBase.setColor(System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
    Sets the color method and color components for the database color object as
    an integer value.

    \param color [in] A packed 32-bit integer value that specifies the color method and color components.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_base.html">Example of Working with the Database Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref><exref target="https://docs.opendesign.com/td/cm_color_integer.html">Color Functionality as an Integer-value</exref></member>
        <member name="M:OdCmColorBase.color">
\details
    Returns the packed 32-bit integer value that stores the color method and
    color components of the database color object.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_base.html">Example of Working with the Database Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref><exref target="https://docs.opendesign.com/td/cm_color_integer.html">Color Functionality as an Integer-value</exref></member>
        <member name="M:OdCmColorBase.isByDgnIndex">
\details
    Checks whether the color method is byDgnIndex for the database color object
    and returns true if and only if the color method is set to kByDgnIndex,
    otherwise it returns false.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_base.html">Example of Working with the Database Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmColorBase.isForeground">
\details
    Checks whether the color method is Foreground for the database color object
    and returns true if and only if the color method is set to kForeground or
    kACIforeground, otherwise it returns false.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_base.html">Example of Working with the Database Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmColorBase.isByACI">
\details
    Checks whether the color method is byACI for the database color object and
    returns true if and only if the color method is set to kByACI, otherwise it
    returns false.

    \remarks
    This method returns true for ACI values of 0 (ByBlock), 7 (ByForeground),
    256 (ByLayer), and 257 (None).

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_base.html">Example of Working with the Database Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmColorBase.isByBlock">
\details
    Checks whether the color method is byBlock for the database color object and
    returns true if and only if the color method is set to kByBlock or was set
    to kACIbyBlock, otherwise it returns false.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_base.html">Example of Working with the Database Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmColorBase.isByLayer">
\details
    Checks whether the color method is byLayer for the database color object and
    returns true if and only if the color method is set to kByLayer or was set
    to kACIbyLayer, otherwise it returns false.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_base.html">Example of Working with the Database Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmColorBase.isByColor">
\details
    Checks whether the color method is byColor for the database color object and
    returns true if and only if the color method is set to kByColor, otherwise
    it returns false.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_base.html">Example of Working with the Database Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmColorBase.setColorMethod(OdCmEntityColor.ColorMethod)">
\details
    Sets the color method for the database color object as a value of the
    ColorMethod enumeration.

    \param colorMethod [in]  color method as the ColorMethod enumeration.

    \remarks
    The color method can be one of the following:

    <table><b>Name</b><b>Value</b><b>Description</b>
    kByLayer       0xC0            Color is specified by the layer object on which the object resides.
    kByBlock       0xC1            Color is specified by the block object in which the object is contained.
    kByColor       0xC2            Color is specified by an RGB value.
    kByACI         0xC3            Color is specified by an index (ACI) of a color palette.
    kByPen         0xC4            Color is specified by an index of a pen color table.
    kForeground    0xC5            Color is the same as the foreground color.
    kByDgnIndex    0xC7            Color is specified by an index of a .dgn color table.
    kNone          0xC8            Color is absent (object is clear).
    </table>

    \remarks
    Use of this method by third-party applications is neither supported nor
    recommended.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_base.html">Example of Working with the Database Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmColorBase.colorMethod">
\details
    Returns the color method of the database color object as a value of the
    ColorMethod enumeration.

    \remarks
    The color method can be one of the following:

    <table><b>Name</b><b>Value</b><b>Description</b>
    kByLayer       0xC0            Color is specified by the layer object on which the object resides.
    kByBlock       0xC1            Color is specified by the block object in which the object is contained.
    kByColor       0xC2            Color is specified by an RGB value.
    kByACI         0xC3            Color is specified by an index (ACI) of a color palette.
    kByPen         0xC4            Color is specified by an index of a pen color table.
    kForeground    0xC5            Color is the same as the foreground color.
    kByDgnIndex    0xC7            Color is specified by an index of a .dgn color table.
    kNone          0xC8            Color is absent (object is clear).
    </table>

    Use of this method by third-party applications is neither supported nor
    recommended.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_base.html">Example of Working with the Database Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="F:OdCmEntityColor.mLUT">
\details
    Maps the colors between ACI values and RGB values.

</member>
        <member name="F:OdCmEntityColor.m_RGBM">
\details
    The combined value of the color method and color components.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmEntityColor.lookUpACI(System.Byte,System.Byte,System.Byte)">
\details
    Converts the RGB value specified by the red, green, and blue components to an
    ACI value.

    \param red   [in]  Red component an an integer value in the range from 0 to 255.
    \param green [in]  Green component an an integer value in the range from 0 to 255.
    \param blue  [in]  Blue component an an integer value in the range from 0 to 255.

    \remarks
    For converting, this method uses the default palette specified by the mLUT
    static array and returns the color index without color method as an integer
    value in the range from 0 to 257.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_RGB.html">Color Functionality as an RGB-value</exref><exref target="https://docs.opendesign.com/td/cm_color_index.html">Color Functionality as an ACI-value</exref></member>
        <member name="M:OdCmEntityColor.lookUpRGB(System.Byte)">
\details
    Converts the specified color index (ACI value) to an RGB value.

    \remarks
    For converting, this method uses the default palette specified by the mLUT static array
    and returns the RGB value without color method as a packed integer value in which:

    <table><b>Byte</b><b>Description</b>
    0              Blue component.
    1              Green component.
    2              Red component.
    </table>

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_RGB.html">Color Functionality as an RGB-value</exref><exref target="https://docs.opendesign.com/td/cm_color_index.html">Color Functionality as an ACI-value</exref></member>
        <member name="M:OdCmEntityColor.setTrueColorMethod(System.UInt32!System.Runtime.CompilerServices.IsLong*)">
\details
    Converts the color method from ACIcolorMethod to ColorMethod and assumes the
    current color method is ACIcolorMethod.

    \param pRGBM [in]  Pointer to the m_RGBM member of the entity color object.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_index.html">Color Functionality as an ACI-value</exref></member>
        <member name="M:OdCmEntityColor.setTrueColor(System.UInt32!System.Runtime.CompilerServices.IsLong*)">
\details
    Sets the color of the calling entity with the entity color object.

    \param pRGBM [in]  Pointer to the m_RGBM member of the entity color object.

    \sa
    <exref target="https://docs.opendesign.com/td/cm.html">Working with Colors and Transparency</exref></member>
        <member name="M:OdCmEntityColor.trueColorMethod(System.Int16)">
\details
    Converts the color method from ACIcolorMethod to ColorMethod and returns the ColorMethod value.

    \param aciColorMethod [in]  ACIcolorMethod value.

    \remarks
    Assumes the current color method is ACIcolorMethod.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_index.html">Color Functionality as an ACI-value</exref></member>
        <member name="M:OdCmEntityColor.trueColor(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the TrueColor value of the entity color object.

    \param pRGBM [in]  Pointer to the m_RGBM member of the entity color object.

    \sa
    <exref target="https://docs.opendesign.com/td/cm.html">Working with Colors and Transparency</exref></member>
        <member name="M:OdCmEntityColor.isNone(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*)">
\details
    Checks whether the color method is None (invisible) for the entity color
    object and returns true if and only if the color method is set to kNone or
    was set to kACInone, otherwise it returns false.

    \param pRGBM [in]  Pointer to the m_RGBM member of the entity color object.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmEntityColor.isByDgnIndex(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*)">
\details
    Checks whether the color method is byDgnIndex for the entity color object
    and returns true if and only if the color method is set to kByDgnIndex,
    otherwise it returns false.

    \param pRGBM [in] Pointer to the m_RGBM member of the entity color object.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmEntityColor.isForeground(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*)">
\details
    Checks whether the color method is Foreground for the entity color object
    and returns true if and only if the color method is set to kForeground or
    was set to kACIforeground, otherwise it returns false.

    \param pRGBM [in] Pointer to the m_RGBM member of the entity color object.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmEntityColor.isByACI(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*)">
\details
    Checks whether the color method is byACI for the entity color object and
    returns true if and only if the color method is set to kByACI, otherwise it
    returns false.

    \param pRGBM [in] Pointer to the m_RGBM member of the entity color object.

    \remarks
    This method returns true for ACI values of 0 (ByBlock), 7 (ByForeground),
    256 (ByLayer), and 257 (None).

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmEntityColor.isByBlock(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*)">
\details
    Checks whether the color method is byBlock for the entity color object and
    returns true if and only if the color method is set to kByBlock, otherwise
    it returns false.

    \param pRGBM [in] Pointer to the m_RGBM member of the entity color object.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmEntityColor.isByLayer(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*)">
\details
    Checks whether the color method is byLayer for the entity color object and
    returns true if and only if the color method is set to kByLayer or
    kACIbyLayer, otherwise it returns false.

    \param pRGBM [in]  Pointer to the m_RGBM member of the entity color object.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmEntityColor.isByColor(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*)">
\details
    Checks whether the color method is byColor for the entity color object and
    returns true if and only if the color method is set to kByColor, otherwise
    it returns false.

    \param pRGBM [in]  Pointer to the m_RGBM member of the entity color object.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmEntityColor.blue(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the blue color component of the entity color object as a value in
    the range from 0 to 255.

    \param pRGBM [in]  Pointer to the m_RGBM member of the entity color object.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_RGB.html">Color Functionality as an RGB-value</exref></member>
        <member name="M:OdCmEntityColor.green(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the green color component of the entity color object as a value in
    the range from 0 to 255.

    \param pRGBM [in]  Pointer to the m_RGBM member of the entity color object.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_RGB.html">Color Functionality as an RGB-value</exref></member>
        <member name="M:OdCmEntityColor.red(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the red color component of the entity color object as a value in the
    range from 0 to 255.

    \param pRGBM [in]  Pointer to the m_RGBM member of the entity color object.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_RGB.html">Color Functionality as an RGB-value</exref></member>
        <member name="M:OdCmEntityColor.setBlue(System.UInt32!System.Runtime.CompilerServices.IsLong*,System.Byte)">
\details
    Sets the blue color component for the entity color object.

    \param pRGBM [in]  Pointer to the m_RGBM member of the entity color object.
    \param blue  [in]  Blue component as an integer value in the range from 0 to 255.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref><exref target="https://docs.opendesign.com/td/cm_color_RGB.html">Color Functionality as an RGB-value</exref></member>
        <member name="M:OdCmEntityColor.setGreen(System.UInt32!System.Runtime.CompilerServices.IsLong*,System.Byte)">
\details
    Sets the green color component for the entity color object.

    \param pRGBM [in]  Pointer to the m_RGBM member of the entity color object.
    \param green [in]  Green component as an integer value in the range from 0 to 255.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref><exref target="https://docs.opendesign.com/td/cm_color_RGB.html">Color Functionality as an RGB-value</exref></member>
        <member name="M:OdCmEntityColor.setRed(System.UInt32!System.Runtime.CompilerServices.IsLong*,System.Byte)">
\details
    Sets the red color component for the entity color object.

    \param pRGBM [in] Pointer to the m_RGBM member of the entity color object.
    \param red   [in] Red component as an integer value in the range from 0 to 255.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref><exref target="https://docs.opendesign.com/td/cm_color_RGB.html">Color Functionality as an RGB-value</exref></member>
        <member name="M:OdCmEntityColor.setRGB(System.UInt32!System.Runtime.CompilerServices.IsLong*,System.Byte,System.Byte,System.Byte)">
\details
    Sets the red, green, and blue color components and the color method to byColor
    for the entity color object.

    \param pRGBM [in] Pointer to the m_RGBM member of the entity color object.
    \param red   [in] Red component as an integer value in the range from 0 to 255.
    \param green [in] Green component as an integer value in the range from 0 to 255.
    \param blue  [in] Blue component as an integer value in the range from 0 to 255.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref><exref target="https://docs.opendesign.com/td/cm_color_RGB.html">Color Functionality as an RGB-value</exref></member>
        <member name="M:OdCmEntityColor.colorIndex(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the color index (ACI) of the entity color object.

    \param pRGBM [in]  Pointer to the m_RGBM member of the entity color object.

    \remarks
    The color index can be one of the following:

    <table><b>Name</b><b>Value</b><b>Description</b>
    kACIbyBlock       0               Sets the color method to byBlock.
    kACIRed           1               Red.
    kACIYellow        2               Yellow.
    kACIGreen         3               Green.
    kACICyan          4               Cyan.
    kACIBlue          5               Blue.
    kACIMagenta       6               Magenta.
    kACIforeground    7               Sets the color method to Foreground.
    ..                8-255           Defined by display device.
    kACIbyLayer       256             Sets the color method to byLayer.
    kACInone          257             Sets the color method to None.
    </table>

    An entity does not have a color from the time it is first instantiated until
    it is assigned one or added to a database.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref><exref target="https://docs.opendesign.com/td/cm_color_index.html">Color Functionality as an ACI-value</exref></member>
        <member name="M:OdCmEntityColor.setDgnColorIndex(System.UInt32!System.Runtime.CompilerServices.IsLong*,System.Int16)">
\details
    Sets the .dgn color index (DgnIndex) of a color palette and sets the
    color method to byDgnIndex for the entity color object.

    \param pRGBM [in] Pointer to the m_RGBM member of the entity color object.
    \param colorIndex [in] An integer value that is the index of the color in a palette.

</member>
        <member name="M:OdCmEntityColor.setColorIndex(System.UInt32!System.Runtime.CompilerServices.IsLong*,System.Int16)">
\details
    Sets the color index (ACI) of a color palette and sets the color method
    to byACI for the entity color object.

    \param pRGBM [in]  Pointer to the m_RGBM member of the entity color object.
    \param colorIndex [in]  An integer value that is the index of the color in a palette.

    \remarks
    The color index can be one of the following:

    <table><b>Name</b><b>Value</b><b>Description</b>
    kACIbyBlock       0               Sets the color method to byBlock.
    kACIRed           1               Red.
    kACIYellow        2               Yellow.
    kACIGreen         3               Green.
    kACICyan          4               Cyan.
    kACIBlue          5               Blue.
    kACIMagenta       6               Magenta.
    kACIforeground    7               Sets the color method to Foreground.
    ..                8-255           Defined by display device.
    kACIbyLayer       256             Sets the color method to byLayer.
    kACInone          257             Sets the color method to None.
    </table>

    An entity does not have a color from the time it is first instantiated until
    it is assigned one or added to a database.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref><exref target="https://docs.opendesign.com/td/cm_color_index.html">Color Functionality as an ACI-value</exref></member>
        <member name="M:OdCmEntityColor.color(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the packed 32-bit integer value that stores the color method and
    color components of the entity color object.

    \param pRGBM [in]  Pointer to the m_RGBM member of the entity color object.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref><exref target="https://docs.opendesign.com/td/cm_color_integer.html">Color Functionality as an Integer-value</exref></member>
        <member name="M:OdCmEntityColor.setColor(System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
    Sets the color method and color components for the entity color object as an
    integer value.

    \param pRGBM [in]  Pointer to the m_RGBM member of the entity color object.
    \param color [in]  A packed 32-bit integer value that specifies the color method and color components.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref><exref target="https://docs.opendesign.com/td/cm_color_integer.html">Color Functionality as an Integer-value</exref></member>
        <member name="M:OdCmEntityColor.colorMethod(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the color method of the entity color object as a value of the ColorMethod enumeration.

    \param pRGBM [in]  Pointer to the m_RGBM member of the entity color object.

    \remarks
    The color method can be one of the following:

    <table><b>Name</b><b>Value</b><b>Description</b>
    kByLayer       0xC0            Color is specified by the layer object on which the object resides.
    kByBlock       0xC1            Color is specified by the block object in which the object is contained.
    kByColor       0xC2            Color is specified by an RGB value.
    kByACI         0xC3            Color is specified by an index (ACI) of a color palette.
    kByPen         0xC4            Color is specified by an index of a pen color table.
    kForeground    0xC5            Color is the same as the foreground color.
    kByDgnIndex    0xC7            Color is specified by an index of a .dgn color table.
    kNone          0xC8            Color is absent (object is clear).
    </table>

    An entity does not have a color from the time it is first instantiated until
    it is assigned one or added to a database.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmEntityColor.setColorMethod(System.UInt32!System.Runtime.CompilerServices.IsLong*,OdCmEntityColor.ColorMethod)">
\details
    Sets the color method for the entity color object.

    \param pRGBM [in]  Pointer to the m_RGBM member of the entity color object.
    \param colorMethod [in]  color method as the ColorMethod enumeration.

    \remarks
    The color method can be one of the following:

    <table><b>Name</b><b>Value</b><b>Description</b>
    kByLayer       0xC0            Color is specified by the layer object on which the object resides.
    kByBlock       0xC1            Color is specified by the block object in which the object is contained.
    kByColor       0xC2            Color is specified by an RGB value.
    kByACI         0xC3            Color is specified by an index (ACI) of a color palette.
    kByPen         0xC4            Color is specified by an index of a pen color table.
    kForeground    0xC5            Color is the same as the foreground color.
    kByDgnIndex    0xC7            Color is specified by an index of a .dgn color table.
    kNone          0xC8            Color is absent (object is clear).
    </table>

    An entity does not have a color from the time it is first instantiated until
    it is assigned one or added to a database.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmEntityColor.setTrueColorMethod">
\details
    Converts the color method from ACIcolorMethod to ColorMethod and
    assumes the current color method is ACIcolorMethod.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_index.html">Color Functionality as an ACI-value</exref></member>
        <member name="M:OdCmEntityColor.trueColorMethod">
\details
    Converts the color method from ACIcolorMethod to ColorMethod and returns the
    ColorMethod value.

    \remarks
    Assumes the current color method is ACIcolorMethod.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_index.html">Color Functionality as an ACI-value</exref></member>
        <member name="M:OdCmEntityColor.setTrueColor">
\details
    Sets the color of the calling entity with the entity color object.

    \sa
    <exref target="https://docs.opendesign.com/td/cm.html">Working with Colors and Transparency</exref></member>
        <member name="M:OdCmEntityColor.trueColor">
\details
    Returns the TrueColor value of the entity color object.

    \sa
    <exref target="https://docs.opendesign.com/td/cm.html">Working with Colors and Transparency</exref></member>
        <member name="M:OdCmEntityColor.isNone">
\details
    Checks whether the color method is None (invisible) for the entity color
    object.

    \returns
    True if and only if the color method is set to kNone or kACInone, otherwise
    returns false.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmEntityColor.isByDgnIndex">
\details
    Checks whether the color method is byDgnIndex for the entity color object
    and returns true if and only if the color method is set to kByDgnIndex,
    otherwise it returns false.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmEntityColor.isForeground">
\details
    Checks whether the color method is Foreground for the entity color object
    and returns true if and only if the color method is set to kForeground or
    was set to kACIforeground, otherwise it returns false.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmEntityColor.isByACI">
\details
    Checks whether the color method is byACI for the entity color object and
    returns true if and only if the color method is set to kByACI, otherwise it
    returns false.

    \remarks
    This method returns true for ACI values of 0 (ByBlock), 7 (ByForeground),
    256 (ByLayer), and 257 (None).

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmEntityColor.isByBlock">
\details
    Checks whether the color method is byBlock for the entity color object and
    returns true if and only if the color method is set to kByBlock or was set
    to kACIbyBlock, otherwise it returns false.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmEntityColor.isByLayer">
\details
    Checks whether the color method is byLayer for the entity color object and
    returns true if and only if the color method is set to kByLayer or was set
    to kACIbyLayer, otherwise it returns false.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmEntityColor.isByColor">
\details
    Checks whether the color method is byColor for the entity color object and
    returns true if and only if the color method is set to kByColor, otherwise
    it returns false.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmEntityColor.blue">
\details
    Returns the blue color component of the entity color object as a value in
    the range from 0 to 255.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_RGB.html">Color Functionality as an RGB-value</exref></member>
        <member name="M:OdCmEntityColor.green">
\details
    Returns the green color component of the entity color object as a value in
    the range from 0 to 255.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_RGB.html">Color Functionality as an RGB-value</exref></member>
        <member name="M:OdCmEntityColor.red">
\details
    Returns the red color component of the entity color object as a value in the
    range from 0 to 255.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_RGB.html">Color Functionality as an RGB-value</exref></member>
        <member name="M:OdCmEntityColor.setBlue(System.Byte)">
\details
    Sets the blue color component for the entity color object.

    \param blue [in] Blue component as an integer value in the range from 0 to 255.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref><exref target="https://docs.opendesign.com/td/cm_color_RGB.html">Color Functionality as an RGB-value</exref></member>
        <member name="M:OdCmEntityColor.setGreen(System.Byte)">
\details
    Sets the green color component for the entity color object.

    \param green [in] Green component as an integer value in the range from 0 to 255.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref><exref target="https://docs.opendesign.com/td/cm_color_RGB.html">Color Functionality as an RGB-value</exref></member>
        <member name="M:OdCmEntityColor.setRed(System.Byte)">
\details
    Sets the red color component for the entity color object.

    \param red [in] Red component as an integer value in the range from 0 to 255.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref><exref target="https://docs.opendesign.com/td/cm_color_RGB.html">Color Functionality as an RGB-value</exref></member>
        <member name="M:OdCmEntityColor.setRGB(System.Byte,System.Byte,System.Byte)">
\details
    Sets the red, green, and blue color components and the color method to byColor
    for the entity color object.

    \param red   [in] Red component as an integer value in the range from 0 to 255.
    \param green [in] Green component as an integer value in the range from 0 to 255.
    \param blue  [in] Blue component as an integer value in the range from 0 to 255.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref><exref target="https://docs.opendesign.com/td/cm_color_RGB.html">Color Functionality as an RGB-value</exref></member>
        <member name="M:OdCmEntityColor.colorIndex">
\details
    Returns the color index (ACI) of the entity color object.

    \remarks
    The color index can be one of the following:

    <table><b>Name</b><b>Value</b><b>Description</b>
    kACIbyBlock       0               Sets the color method to byBlock.
    kACIRed           1               Red.
    kACIYellow        2               Yellow.
    kACIGreen         3               Green.
    kACICyan          4               Cyan.
    kACIBlue          5               Blue.
    kACIMagenta       6               Magenta.
    kACIforeground    7               Sets the color method to Foreground.
    ..                8-255           Defined by display device.
    kACIbyLayer       256             Sets the color method to byLayer.
    kACInone          257             Sets the color method to None.
    </table>

    An entity does not have a color from the time it is first instantiated until
    it is assigned one or added to a database.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref><exref target="https://docs.opendesign.com/td/cm_color_index.html">Color Functionality as an ACI-value</exref></member>
        <member name="M:OdCmEntityColor.setColorIndex(System.Int16)">
\details
    Sets the color index (ACI) of a color palette and sets the color method
    to byACI for the entity color object.

    \param colorIndex [in]  An integer value that is the index of the color in a palette.

    \remarks
    The color index can be one of the following:

    <table><b>Name</b><b>Value</b><b>Description</b>
    kACIbyBlock       0               Sets the color method to byBlock.
    kACIRed           1               Red.
    kACIYellow        2               Yellow.
    kACIGreen         3               Green.
    kACICyan          4               Cyan.
    kACIBlue          5               Blue.
    kACIMagenta       6               Magenta.
    kACIforeground    7               Sets the color method to Foreground.
    ..                8-255           Defined by display device.
    kACIbyLayer       256             Sets the color method to byLayer.
    kACInone          257             Sets the color method to None.
    </table>

    An entity does not have a color from the time it is first instantiated until
    it is assigned one or added to a database.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref><exref target="https://docs.opendesign.com/td/cm_color_index.html">Color Functionality as an ACI-value</exref></member>
        <member name="M:OdCmEntityColor.color">
\details
    Returns the packed 32-bit integer value that stores the color method and
    color components of the entity color object.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref><exref target="https://docs.opendesign.com/td/cm_color_integer.html">Color Functionality as an Integer-value</exref></member>
        <member name="M:OdCmEntityColor.setColor(System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
    Sets the color method and color components for the entity color object as an
    integer value.

    \param color [in]  A packed 32-bit integer value that specifies the color
      method and color components.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref><exref target="https://docs.opendesign.com/td/cm_color_integer.html">Color Functionality as an Integer-value</exref></member>
        <member name="M:OdCmEntityColor.colorMethod">
\details
    Returns the color method of the entity color object as a value of the ColorMethod enumeration.

    \remarks
    The color method can be one of the following:

    <table><b>Name</b><b>Value</b><b>Description</b>
    kByLayer       0xC0            Color is specified by the layer object on which the object resides.
    kByBlock       0xC1            Color is specified by the block object in which the object is contained.
    kByColor       0xC2            Color is specified by an RGB value.
    kByACI         0xC3            Color is specified by an index (ACI) of a color palette.
    kByPen         0xC4            Color is specified by an index of a pen color table.
    kForeground    0xC5            Color is the same as the foreground color.
    kByDgnIndex    0xC7            Color is specified by an index of a .dgn color table.
    kNone          0xC8            Color is absent (object is clear).
    </table>

    An entity does not have a color from the time it is first instantiated until
    it is assigned one or added to a database.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmEntityColor.setColorMethod(OdCmEntityColor.ColorMethod)">
\details
    Sets the color method for the entity color object.

    \param colorMethod [in]  color method as the ColorMethod enumeration.

    \remarks
    The color method can be one of the following:

    <table><b>Name</b><b>Value</b><b>Description</b>
    kByLayer       0xC0            Color is specified by the layer object on which the object resides.
    kByBlock       0xC1            Color is specified by the block object in which the object is contained.
    kByColor       0xC2            Color is specified by an RGB value.
    kByACI         0xC3            Color is specified by an index (ACI) of a color palette.
    kByPen         0xC4            Color is specified by an index of a pen color table.
    kForeground    0xC5            Color is the same as the foreground color.
    kByDgnIndex    0xC7            Color is specified by an index of a .dgn color table.
    kNone          0xC8            Color is absent (object is clear).
    </table>

    An entity does not have a color from the time it is first instantiated until
    it is assigned one or added to a database.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmEntityColor.op_Inequality(OdCmEntityColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Compares two entity color objects as integer values, and returns true when
    their values are not equal or false when their values are equal.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_integer.html">Color Functionality as an Integer-value</exref></member>
        <member name="M:OdCmEntityColor.op_Equality(OdCmEntityColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Compares two entity color objects as integer values, and returns true when
    their values are equal or false when their values are not equal.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref><exref target="https://docs.opendesign.com/td/cm_color_integer.html">Color Functionality as an Integer-value</exref></member>
        <member name="M:OdCmEntityColor.op_Assign(OdCmEntityColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Copies an entity color object specified on the right of the operator to the entity color
    object specified on the left.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_sample_entity.html">Example of Working with the Entity Color</exref></member>
        <member name="M:OdCmEntityColor.#ctor(System.Byte,System.Byte,System.Byte)">
\details
    Creates an entity color object and sets the red, green and blue color
    components and the color method to byColor for the newly created entity
    color object.

    \param red   [in] Red component.
    \param green [in] Green component.
    \param blue  [in] Blue component.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_RGB.html">Color Functionality as an RGB-value</exref></member>
        <member name="M:OdCmEntityColor.#ctor(OdCmEntityColor.ColorMethod)">
\details
    Creates an entity color object and sets the specified color method for the
    newly created entity color object.

    \param colorMethod [in]  Color method.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="M:OdCmEntityColor.#ctor(OdCmEntityColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Creates a copy of an existing entity color object.

    \param color [in]  The entity color object to be copied.

</member>
        <member name="M:OdCmEntityColor.#ctor">
\details
    Creates an entity color object with default properties.

    \remarks
    Default ColorMethod is kByColor.

</member>
        <member name="D:OdCmEntityColor.RGBM">
\details
    Represents the combined value of the color and color method.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="T:OdCmEntityColor.ACIcolorMethod">
\details
    Represents color indices for the ACI color method.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref><exref target="https://docs.opendesign.com/td/cm_color_index.html">Color Functionality as an ACI-value</exref></member>
        <member name="F:kNone">
No color.
</member>
        <member name="F:kByDgnIndex">
Color specified by an index of a .dgn color table.
</member>
        <member name="F:kForeground">
Editor foreground color.
</member>
        <member name="F:kByPen">
Color specified by an index of a pen color table.
</member>
        <member name="F:kByACI">
Color specified by an index (ACI) of a color palette.
</member>
        <member name="F:kByColor">
Color specified by an RGB value.
</member>
        <member name="F:kByBlock">
Color of the block reference in which it is contained.

Linetype is inherited by block definition. 
</member>
        <member name="F:kByLayer">
Color of the layer on which it resides.

Linetype is inherited by layer. 
</member>
        <member name="T:OdCmEntityColor.ColorMethod">
\details
    Represents the color method.

    \sa
    <exref target="https://docs.opendesign.com/td/cm_color_method.html">Methods of the Color Definition</exref></member>
        <member name="T:OdCmEntityColor.Color">
\details
    Represents the RGB color components.

</member>
        <member name="M:OdGiSubEntityTraits.setupForEntity">
\details
    Retrieves the set of SubEntityHints flags which can be used to provide more flexible tuning of
    subSetAttributes traits processing.
    
    \returns
    SubEntityHints flags as the OdUInt32 value.

</member>
        <member name="M:OdGiSubEntityTraits.popPaletteOverride">
\details
    Pop palette override from palette overrides stack.

</member>
        <member name="M:OdGiSubEntityTraits.pushPaletteOverride(OdGiPalette!System.Runtime.CompilerServices.IsConst*)">
\details
    Push palette override into palette overrides stack.
    \param pOverride [in]  New palette override.
    \returns Returns true in case if palette overrides supported by underlying vectorization pipeline.

</member>
        <member name="M:OdGiSubEntityTraits.popLineweightOverride">
\details
    Pops lineweight scale and style override from lineweight overrides stack.

</member>
        <member name="M:OdGiSubEntityTraits.pushLineweightOverride(OdGiLineweightOverride!System.Runtime.CompilerServices.IsConst*)">
\details
    Pushes lineweight scale and style override into lineweight overrides stack.
    \param pOverride [in]  New lineweight override.
    \returns
    true in case if lineweight overrides supported by underlying vectorization pipeline.

</member>
        <member name="M:OdGiSubEntityTraits.auxData">
\details
    Retrieves pointer to auxiliary data context.
    
    \returns
    smart pointer to the auxiliary data context object.

</member>
        <member name="M:OdGiSubEntityTraits.setAuxData(OdSmartPtr&lt;OdGiAuxiliaryData&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Sets pointer to auxiliary data context.

  \param pAuxData [in]  pointer to auxiliary data context.

</member>
        <member name="M:OdGiSubEntityTraits.fill">
\details
    Retrieves boundary filling parameters.
    
    \returns
    pointer to the instance of the OdGiFill class.

</member>
        <member name="M:OdGiSubEntityTraits.setFill(OdGiFill!System.Runtime.CompilerServices.IsConst*)">
\details
    Sets boundary filling.

    \param pFill [in]  Boundary filling parameters.

</member>
        <member name="M:OdGiSubEntityTraits.lineStyleModifiers">
\details
    Retrieves pointer to the current Dgn Line Style modifiers structure.
    
    \returns
    pointer to the OdGiDgLinetypeModifiers.

</member>
        <member name="M:OdGiSubEntityTraits.setLineStyleModifiers(OdGiDgLinetypeModifiers!System.Runtime.CompilerServices.IsConst*)">
\details
    Sets Dgn Line Style modifiers.

    \param pLSMod [in]  Pointer to structure with Dgn Line Style modifiers.

</member>
        <member name="M:OdGiSubEntityTraits.secondaryTrueColor">
\details
    Retrieves the current secondary color.
    
    \returns
    Secondary color as an instance of the OdCmEntityColor class.

</member>
        <member name="M:OdGiSubEntityTraits.setSecondaryTrueColor(OdCmEntityColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets the current secondary color from an OdCmEntityColor instance.
    
    \param color [in]  OdCmEntityColor object.

</member>
        <member name="M:OdGiSubEntityTraits.selectionFlags">
\details
    Retrieves the current SelectionFlags.
    
    \returns
    One of the SelectionFlags enumeration values.

</member>
        <member name="M:OdGiSubEntityTraits.lockFlags">
\details
    Retrieves the current LockFlags bitmask.
    
    \returns
    Lock bit flags as the OdUInt32 value.

</member>
        <member name="M:OdGiSubEntityTraits.drawFlags">
\details
    Retrieves the current DrawFlags bitmask.
    
    \returns
    Draw bit flags as the OdUInt32 value.

</member>
        <member name="M:OdGiSubEntityTraits.transparency">
\details
    Retrieves the current transparency.
    
    \returns
    Transparency as an instance of the OdCmTransparency class.
    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_alpha.html">Transparency Functionality as an Alpha-value</exref>
    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_integer.html">Transparency Functionality as an Integer-value</exref></member>
        <member name="M:OdGiSubEntityTraits.plotStyleNameId">
\details
    Retrieves object ID of the the plot style name.
    
    \returns
    Pointer to the OdDbStub that represents a plot style name identifier.

</member>
        <member name="M:OdGiSubEntityTraits.plotStyleNameType">
\details
    Retrieves the current PlotStyleName type.
    
    \returns
    One of the following values:
    
    <table>
    Name                           Value                         
    kPlotStyleNameByLayer          0
    kPlotStyleNameByBlock          1
    kPlotStyleNameIsDictDefault    2
    kPlotStyleNameById             3
    </table></member>
        <member name="M:OdGiSubEntityTraits.thickness">
\details
    Retrieves the current thickness.
    
    \returns
    Current thickness as a value of the double type.

</member>
        <member name="M:OdGiSubEntityTraits.lineTypeScale">
\details
    Retrieves the current linetype scale.
    
    \returns
    Linetype scale as a value of the double type.
    \sa
    <exref target="https://docs.opendesign.com/td/db_linetype_properties.html">Specific Properties of Linetypes</exref></member>
        <member name="M:OdGiSubEntityTraits.fillPlane(OdGeVector3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Retrieves the normal to the current fill plane.
    
    \param normal [out]  Receives the normal.
    
    \returns
    false in the current implementation.
    
    \remarks
    As implemented, this function does nothing but return false.
    It will be fully implemented in a future release.

</member>
        <member name="M:OdGiSubEntityTraits.fillType">
\details
    Retrieves the current fill type.
      
    \returns
    One of the following values:
    
    <table>
    Name              Value   Description
    kOdGiFillAlways   1       Fill closed graphic primitives.
    kOdGiFillNever    2       Don't fill closed graphic primitives.
    </table>
       
    Closed graphic primitives consist of the following:
    * arcs with (OdGiArcType == kOdGiArcSector) || (OdGiArcType == kOdGiArcChord) 
    * circles 
    * meshes 
    * polygons 
    * shells 

</member>
        <member name="M:OdGiSubEntityTraits.lineType">
\details
      Retrieves the current linetype.
      
    \returns
    Pointer to the OdDbStub that represents linetype identifier.
    \sa
    <exref target="https://docs.opendesign.com/td/db_linetype.html">Working with Linetypes</exref></member>
        <member name="M:OdGiSubEntityTraits.trueColor">
\details
    Retrieves the current color.
    
    \returns
    Current color as an OdCmEntityColor instance.
    
    \returns
    Color index as OdUInt16 value.
    \sa
    <exref target="https://docs.opendesign.com/td/cm.html">Working with Colors</exref></member>
        <member name="M:OdGiSubEntityTraits.color">
\details
    Retrieves the current color index (ACI).
    
    \returns
    Color index as OdUInt16 value.
    
    \remarks
    color() returns one of the following:
    
    <table>
    Name              Value   Description
    kACIbyBlock       0       ByBlock.
    kACIforeground    7       Foreground color.
    kACIbyLayer       256     ByLayer. 
    kACIRed           1       Red. 
    kACIYellow        2       Yellow. 
    kACIGreen         3       Green. 
    kACICyan          4       Cyan. 
    kACIBlue          5       Blue. 
    kACIMagenta       6       Magenta. 
    ..                8-255   Defined by AcadPalette.h
    </table>
    
    \sa
    <exref target="https://docs.opendesign.com/td/cm.html">Working with Colors</exref></member>
        <member name="M:OdGiSubEntityTraits.setSelectionFlags(OdGiSubEntityTraits.SelectionFlags)">
\details
    Sets the selection flags.
    
    \param selectionFlags [in]  Input SelectionFlags.

</member>
        <member name="M:OdGiSubEntityTraits.setLockFlags(System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
    Sets the lock flags.
    
    \param lockFlags [in]  Input bitmask with LockFlags.

</member>
        <member name="M:OdGiSubEntityTraits.setDrawFlags(System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
    Sets the drawing flags.
    
    \param drawFlags [in]  Input bitmask with DrawFlags.

</member>
        <member name="M:OdGiSubEntityTraits.setTransparency(OdCmTransparency!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets the current transparency.
    
    \param transparency [in]  OdCmTransparency object.
    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_alpha.html">Transparency Functionality as an Alpha-value</exref>
    \sa
    <exref target="https://docs.opendesign.com/td/cm_transparency_integer.html">Transparency Functionality as an Integer-value</exref></member>
        <member name="M:OdGiSubEntityTraits.setPlotStyleName(OdDb.PlotStyleNameType,OdDbStub*)">
\details
    Sets the current PlotStyleName.

    \param plotStyleNameType [in]  Plot Style Name Type.
    \param plotStyleNameId [in]  Object ID of the Plot Style Name.
    
    \remarks
    plotStyleNameId is used only when plotStyleNameType == kPlotStyleNameById.
    
    plotStyleNameType must be one of the following:
    
    <table>
    Name                           Value                         
    kPlotStyleNameByLayer          0
    kPlotStyleNameByBlock          1
    kPlotStyleNameIsDictDefault    2
    kPlotStyleNameById             3
    </table></member>
        <member name="M:OdGiSubEntityTraits.setThickness(System.Double)">
\details
    Sets the current thickness.
    \param thickness [in]  Thickness.

</member>
        <member name="M:OdGiSubEntityTraits.setLineTypeScale(System.Double)">
\details
    Sets the current linetype scale.
    \param lineTypeScale [in]  Linetype scale factor.
    \sa
    <exref target="https://docs.opendesign.com/td/db_linetype_properties.html">Specific Properties of Linetypes</exref></member>
        <member name="M:OdGiSubEntityTraits.setFillPlane(OdGeVector3d!System.Runtime.CompilerServices.IsConst*)">
\details
    Sets the current fill plane.
    
    \param pNormal [in]  Pointer to the normal to the plane.
    
    \remarks
    As implemented, this function does nothing but return.
    It will be fully implemented in a future release.

</member>
        <member name="M:OdGiSubEntityTraits.setFillType(OdGiFillType)">
\details
    Sets the current fill type.
    \param fillType [in]  Fill type.
    
    \remarks
    fillType must be one of the following:
    
    <table>
    Name              Value   Description
    kOdGiFillAlways   1       Fill closed graphic primitives.
    kOdGiFillNever    2       Don't fill closed graphic primitives.
    </table>
       
    Closed graphic primitives consist of the following:
    * arcs with (OdGiArcType == kOdGiArcSector) || (OdGiArcType == kOdGiArcChord) 
    * circles 
    * meshes 
    * polygons 
    * shells 

</member>
        <member name="M:OdGiSubEntityTraits.setSelectionMarker(System.Int64)">
\details
    Sets the current selection marker.
    \param marker [in]  Selection marker.

</member>
        <member name="M:OdGiSubEntityTraits.setLineType(OdDbStub*)">
\details
    Sets the current linetype.
    \param lineTypeId [in]  Object ID of the LinetypeTableRecord.  
    \sa
    <exref target="https://docs.opendesign.com/td/db_linetype.html">Working with Linetypes</exref></member>
        <member name="M:OdGiSubEntityTraits.setTrueColor(OdCmEntityColor!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Sets the current color from an OdCmEntityColor instance.
    
    \param color [in]  OdCmEntityColor object.
    \sa
    <exref target="https://docs.opendesign.com/td/cm.html">Working with Colors</exref></member>
        <member name="M:OdGiSubEntityTraits.setColor(System.UInt16)">
\details
    Sets the current color index (ACI).

    \param color [in]  Color index.
    
    \remarks
    color must be one of the following:
    
    <table>
    Name              Value   Description
    kACIbyBlock       0       ByBlock.
    kACIforeground    7       Foreground color.
    kACIbyLayer       256     ByLayer. 
    kACIRed           1       Red. 
    kACIYellow        2       Yellow. 
    kACIGreen         3       Green. 
    kACICyan          4       Cyan. 
    kACIBlue          5       Blue. 
    kACIMagenta       6       Magenta. 
    ..                8-255   Defined by AcadPalette.h
    </table>
    \sa
    <exref target="https://docs.opendesign.com/td/cm.html">Working with Colors</exref></member>
        <member name="T:OdGiSubEntityTraits.SubEntityHints">
\details
    Represents flags that hint which attributes to set.

</member>
        <member name="T:OdGiSubEntityTraits.SelectionFlags">
\details
    Represents selection flags.

</member>
        <member name="T:OdGiSubEntityTraits.ShadowFlags">
\details
    Represents shadow flags.

</member>
        <member name="T:OdGiSubEntityTraits.LockFlags">
\details
    Represents bitmask lock flags.

</member>
        <member name="T:OdGiSubEntityTraits.DrawFlags">
\details
    Represents valid bitmasks that are passed to the setDrawFlags() method calls.

</member>
        <member name="M:OdGiAuxiliaryData.setLevelOverrides(OdSmartPtr&lt;OdGiLayerOverrides&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
     Sets layer overrides.
    
    \param pLevelOverrides [in]  Smart pointer to layer overrides.

</member>
        <member name="M:OdGiAuxiliaryData.getLevelOverrides">
\details
     Retrieves a smart pointer to layer overrides.
    
    \returns
    a smart pointer to layer overrides.

</member>
        <member name="M:OdGiLayerOverrides.getLayerOverride(OdDbStub*)">
\details
     Retrieves a layer override.
    
    \param idNativeLayer [in]  Pointer to an identifier of a native layer.
    
    \returns
    pointer to the instance of the OdDbStub that represent layer override.

</member>
        <member name="D:OdGeDoubleArray">
\details
    This template class is a specialization of the OdArray class double objects.

</member>
        <member name="D:OdIntArray">
\details
    This template class is a specialization of the OdArray class for int objects.

</member>
        <member name="M:OdRxMemberOverrule.removeOverrule(OdRxMember*,OdRxMemberOverrule*)">
\details
    Unregister an overruling.

    \param pOverruledSubject [in] Overruled member.
    \param pOverrule         [in] Overrule.

    \returns
    eOk if operation succeded.

    \remarks
    Not implemented yet.

</member>
        <member name="M:OdRxMemberOverrule.addOverrule(OdRxMember*,OdRxMemberOverrule*,System.Boolean)">
\details
    Register a new overruling.

    \param pOverruledSubject [in] Overruled member.
    \param pOverrule         [in] Overrule.
    \param bAddAtLast        [in] If true the overrule is added last. Optional.

    \returns
    eOk if operation succeded.

    \remarks
    Not implemented yet.

</member>
        <member name="M:OdRxMemberQueryEngine.removeReactor(OdRxMemberReactor*)">
\details
    Unregister a reactor.

    \param pReactor [in] Reactor to be removed.

</member>
        <member name="M:OdRxMemberQueryEngine.addReactor(OdRxMemberReactor*)">
\details
    Register a new reactor.

    \param pReactor [in] Reactor to be registered.

</member>
        <member name="M:OdRxMemberQueryEngine.removeFacetProvider(OdRxFacetProvider*)">
\details
    Unregister an extension provider.

    \param pProvider [in] Facet provider to be removed.

</member>
        <member name="M:OdRxMemberQueryEngine.addFacetProvider(OdRxFacetProvider*)">
\details
    Register a new facet provider (to provide extension classes with additional
    members).

    \param pProvider [in] Facet provider to be registered.

</member>
        <member name="M:OdRxMemberQueryEngine.promotingContext">
\details
    Reference to the default promoting query context.
    Handles collecting members in a list, but unlike the default, this one
    includes children (sub-properties) in the list, instead of parents.
    For example OdDbLine property "EndPoint" would be replaced by "EndPoint/X",
    "EndPoint/Y", "EndPoint/Z" if queried using this context.

    \returns
    Promoting query context.

</member>
        <member name="M:OdRxMemberQueryEngine.defaultContext">
\details
    Reference to the default query context.
    Query context handles collecting members in a list.

    \returns
    Query context.

</member>
        <member name="M:OdRxMemberQueryEngine.newMemberIterator(OdRxObject!System.Runtime.CompilerServices.IsConst*,OdRxMemberQueryContext!System.Runtime.CompilerServices.IsConst*)">
\details
    Enumerates all the properties of the object, uses defaultContext() if no
    context is passed.

    \param pO       [in] Object to enumerate the properties of.
    \param pContext [in] Context. Optional.

    \returns
    Pointer to the iterator of the enumerated properties.

</member>
        <member name="M:OdRxMemberQueryEngine.find(OdRxObject!System.Runtime.CompilerServices.IsConst*,System.UInt16!System.Runtime.CompilerServices.IsConst*,OdRxMemberQueryContext!System.Runtime.CompilerServices.IsConst*,System.Boolean)">
\details
    Finds a member by name, uses defaultContext() if no context is passed.

    \param pO           [in] Object to search the member in.
    \param name         [in] Name of the member to be found.
    \param pContext     [in] Context. Optional.
    \param bQueryFacets [in] Flag determines if the function will query members
                             added dynamically by facet providers. Default value
                             is true.

    \returns
    Pointer to found member.

</member>
        <member name="M:OdRxMemberQueryEngine.theEngine">
\details
    This singleton object is the main access point to the member engine
    services.

    \returns
    The member engine services access point object.

</member>
        <member name="M:OdRxMemberReactor.goodbye(OdRxMember!System.Runtime.CompilerServices.IsConst*)">
\details
    Called when a member is removed from the owner (OdRxMember::deleteMember).

</member>
        <member name="M:OdRxMemberReactor.Dispose">
\details
    Destructor for objects of the OdRxMemberReactor class.

</member>
        <member name="D:OdRxFacetProviderPtr">
\details
  This template class is a specialization of the OdSmartPtr class for
  OdRxFacetProvider object pointers.

</member>
        <member name="M:OdRxFacetProvider.getFacets(OdRxObject!System.Runtime.CompilerServices.IsConst*,OdRxMemberQueryContext!System.Runtime.CompilerServices.IsConst*,OdArray&lt;OdSmartPtr&lt;OdRxClass&gt;,OdObjectsAllocator&lt;OdSmartPtr&lt;OdRxClass&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    This method is called every time when OdRxMemberQueryEngine::find or
    OdRxMemberQueryEngine::newMemberIterator is called.
    Facet is an extension class which is used only to get a list of members.
    Facet provider may add different facets depending on context and object.

    \param pO       [in] Object to get facets of.
    \param pContext [in] Context.
    \param facets  [out] Array of facets.

</member>
        <member name="M:OdRxMemberQueryContext.find(OdArray&lt;OdSmartPtr&lt;OdRxClass&gt;,OdObjectsAllocator&lt;OdSmartPtr&lt;OdRxClass&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt16!System.Runtime.CompilerServices.IsConst*)">
\details
    Gets the pointer to the member of the class by name.

    \param facets [in] Array of objects.
    \param name   [in] The pointer to the name of member to be found.

    \returns
    Pointer to the member if it was found; NULL otherwise.

</member>
        <member name="M:OdRxMemberQueryContext.newMemberIterator(OdArray&lt;OdSmartPtr&lt;OdRxClass&gt;,OdObjectsAllocator&lt;OdSmartPtr&lt;OdRxClass&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Builds an iterator listing all the members of these classes (optionally
    including members of parents and children of members).
    Parameters are called "facets", because they can include "extension"
    classes.

    \param facets [in] Array of objects.

    \returns
    Pointer to the iterator of members of specified objects.

</member>
        <member name="D:OdRxMemberIteratorPtr">
\details
  This template class is a specialization of the OdSharedPtr class for
  OdRxMemberIterator object pointers.

</member>
        <member name="M:OdRxMemberIterator.size">
\details
    Returns the number of iterated objects.

    \returns the size of the collection by which iteration is performed.

</member>
        <member name="M:OdRxMemberIterator.find(System.UInt16!System.Runtime.CompilerServices.IsConst*)">
\details
    Iterates the list until member with that name is found (otherwise returns
    NULL).

    \param name [in] Name of the member to be found.

    \returns
    Pointer to the member if it was found; NULL otherwise.

</member>
        <member name="M:OdRxMemberIterator.current">
\details
    Returns the member currently being pointed at by the iterator.

    \returns
    Member, currently being pointed at.

</member>
        <member name="M:OdRxMemberIterator.next">
\details
    Step to the next member.

    \returns
    True if the iteration succeded; false otherwise.

</member>
        <member name="M:OdRxMemberIterator.done">
\details
    Returns true if the iteration is finished.

    \returns
    True if the traversal by this iterator object is complete; false otherwise.

</member>
        <member name="M:OdRxMemberIterator.Dispose">
\details
    Destructor for objects of the OdRxMemberIterator class.

</member>
        <member name="M:OdRxMemberCollectionBuilder.owner">
\details
    The object that members are being added to.

    \returns
    Owner object.

</member>
        <member name="M:OdRxMemberCollectionBuilder.add(OdRxMember*)">
\details
    Adds specified member to the class member collection.

    \param member [in] Member to be added.

</member>
        <member name="M:OdRxMemberCollection.getAt(System.Int32)">
\details
    Returns the member at the specified index.

    \param index [in] Index of the member to be got.

    \returns
    Member at the specified index.

</member>
        <member name="M:OdRxMemberCollection.count">
\details
    Returns the number of members in the collection.

    \returns
    Number of members.

</member>
        <member name="M:OdRxMemberCollection.Dispose">
\details
    Destructor for objects of the OdRxMemberCollection class.

</member>
        <member name="M:OdRxEnumTag.subAlternateLocalName">
\details
    Overloaded implementation of alternateLocalName() function. Should use OdRxAlternateLocalizedNameAttribute by default

</member>
        <member name="M:OdRxEnumTag.alternateLocalName">
\details
    This function queries OdRxAlternateLocalizedNameAttribute to retrieve
    the alternative local name.

    \returns
    Alternate local name.

</member>
        <member name="M:OdRxEnumTag.value">
\details
    Value with the element of the enumeration, described by this tag.

    \returns
    Value, described by this tag.

</member>
        <member name="M:OdRxEnumTag.createObject(System.UInt16!System.Runtime.CompilerServices.IsConst*,OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Creates a new enumeration member descriptor.

    \param name  [in] Name of the enumeration item.
    \param value [in] Value, containing the underlying enumeration item.
    \param owner [in] Owner of the enumeration item (OdRxEnumType).

    \returns
    Pointer to the created enumeration member descriptor.

</member>
        <member name="D:OdRxEnumTagPtr">
\details
  This template class is a specialization of the OdSmartPtr class for
  OdRxEnumTag object pointers.

</member>
        <member name="M:OdRxMember.init(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxValueType!System.Runtime.CompilerServices.IsConst*,OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Initialization method used by descendants to assign unlocalized name, type
    and owner of this member.

</member>
        <member name="M:OdRxMember.subChildrenEx(OdArray&lt;OdSmartPtr&lt;OdRxMember&gt;,OdObjectsAllocator&lt;OdSmartPtr&lt;OdRxMember&gt;&gt;&gt;**!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    subChildrenEx allows adding properties in bulk. pChildren array is managed
    by the function itself.

</member>
        <member name="M:OdRxMember.subChildren(OdArray&lt;OdSmartPtr&lt;OdRxMember&gt;,OdObjectsAllocator&lt;OdSmartPtr&lt;OdRxMember&gt;&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    First call to children calls subChildren, if it returned eNotApplicable then
    subChildrenEx is called. subChildren() is expected to adds members children
    array.

</member>
        <member name="M:OdRxMember.subLocalName">
\details
    Descendants may overload localized name obtaining method.

</member>
        <member name="M:OdRxMember.deleteMember(OdRxMember!System.Runtime.CompilerServices.IsConst*)">
\details
    This method should be used to delete properties while unloading. It removes
    this member from the owner, and fires "goodbye" reactors registered with the
    OdRxMemberQueryEngine.

    \param pMember [in] Property to be removed.

</member>
        <member name="M:OdRxMember.children">
\details
    Some properties may have child properties, e.g. "EndPoint" property of
    OdDbLine has subproperties "EndPoint/X", "EndPoint/Y", "EndPoint/Z".

    \returns
    Array of subproperties (child properties).

</member>
        <member name="M:OdRxMember.owner">
\details
    For the usual properties owner is the OdRxClass they are attached to.
    For subproperties owner is the main property.

    \returns
    Owner of the property.

</member>
        <member name="M:OdRxMember.attributes">
\details
    Attributes are used on some properties to modify their behaviour. E.g.
    OdRxLocalizedNameAttribute defines localName().
    See RxAttributes.h for more information.

    \returns
    Collection of property attributes.


\details
    Attributes are used on some properties to modify their behaviour. E.g.
    OdRxLocalizedNameAttribute defines localName().
    See RxAttributes.h for more information.

    \returns
    Collection of property attributes.

</member>
        <member name="M:OdRxMember.type">
\details
    Property value type.

    \returns
    Property value type.

</member>
        <member name="M:OdRxMember.localName">
\details
    Localized name (can be loaded from resources via OdRxLocalizedNameAttribute::getLocalizedName).

    \returns
    Localized name of the property.

</member>
        <member name="M:OdRxMember.name">
\details
    Static unlocalized name of the property.

    \returns
    Name of the property.

</member>
        <member name="D:OdRxMemberPtr">
\details
  This template class is a specialization of the OdSmartPtr class for
  OdRxMember object pointers.

</member>
        <member name="D:OdRxSystemServicesPtr">
\details
  This template class is a specialization of the OdSmartPtr class for OdRxSystemServices object pointers.


\details
  This template class is a specialization of the OdSmartPtr class for OdRxSystemServices pointers.

</member>
        <member name="M:OdRxSystemServices.getTempFileName">
\details
  Returns the unique name for temporary file.

</member>
        <member name="M:OdRxSystemServices.getUserName(Oda.UserNameFormat)">
\details
  Returns user name in the requested format

</member>
        <member name="M:OdRxSystemServices.getTemporaryPath">
\details
  Returns the path to the temporary files folder.

</member>
        <member name="M:OdRxSystemServices.setEnvVar(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Set environment variable value.

    \param varName [in]  Environment variable name.
    \param newValue [in]  The new value of the environment variable.

</member>
        <member name="M:OdRxSystemServices.getEnvVar(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Get environment variable value.

    \param varName [in]  Environment variable name.
    \param value [out]  Environment variable value.

</member>
        <member name="M:OdRxSystemServices.initModelerLibrary(OdRxDictionary*)">
\details
  Inits/Uninits the modeler library (platform-dependent) module.

  \returns
  Should return eOk, if (un)initialization is implemented inside (un)initModelerLibrary.
  Or eNotImplemented if default module (un)initialization required.

  \remarks
   Used for custom initialization/uninitialization of Spatial ACIS library.

</member>
        <member name="M:OdRxSystemServices.loadModuleLib(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
\details
    Loads the specified physical (platform-dependent) module.

    \returns
    Returns the abstract (platform independent) module object,    
    which represents module functionality in Teigha.

    \param moduleFileName [in]  Module filename to load.
    \param silent [in]  If true, no load status message will be printed.

</member>
        <member name="M:OdRxSystemServices.warning(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Displays in some manner the specified warning message.
    
    \param warnVisGroup [in]  Group of warning message visibility (always visible if it is an empty).
    \param message [in]  Warning message.

</member>
        <member name="M:OdRxSystemServices.warning(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Displays in some manner the specified warning message.
    
    \param message [in]  Warning message.

</member>
        <member name="M:OdRxSystemServices.findModule(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the filename associated with the specified application name.

    \param applicationName [in]  TX application name.

</member>
        <member name="M:OdRxSystemServices.unloadModule(OdRxModule*)">
\details
    Unloads the specified physical (platform-dependent) module.

    \param pModuleObj [in]  Pointer to the module object to be unloaded.

</member>
        <member name="M:OdRxSystemServices.loadModule(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
\details
    Loads the specified physical (platform-dependent) module.
    
    \remarks
    Appends the appropriate version suffix onto the supplied module name.
    Returns the abstract (platform independent) module object,    
    which represents module functionality in Teigha.

    \param moduleFileName [in]  Module filename to load.
    \param silent [in]  If true, no load status message will be printed.

</member>
        <member name="M:OdRxSystemServices.createOdGUID">
\details
    Returns a newly generated Globally Unique IDentifier (GUID) for this SystemServices object.

</member>
        <member name="M:OdRxSystemServices.createGuid">
\details
    Returns a string representation for newly generated Globally Unique IDentifier (GUID) for this SystemServices object.

</member>
        <member name="M:OdRxSystemServices.systemCodePage">
\details
    Returns the system code page.

</member>
        <member name="M:OdRxSystemServices.formatMsg(System.UInt32,BTEllipsis)">
\details
    Assigns a value to this String object using a printf-style format string and arguments.
    \param formatID [in]  String resource identifier containing the format string. 
    \returns
    Returns a reference to this String Object.

</member>
        <member name="M:OdRxSystemServices.formatMessage(System.UInt32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**)">
\details
    Returns a message string formatted using a vsprintf-style format string and argument list.
    \param formatID [in]  String resource identifier containing the format string. 
    \param argList [in]  Argument list.   

</member>
        <member name="M:OdRxSystemServices.getFileSize(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the size of the specified file.
    \param filename [in]  Filename.
    
    \remarks
    On most platforms, this function will be implemented with the stat function (stat::st_size).

</member>
        <member name="M:OdRxSystemServices.getFileMTime(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the modification time of the specified file.
    \param filename [in]  Filename.
    
    \remarks
    On most platforms, this function will be implemented with the stat function (stat::st_mtime).

</member>
        <member name="M:OdRxSystemServices.getFileCTime(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the creation time of the specified file.
    \param filename [in]  Filename.
    
    \remarks
    On most platforms, this function will be implemented with the stat function (stat::st_ctime).

</member>
        <member name="M:OdRxSystemServices.accessFile(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
\details
    Returns true if and only if the specified file can be accessed in the specified mode.

    \param filename [in]  Filename.
    \param accessMode [in]  Access mode.
    
    \remarks
    accessMode must be a combination of one or more of the following:
    
    <table>
    Name                Value          Description
    ..                  0              File exists.
    Oda::kFileRead      0x80000000     Read access.
    Oda::kFileWrite     0x40000000     Write access.
    </table></member>
        <member name="M:OdRxSystemServices.createFile(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Oda.FileAccessMode,Oda.FileShareMode,Oda.FileCreationDisposition)">
\details
    Creates and/or opens the specified file.
    \param filename [in]  Filename.
    \param accessMode [in]  Access mode.
    \param shareMode [in]  Share mode.
    \param creationDisposition [in]  Creation disposition.
    
    \returns
    Returns a SmartPointer to an OdStreamBuf object for the file. 
    \remarks
    accessMode must be a combination of one or more of the following:
    
    <table>
    Name                Value          Description
    Oda::kFileRead      0x80000000     Read access.
    Oda::kFileWrite     0x40000000     Write access.
    </table>
    
    shareMode must be one of the following:
    
    <table>
    Name                         Value       Description
    Oda::kShareDenyReadWrite     0x10        deny read/write mode
    Oda::kShareDenyWrite         0x20        deny write mode
    Oda::kShareDenyRead          0x30        deny read mode
    Oda::kShareDenyNo            0x40        deny none mode
    </table>

    Creation disposition must be one of the following:
    
    <table>
    Name                         Value     Description
    Oda::kCreateNew              1         Creates a new file; fails if the specified file already exists.
    Oda::kCreateAlways           2         Creates a new file; overwrites any existing file.
    Oda::kOpenExisting           3         Opens the file; fails if the file does not exist.
    Oda::kOpenAlways             4         Opens the file; creates the file if it does not exist.
    Oda::kTruncateExisting       5         Truncates the file; fails if the file does not exist. The file must be open at least Oda::kFileWrite.
    </table></member>
        <member name="M:OdError_FileWriteError.#ctor(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\param filename [in]  Filename.

</member>
        <member name="M:OdError_CantOpenFile.#ctor(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\param filename [in]  Filename.

</member>
        <member name="M:OdError_FileNotFound.#ctor(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\param filename [in]  Filename.

</member>
        <member name="M:OdError_FileException.getFileName">
\details
    Returns the filename of this Error object.

</member>
        <member name="M:OdError_FileException.#ctor(OdResult,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\param code [in]  Result code.
    \param filename [in]  Filename.

</member>
        <member name="D:OdStreamBufPtr">
\details
    This template class is a specialization of the OdSmartPtr class for OdStreamBuf object pointers.

</member>
        <member name="M:OdStreamBuf.getShareMode">
\details
    Returns the share mode for this StreamBuf object.
    
    \remarks
    getShareMode returns one of the following:
    
    <table>
    Name                         Value       Description
    Oda::kShareDenyReadWrite     0x10        deny read/write mode
    Oda::kShareDenyWrite         0x20        deny write mode
    Oda::kShareDenyRead          0x30        deny read mode
    Oda::kShareDenyNo            0x40        deny none mode
    </table></member>
        <member name="M:OdStreamBuf.copyDataTo(OdStreamBuf*,System.UInt64,System.UInt64)">
\details
    Copies the specified bytes from this StreamBuf object to the specified StreamBuf object.
    \param pDestination [in]  Pointer to the StreamBuf object to receive the data.
    \param sourceStart [in]  Starting position of the file pointer of this StreamBuf object.
    \param sourceEnd [in]  Ending position of the file pointer of this StreamBuf object.
    \remarks
    Bytes are copied from sourceStart to sourceEnd inclusive.

</member>
        <member name="M:OdStreamBuf.putBytes(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
    Writes the specified number of bytes, starting at the current position of the file pointer
    for this StreamBuf object, and increments the pointer by numBytes.
    \param buffer [in]  Character buffer.
    \param numBytes [in]  Number of bytes.

</member>
        <member name="M:OdStreamBuf.putByte(System.Byte)">
\details
    Writes the byte to the current position of the file pointer
    for this StreamBuf object, and increments the pointer.
    \param value [in]  Byte to write. 

</member>
        <member name="M:OdStreamBuf.getBytes(System.Void*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
    Returns the specified number of bytes, starting at the current position of the file pointer
    for this StreamBuf object, and increments the pointer by numBytes.
    \param buffer [in]  Character buffer.
    \param numBytes [in]  Number of bytes.

</member>
        <member name="M:OdStreamBuf.getByte">
\details
    Returns the byte at the current position of the file pointer
    for this StreamBuf object, and increments the pointer.

</member>
        <member name="M:OdStreamBuf.seek(System.Int64,OdDb.FilerSeekType)">
\details
    Moves the current position of the file pointer for
    this StreamBuf object to the specified location.

    \param offset [in]  Number of bytes.
    \param seekType [in]  Seek type.
    
    \remarks
    seekType must be one of the following:
    
    <table>
    Name                    Value       Description.
    OdDb::kSeekFromStart    SEEK_SET    Start of file.
    OdDb::kSeekFromCurrent  SEEK_CUR    Current position of file pointer.
    OdDb::kSeekFromEnd      SEEK_END    End of file.
    </table></member>
        <member name="M:OdStreamBuf.rewind">
\details
    Sets the current position of the file pointer for
    this StreamBuf object to zero.

</member>
        <member name="M:OdStreamBuf.truncate">
\details
    Sets the length of the file associated with
    this StreamBuf object to zero.

</member>
        <member name="M:OdStreamBuf.length">
\details
    Returns the length in bytes of the file associated with
    this StreamBuf object.

</member>
        <member name="M:OdStreamBuf.tell">
\details
    Returns the current position of the file pointer for
    this StreamBuf object.

</member>
        <member name="M:OdStreamBuf.isEof">
\details
    Returns true if and only if the current position of the file pointer for
    this StreamBuf object is at the end of file.

</member>
        <member name="M:OdStreamBuf.fileName">
\details
    Returns the name of the file associated with this StreamBuf object.

</member>
        <member name="D:OdRxValueTypePtr">
\details
  Smart pointer to objects of the OdRxValueType class.

</member>
        <member name="M:OdRxValueType.equalTo(System.Void!System.Runtime.CompilerServices.IsConst*,System.Void!System.Runtime.CompilerServices.IsConst*)">
\details
    Compares two values of the underlying C++ type.

    \param a [in] First value to compare.
    \param b [in] Second value to compare.

    \returns
    True if compared values are equal; false otherwise.

</member>
        <member name="M:OdRxValueType.toString(System.Void!System.Runtime.CompilerServices.IsConst*,OdRxValueType.StringFormat)">
\details
    Convert value to string.

    \param instance [in] Instance of the value to convert.
    \param format   [in] Defines the format of the resulting string.

    \returns
    Converted value.

    \remarks
    Mostly for debug purposes.

</member>
        <member name="T:OdRxValueType.StringFormat">
\details
    This enumeration defines string formats for converting values, contained in
    OdRxValue objects to strings.

</member>
        <member name="M:OdRxValueType.typePath(OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Retreives an ANSI string in format of path that elaborates the sense of
    value of the value type. Can be interpreted additionally when working with
    RxValue.

    \param instance [in] Value, the sense of which must be clarified.

    \returns
    ANSI string with clarification of value sense.

</member>
        <member name="M:OdRxValueType.fromValueType(OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxValue*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Convert value from the specified type (type of the "from" value) to this
    type.

    \param from      [in] Value of type to convert from.
    \param instance [out] Resulting value of "this" type.

    \returns
    True if conversion is possible. False otherwise.

</member>
        <member name="M:OdRxValueType.toValueType(OdRxValueType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxValue*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Convert value to the specified type from this type.

    \param vt       [in] Type to convert to.
    \param instance [in] Value of "this" type.
    \param result  [out] Resulting value of the type specified in vt.

    \returns
    True if conversion is possible. False otherwise.

</member>
        <member name="M:OdRxValueType.create">
\details
    Create new OdRxValue of this type, wrapped in OdRxBoxedValue (if you need a
    smart pointer).

    \returns
    Created OdRxBoxedValue object containing an OdRxValue object of this type.

</member>
        <member name="M:OdRxValueType.createValue">
\details
    Create a new wrapped value of this type.

    \returns
    Created wrapped value of this type.

</member>
        <member name="M:OdRxValueType.rxObjectValue">
\details
    Returns the interface, that describes OdRxObject-descendant pointers.

    \returns
    Interface, describing OdRxObject-descendant pointers. NULL for types other
    than OdRxObject-descendant pointers.

</member>
        <member name="M:OdRxValueType.reference">
\details
    Returns the interface, that describes references (handlers).

    \returns
    Interface, describing references. NULL for non-reference types.

</member>
        <member name="M:OdRxValueType.enumeration">
\details
    Returns the interface, that describes enumeration.

    \returns
    Interface, describing enumeration. NULL for non-enumeration types.

</member>
        <member name="M:OdRxValueType.nonBlittable">
\details
    Returns the interface, that handles copying/destroying values for non-POD
    types.

    \returns
    Interface, handling copying/destroying values for non-POD types. NULL for
    POD types.

</member>
        <member name="M:OdRxValueType.isAggregate">
\details
    Indicates whether the value type is SDAI aggregate data type.

    \returns
    True for SDAI aggregate data type. False for other value types.

</member>
        <member name="M:OdRxValueType.isSelect">
\details
    Indicates whether the value type is SDAI select data type.
    
    \returns
    True for SDAI select data type. False for other value types.

</member>
        <member name="M:OdRxValueType.isReference">
\details
    Indicates whether the value type is handler.

    \returns
    True for object handlers value types, like OdDbObjectId. False for other
    value types.

</member>
        <member name="M:OdRxValueType.isEnum">
\details
    Indicates whether the value type is enumeration.

    \returns
    True for the enumerations. False for other types.

</member>
        <member name="M:OdRxValueType.isBlittable">
\details
    Indicates whether the value type is blittable.

    \returns
    True for the POD types (value may be copied by memcpy). False for other types.

</member>
        <member name="M:OdRxValueType.size">
\details
    Returns the amount of memory to store the value of the type (like sizeof(T)).

    \returns
    Amount of memory to store the value of the type. (sizeof(T))

</member>
        <member name="M:OdRxValueType.op_Inequality(OdRxValueType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Negative comparison operator.

    \param rhs [in] Value type to compare with the current value type.

    \returns
    True if value types are not equal; false otherwise.

</member>
        <member name="M:OdRxValueType.op_Equality(OdRxValueType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Comparison operator.

    \param rhs [in] Value type to compare with the current value type.

    \returns
    True if value types are equal; false otherwise.

</member>
        <member name="M:OdRxValueType.Dispose">
\details
    Destructor for objects of the OdRxValueType class.

</member>
        <member name="D:OdRxValueConstructor">
\details
  Definition of the OdRxValue pseudoconstructor.

</member>
        <member name="M:IOdRxObjectValue.getRxObject(OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Return contained pointer as an OdRxObject.
    \param value [in] Value containing pointer to an OdRxObject descendant.
    \returns
    Contained pointer as an OdRxObject.

</member>
        <member name="M:IOdRxReferenceType.dereference(OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,IOdRxReferenceType.OpenMode)">
\details
    Open the object in the specified mode.

    \param value [in] Value object to open.
    \param mode  [in] Mode to open the value object in.

    \returns
    Smart pointer to opened object.

    \remarks
    Returned object will be automatically closed when the smart pointer is
    released, as usual.

</member>
        <member name="T:IOdRxReferenceType.OpenMode">
\details
    This enumeration describes access modes for referenced objects.

</member>
        <member name="M:IOdRxEnumeration.getAt(System.Int32)">
\details
    Returns the descriptor of the given enum item.

    \param index [in] Index of the item.

    \returns
    Descriptor of the given enum item.

</member>
        <member name="M:IOdRxEnumeration.count">
\details
    Returns the number of items in the enum.

    \returns
    The number of items in the enum.

</member>
        <member name="M:IOdRxNonBlittableType.destruct(System.Void!System.Runtime.CompilerServices.IsConst*)">
\details
    Called to destroy the object.

    \param instance [in] Pointer to the object.

</member>
        <member name="M:IOdRxNonBlittableType.assign(System.Void*,System.Void!System.Runtime.CompilerServices.IsConst*)">
\details
    Called to assign the object.

    \param dest   [in] Pointer to the destination object.
    \param source [in] Pointer to the source object.

</member>
        <member name="M:IOdRxNonBlittableType.construct(System.Void*,System.Void!System.Runtime.CompilerServices.IsConst*)">
\details
    Called to construct a copy of the object.

    \param dest   [in] Memory location to construct an object at.
    \param source [in] Pointer to the source object.

</member>
        <member name="M:OdGiDrawableOverrule.regenSupportFlags(OdGiDrawable!System.Runtime.CompilerServices.IsConst*)">
\details
    Overrules the regen support flags.

    \param pSubject [in]  A raw pointer to the drawable object.
    
    \returns
    0 if the drawable can be rendered only in a single threaded mode or a set of flags as OdUInt32 value.

</member>
        <member name="M:OdGiDrawableOverrule.viewportDrawLogicalFlags(OdGiDrawable!System.Runtime.CompilerServices.IsConst*,OdGiViewportDraw*)">
\details
    Overrules the OdGiDrawable::viewportDrawLogicalFlags() method and calls it in the default implementation.

    \param pSubject [in]  A raw pointer to the drawable object.
    \param vd [in]  A pointer to the Gi viewport drawable object.
    
    \returns
    setAttributes flags for the specified viewportDraw.

</member>
        <member name="M:OdGiDrawableOverrule.viewportDraw(OdGiDrawable!System.Runtime.CompilerServices.IsConst*,OdGiViewportDraw*)">
\details
    Overrules the OdGiDrawable::viewportDraw() method and calls it in the default implementation.

    \param pSubject [in]  A raw pointer to the drawable object.
    \param vd [in]  A pointer to the Gi viewport drawable object.

</member>
        <member name="M:OdGiDrawableOverrule.worldDraw(OdGiDrawable!System.Runtime.CompilerServices.IsConst*,OdGiWorldDraw*)">
\details
    Overrules the OdGiDrawable::worldDraw() method and calls it in the default implementation.

    \param pSubject [in]  A raw pointer to the drawable object.
    \param wd [in]  A pointer to the Gi world drawable object.
    
    \returns
    true if the geometric representation can be generated in a
    viewport-independent manner. 

</member>
        <member name="M:OdGiDrawableOverrule.setAttributes(OdGiDrawable!System.Runtime.CompilerServices.IsConst*,OdGiDrawableTraits*)">
\details
    Overrules the OdGiDrawable::setAttributes() method and calls it in the default implementation.

    \param pSubject [in]  A raw pointer to the drawable object.
    \param traits [in]  A pointer to the graphics traits.
    
    \returns
    0 from the default implementation of the OdGiDrawable::setAttributes() method.

</member>
        <member name="M:OdGiDrawableOverrule.#ctor">
\details
    Constructor creates an instance of this class.

</member>
        <member name="M:OdGiDrawable.regenSupportFlags">
\details
    Retrieves a set of flags that represents the multi-threaded rendering support of this entity.

    \returns
    Returns 0 if the drawable can be rendered only in a single threaded mode.
    \remarks
    The default implementation of this function returns flags defined with the OdRxClass::customFlags() method.

</member>
        <member name="M:OdGiDrawable.getGeomExtents(OdGeExtents3d*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Retrieves a WCS bounding box that represents the extents of this entity.

    \param extents [out]  Receives the WCS extents.

    \returns
    Returns eOk if successful or an appropriate error code if not.
    \remarks
    The default implementation of this function always returns eInvalidExtents. 

</member>
        <member name="M:OdGiDrawable.viewportDrawLogicalFlags(OdGiViewportDraw*)">
\details
    Retrieves the setAttributes flags for the current viewportDraw. 
    
    \param pVd [in]  Pointer to OdGiViewportDraw interface.
    
    \returns
    0 in default implementation, must return setAttributes flags for the specified viewportDraw.
    
    \remarks
    The default implementation of this function always returns 0.

</member>
        <member name="M:OdGiDrawable.gsNode">
\details
    Retrieves the OdGsCache associated with this object.
    
    \returns
    Pointer to the OdGsCache that represents cache associated with this object.

</member>
        <member name="M:OdGiDrawable.setGsNode(OdGsCache*)">
\details
    Assigns the specified OdGsCache to this object.
    
    \param pGsNode [in]  Pointer to the OdGsCache to be assigned.

</member>
        <member name="M:OdGiDrawable.id">
\details
    Retrieves the database ID of this object.

    \returns
    pointer to OdDbStub which represents a database identifier of this object.
    
    \remarks
    Returns a null pointer if this object is not persistent.

</member>
        <member name="M:OdGiDrawable.isPersistent">
\details
    Checks whether this object is persistent (stored in a database).
    
    \returns
    true this object is persistent (stored in a database), false otherwise.

</member>
        <member name="M:OdGiDrawable.viewportDraw(OdGiViewportDraw*)">
\details
    Creates a viewport-dependent geometric representation of this object.

    \remarks
    Causes OdGiDrawable to describe its geometry to the specified OdGiViewportDraw object. 

    This function is called once per viewport.

    \remarks
    By overriding this function, it is possible to have totally different images in each viewport; a schematic
    in one viewport, a layout in another.
    
    The default implementation of this function does nothing. This function can be
    overridden in custom classes.

    \param pVd [in]  Pointer to the OdGiViewportDraw interface.

</member>
        <member name="M:OdGiDrawable.worldDraw(OdGiWorldDraw*)">
\details
    Creates a viewport-independent geometric representation of this object.
    
    \returns
    Returns true if and only if the geometric representation can be generated in a
    viewport-independent manner. 

    \remarks
    A return value of false indicates that viewportDraw() must be called for this object.

    The 3D GS will call this function at least once but may cache subsequent display updates.

    Use OdGsModel::onModified() to ensure that the 3D GS will call worldDraw() for next display update.
    
    The default implementation does nothing but return true. This function can be
    overridden in custom classes.

    \param pWd [in]  Pointer to the OdGiWorldDraw interface.

</member>
        <member name="M:OdGiDrawable.setAttributes(OdGiDrawableTraits*)">
\details
    Sets the vectorization attributes of this object, and returns its attribute flags.  

    \param pTraits [in]  Pointer to OdGiDrawableTraits object from and to which the attributes are to be set.

    \remarks
    This function is called by the vectorization framework, prior to calling worldDraw() or
    viewportDraw(), to set the attributes for an object.

    \sa
    SetAttributesFlags 

</member>
        <member name="M:OdGiDrawable.drawableType">
\details
    Retrieves a type of this drawable.

    \returns
    value from the DrawableType enumeration that represents one of the drawable types.

</member>
        <member name="T:OdGiDrawable.DrawableType">
Drawable types.

</member>
        <member name="T:OdGiDrawable.SetAttributesFlags">
Attribute flags for a drawable.

</member>
        <member name="M:OdRxOverrule.hasOverrule(OdRxObject!System.Runtime.CompilerServices.IsConst*,OdRxClass*)">
\details
    Checks whether the specified overrule handles a given object and returns True if the object 
    is to be handled by overrule, or False, otherwise.

    \param pOverruleClass [in]  A raw pointer to the class description object to which the overrule applies.
    \param pSubject [in]  A raw pointer to an object to be overruled.

</member>
        <member name="M:OdRxOverrule.isOverruling">
\details
    Checks whether the overruling mechanism is enabled (true) or disabled (false).

</member>
        <member name="M:OdRxOverrule.setIsOverruling(System.Boolean)">
\details
    Enables or disables the overruling mechanism.

    \param bIsOverruling [in]  Determines whether the overruling mechanism is enabled (true) or disabled (false).

</member>
        <member name="M:OdRxOverrule.removeOverrule(OdRxClass*,OdRxOverrule*)">
\details
    Unregisters an object for the given class.
    This method returns eOk if successful.

    \param pClass [in]  A raw pointer to the class description object to which the overrule applies.
    \param pOverrule [in]  A raw pointer to an object to be overruled.

</member>
        <member name="M:OdRxOverrule.addOverrule(OdRxClass*,OdRxOverrule*,System.Boolean)">
\details
    Registers an object for a given class to be overruled.
    This method returns eOk if successful.

    \param pClass [in]  A raw pointer to the class description object to which the overrule applies.
    \param pOverrule [in]  A raw pointer to an object to be overruled.
    \param bAddAtLast [in]  Determines whether the pair should be added in the end of the overrule collection.

</member>
        <member name="M:OdRxOverrule.isApplicable(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Determines whether the overrule is applicable and returns True if the overrule can be applied,
    or False, otherwise. It is a pure virtual method that must be implemented in the derived class.

    \param pOverruledSubject [in]  A raw pointer to an object to be overruled.

</member>
        <member name="M:OdRxOverrule.Dispose">
\details
    Destructor deletes an instance of this class.

</member>
        <member name="M:odrxCreateSyncRxDictionary">
\details
   Creates a new dictionary object that can be modified from multiple threads and
   returns the smart pointer to it.

</member>
        <member name="M:odrxCreateRxDictionary">
\details
   Creates a new dictionary object that can be modified only from a single thread and
   returns the smart pointer to it.

</member>
        <member name="M:odrxServiceDictionary">
\details
   Returns the smart pointer to the Dictionary of Registered Services.

</member>
        <member name="D:OdRxDictionaryPtr">
\details
  The typified smart pointer for the dictionary object. This template class is a specialization 
   of the OdSmartPtr class for OdRxDictionary object.


\details
  This template class is a specialization of the OdSmartPtr class for OdRxDictionary object pointers. 

</member>
        <member name="D:OdRxDictionaryIteratorPtr">
\details
  The typified smart pointer for the dictionary iterator. It is the template class created by the OdSmartPtr class.

</member>
        <member name="D:OdRxIteratorPtr">
\details
  The typified smart pointer for the OdRxIterator object.

</member>
        <member name="M:OdRxIterator.object">
\details
    Returns the non-typified smart pointer to the object on which the iterator object refers. 

</member>
        <member name="M:OdRxIterator.next">
\details
    Sets the iterator object to the next element of the container.

    \remarks
    Returns true if and only if not at the end of the list.

</member>
        <member name="M:OdRxIterator.done">
\details
    Returns true if and only if the traversal by this iterator object is completed.

</member>
        <member name="D:ODRXOBJECT_CALLBACK">
\details
    This registration allows you to catch the invoking of each RxObject destructor.

</member>
        <member name="D:OdRxObjectPtrArray">
\details
    This template class is a specialization of the OdArray class template for OdRx object pointers.

</member>
        <member name="M:deleteOdRxClass(OdRxClass*)">
\details
    This external function deletes a class description instance.

    \param pClass [in]  Raw pointer to an existing class description instance.

</member>
        <member name="M:odrxCreateObject(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    This external function creates a new instance of the class specified by the argument as a string
    and returns a /non-typified smart pointer/ to it.

    \param sClassName [in]  Custom class name as a string.

</member>
        <member name="M:OdRxClass.delX(OdRxClass*)">
\details
    Deletes the Protocol Extension for the specified Protocol Extension class.

    \returns
    Returns the Protocol Extension Object.

    \param pProtocolClass [in]  Pointer to the Protocol Extension class.

    \remarks
    As currently implemented, this function does nothing but
    assert in debug mode, and return a null pointer.
    It will be fully implemented in a future *release*.

</member>
        <member name="M:OdRxClass.getX(OdRxClass!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the Protocol Extension for the specified
    Protocol extension class.

    \param pProtocolClass [in]  Pointer to the Protocol Extension class.

    \returns
    Returns a SmartPointer to the Protocol Extension.

    \remarks
    The default implementation of this object does nothing but
    assert in debug mode, and return a null pointer.
    It will be fully implemented in a future *release*.

</member>
        <member name="M:OdRxClass.addX(OdRxClass*,OdRxObject*)">
\details
    Creates the Protocol Extension for the specified OdRxClass.

    \param pProtocolClass [in]  Pointer to the Protocol Extension class.
    \param pProtocolObject [in]  Pointer to the Protocol Extension Object.

    \returns
    Returns a SmartPointer to the Protocol Extension.

    \remarks
    The default implementation of  this object does nothing but return a
    null pointer, and asserts in debug mode. It will be
    fully implemented in a future *release*.

</member>
        <member name="D:OdPseudoConstructorType">
\details
    Defines OdPseudoConstructorType as a function pointer type.
    
    \remarks
    Functions pointed to by OdPseudoConstructorType 
    take no arguments and construct instances of
    classes derived from OdRxObject;
    hence the name PseudoConstructorType.

</member>
        <member name="M:OdError.attachPreviousError(OdError!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Sets the Error object previous to this one in this Error stack.
  \param previousError [in]  Previous Error object.

</member>
        <member name="M:OdError.description">
\details
  Returns the description of this Error object.

</member>
        <member name="M:OdError.code">
\details
  Returns the OdResult code of this Error object.

</member>
        <member name="M:OdError.#ctor(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdError!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\param previousError [in]  Previous Error object.

</member>
        <member name="M:OdError.#ctor(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\param errorMessage [in]  Error message.

</member>
        <member name="M:OdError.#ctor(OdErrorContext*)">
\param pErrorContext [in]  Pointer to the ErrorContext.

</member>
        <member name="M:OdError.#ctor(OdResult)">
\param code [in]  Error code.

</member>
        <member name="M:OdRxObject.copyFrom(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
details
    Copies the contents of the specified object into this object.
    
    \param pSource [in] Pointer to the source object.
    
    \remarks
    The default implementation of this function does nothing but throw an eNotApplicable exception. 
    
    Throws:
    eNotApplicable Exception 
    
   

</member>
        <member name="M:OdRxObject.clone">
\details
    Creates a *clone* of this object, and returns a pointer to the *clone*.

</member>
        <member name="M:OdRxObject.cast(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Casts the specified raw pointer to the smart pointer.

    \param pointer [in]  Raw pointer to be cast.

</member>
        <member name="M:OdRxObject.Dispose">
\details
      The virtual destructor for this class.

</member>
        <member name="M:OdRxObject.#ctor">
\details
      Default constructor for this class.

</member>
        <member name="M:OdRxObject.new(System.UInt64)">
\details
      Protects derived OdRxObject objects from direct use of new and delete operators. 

</member>
        <member name="M:OdRxObject.op_Assign(OdRxObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
      Assignment operator prohibited.

</member>
        <member name="M:OdRxObject.#ctor(OdRxObject!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
      Constructor for this class that assigns another Rx-object.

</member>
        <member name="M:OdRxObjectPtr.op_Implicit~OdRxObject*">
\details
    Returns the raw pointer of the referenced object.
    
    \remarks
    The reference counter of the referenced object is not changed.

</member>
        <member name="M:OdRxObjectPtr.Dispose">
\details
    Destructor for the non-typified smart pointer.

    \remarks
    Decrements the reference counter of the referenced object. When the reference count reaches zero, the referenced object is deleted.

</member>
        <member name="M:OdRxObjectPtr.#ctor">
\details
    Constructors for the non-typified smart pointer.

    \param pSource [in]  Pointer to the specified object to be assigned for the new SmartPointer object.

    \remarks
    If pSourceis specified, the smart pointer is set to the address of the specified object. If pSource is not specified, the smart pointer is set to a NULL.
    
    \remarks
    If OdRxObjMod is specified, the reference counter of the specified object 
    is *not* incremented. 

</member>
        <member name="M:OdRxObjectPtr.assign(OdRxObject!System.Runtime.CompilerServices.IsConst*)">
\details
    Assigns the pointer of the specified object to the smart pointer.  
      
    \remarks
    The reference counter of the specified object is incremented.

    If this SmartPointer is currently referencing another object, that object 
    is released prior to the assignment.  

    \param pObject [in]  Pointer to the specified object to be assigned.

</member>
        <member name="M:OdRxObjectPtr.internalAddRef">
\details
    Increments the reference counter of the referenced object.

</member>
        <member name="D:AppNameChangeFuncPtr">
\details
    Callback function providing ability for custom class to alter its application name
    depending on file format version drawing is saved to.
    
    \remarks
    Effects only application name saved to file.

</member>
        <member name="M:OdBaseObjectPtr.isNull">
\details
     Returns true if and only if the smart pointer stores a NULL.

</member>
        <member name="M:OdBaseObjectPtr.get">
\details
    Returns the raw pointer to the referenced object. 
    
    \remarks
    This class maintains the reference to the referenced object. 
    The reference counter of the referenced object is not changed.

</member>
        <member name="M:OdString.freeData(OdStringData*)">
\details
    Frees the specified StringData object.
    \param pStringData [in]  Pointer to the StringData object.

</member>
        <member name="M:OdString.safeStrlen(System.UInt16!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the length of the specified string.
    \param string [in]  0 terminated string or NULL.
    \remarks
    Returns 0 if string == NULL.

</member>
        <member name="M:OdString.release">
\details
    Releases the reference to the specified StringData object.
    
    \param pStringData [in]  Pointer to the StringData object.
    
    \remarks
    If pStringData is not specified, the StringData associated with
    this String object is released.
    
    Decrements the reference count of the StringData object.
        
    When its reference count reaches zero, the StringData object is freed.

</member>
        <member name="M:OdString.copyBeforeWrite">
\details
    Assures there are no multiple references to the StringData associated with this String object. 
    
    \remarks
    If there is more than one reference to the StringData object, it is released, and
    replaced with a copy thereof 

</member>
        <member name="M:OdString.allocBuffer(System.Int32,System.Boolean)">
\details
    Allocates the specified number of characters for the character buffer of this String object.
    \param length [in]  buffer length.
    allocAlways - if true, allocates new OdStringData even for 0 length unicode buffer (for ansi string constructors)

</member>
        <member name="M:OdString.allocCopy(OdString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Int32)">
\details
    Copies the specified number of characters from this String object to the destination String object.
    \param destString [out]  Destination string.
    \param copyLength [in]  Number of characters to copy.
    \param copyIndex [in]  First byte to copy.
    \param extraLength [in]  Extra characters to allocate.
    
    \remarks
    This function calls allocBuffer(copyLength + extraLength)

</member>
        <member name="M:OdString.init">
\details
    Initializes this String object to an empty string.

</member>
        <member name="M:OdString.getData">
\details
    Returns the StringData for this String object.

</member>
        <member name="F:OdString.m_pData">
\details
    Pointer to the underlying OdChar array (buffer). 

</member>
        <member name="M:OdString.preallocate(System.Int32)">
\details
  Assures the character buffer of this String object is at least the specified size.
  \param length [in]  New length of internal buffer.

  \remarks
  This function destroys the existing string contents if any. String length is set to 0.

</member>
        <member name="M:OdString.getAllocLength">
\details
    Returns the number of characters allocated for the underlying OdChar array (buffer) in this String object.

</member>
        <member name="M:OdString.unlockBuffer">
\details
    Disables reference counting for this String object.

</member>
        <member name="M:OdString.lockBuffer">
\details
    Enables reference counting for this String object.

</member>
        <member name="M:OdString.freeExtra">
\details
    Releases any unused memory allocated by this String object.

</member>
        <member name="M:OdString.getBufferSetLength(System.Int32)">
\details
    Returns a modifiable C style OdChar array (buffer) of of the specified length for this String object.
    \param length [in]  buffer length.
    
    \remarks
    releaseBuffer() should be called before using any other OdString methods.
    
    The pointer returned by this function is not valid after releaseBuffer() is called.

</member>
        <member name="M:OdString.releaseBuffer(System.Int32)">
\details
    Releases a buffer obtained by getBuffer() or getBufferSetLength(), and sets its length.
    \param newLength [in]  New buffer length.
    \remarks
    If newLength == -1, the buffer is treated as 0 terminated.  

</member>
        <member name="M:OdString.getBuffer(System.Int32)">
\details
    Returns a modifiable C style OdChar array (buffer) of the specified minimum length for this String object.
    \param minBufferLength [in]  Minimum buffer length.
    
    \remarks
    releaseBuffer() should be called before using any other OdString methods.
    
    The pointer returned by this function is not valid after releaseBuffer() is called.

</member>
        <member name="M:OdString.formatV(System.Char!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details
    Assigns a value to this String object using a vsprintf-style format string and 
    argument list.
    \param formatString [in]  Format string.
    \param argList [in]  Argument list.   
    \returns
    Returns a reference to this String Object.

</member>
        <member name="M:OdString.formatV(System.UInt16!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details
    Assigns a value to this String object using a vsprintf-style format string and 
    argument list.
    \param formatString [in]  Format string.
    \param argList [in]  Argument list.   
    \returns
    Returns a reference to this String Object.

</member>
        <member name="M:OdString.format(System.Char!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
\details
    Assigns a value to this String object using a printf-style format string and 
    arguments.
    \param formatString [in]  Format string.
    \returns
    Returns a reference to this String Object.

</member>
        <member name="M:OdString.format(System.UInt16!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
\details
    Assigns a value to this String object using a printf-style format string and 
    arguments.
    \param formatString [in]  Format string.
    \returns
    Returns a reference to this String Object.

</member>
        <member name="M:OdString.findOneOf(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the first occurrence in this String object of any member of the specified character set. 

    \param charSet [in]  Character set.
     
    \remarks
    Returns -1 if not found.

</member>
        <member name="M:OdString.findOneOf(System.Char!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the first occurrence in this String object of any member of the specified character set. 

    \param charSet [in]  Character set.
     
    \remarks
    Returns -1 if not found.

</member>
        <member name="M:OdString.find(System.UInt16!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\details
    Returns the first occurrence of the specified string in this String object.

    \param searchString [in]  Search string.
	\param startIndex [in]  Start index of search.
     
    \remarks
    Returns -1 if not found.

</member>
        <member name="M:OdString.find(System.UInt16!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the first occurrence of the specified string in this String object.

    \param searchString [in]  Search string.
     
    \remarks
    Returns -1 if not found.

</member>
        <member name="M:OdString.findOneOf(System.UInt16!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the first occurrence in this String object of any member of the specified character set. 

    \param charSet [in]  Character set.
     
    \remarks
    Returns -1 if not found.

</member>
        <member name="M:OdString.find(System.UInt16,System.Int32)">

\details
    Returns the first occurrence of the specified character in this String object.

    \param searchChar [in]  Search character.
	\param startIndex [in]  Start index of search.
	
    \remarks
    Returns -1 if not found.

</member>
        <member name="M:OdString.reverseFind(System.UInt16,System.Int32)">
\details
    Returns the last occurrence of the specified character in this String object.

    \param searchChar [in]  Search character.
    \param startIndex [in]  An index from which to start searching back.

    \remarks
    Returns -1 if not found.

</member>
        <member name="M:OdString.reverseFind(System.UInt16)">
\details
    Returns the last occurrence of the specified character in this String object.

    \param searchChar [in]  Search character.
     
    \remarks
    Returns -1 if not found.

</member>
        <member name="M:OdString.find(System.UInt16)">
\details
    Returns the first occurrence of the specified character in this String object.

    \param searchChar [in]  Search character.
     
    \remarks
    Returns -1 if not found.

</member>
        <member name="M:OdString.deleteChars(System.Int32,System.Int32)">
\details
    Deletes the specified number characters from this String object.

    \param deleteIndex [in]  Deletion index.
    \param count [in]  Number of characters to delete.
    \returns
    Returns the new length of this String object.

</member>
        <member name="M:OdString.insert(System.Int32,System.Char!System.Runtime.CompilerServices.IsConst*)">
\details
    Inserts the specified string into this String object.
    
    \param insertIndex [in]  Insertion index.
	\param insertString [in]  String to insert.
  
    \returns
    Returns the new length of this String object.
    \remarks
    If insertIndex exceeds the length of this String object, 
    this String object is lengthened as necessary to accommodate the insertion.

</member>
        <member name="M:OdString.insert(System.Int32,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Inserts the specified string into this String object.
    
    \param insertIndex [in]  Insertion index.
	\param insertString [in]  String to insert.
  
    \returns
    Returns the new length of this String object.
    \remarks
    If insertIndex exceeds the length of this String object, 
    this String object is lengthened as necessary to accommodate the insertion.

</member>
        <member name="M:OdString.insert(System.Int32,System.UInt16!System.Runtime.CompilerServices.IsConst*)">
\details
    \param insertString [in]  String to insert.

\details
    Inserts the specified string into this String object.
    
    \param insertIndex [in]  Insertion index.
	\param insertString [in]  String to insert.
  
    \returns
    Returns the new length of this String object.
    \remarks
    If insertIndex exceeds the length of this String object, 
    this String object is lengthened as necessary to accommodate the insertion.

</member>
        <member name="M:OdString.insert(System.Int32,System.UInt16)">
\details
    Inserts the specified character into this String object.
    
	\param insertIndex [in]  Insertion index.
    \param insertChar [in]  Character to insert.

    \returns
    Returns the new length of this String object.
	
    \remarks
    If insertIndex exceeds the length of this String object, 
    this String object is lengthened as necessary to accommodate the insertion.

</member>
        <member name="M:OdString.remove(System.UInt16)">
\details
    Removes all occurrences of the specified character from this String object.

    \param removeChar [in]  Character to remove.

    \returns
    Returns the number of characters removed.

</member>
        <member name="M:OdString.replace(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
\details
    Replaces all occurrences of the specified string in this String object.

    \param oldString [in]  Old string.
    \param newString [in]  New string.
    
    \returns
    Returns the number of characters or strings replaced.

</member>
        <member name="M:OdString.replace(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Replaces all occurrences of the specified string in this String object.

    \param oldString [in]  Old string.
    \param newString [in]  New string.
    
    \returns
    Returns the number of characters or strings replaced.

</member>
        <member name="M:OdString.replace(System.UInt16!System.Runtime.CompilerServices.IsConst*,System.UInt16!System.Runtime.CompilerServices.IsConst*)">
\details
    Replaces all occurrences of the specified string in this String object.

    \param oldString [in]  Old string.
    \param newString [in]  New string.
    
    \returns
    Returns the number of characters or strings replaced.

</member>
        <member name="M:OdString.replace(System.UInt16,System.UInt16)">
\details
    Replaces all occurrences of the specified character in this String object.

    \param oldChar [in]  Old character.
    \param newChar [in]  New character.
    
    \returns
    Returns the number of characters or strings replaced.

</member>
        <member name="M:OdString.trimLeft(System.Char!System.Runtime.CompilerServices.IsConst*)">
\details
    Removes all whitespace from the left side of this String object.
   
   \param whiteChars [in]  Whitespace characters.
   
    \returns
    Returns a reference to this String object.  
    \remarks
    A space (' ') is used if no other whitespace characters are specfied.  

</member>
        <member name="M:OdString.trimLeft(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Removes all whitespace from the left side of this String object.
   
   \param whiteChars [in]  Whitespace characters.
   
    \returns
    Returns a reference to this String object.  
    \remarks
    A space (' ') is used if no other whitespace characters are specfied.  

</member>
        <member name="M:OdString.trimLeft(System.UInt16!System.Runtime.CompilerServices.IsConst*)">
\details
    Removes all whitespace from the left side of this String object.
   
   \param whiteChars [in]  Whitespace characters.
   
    \returns
    Returns a reference to this String object.  
    \remarks
    A space (' ') is used if no other whitespace characters are specfied.  

</member>
        <member name="M:OdString.trimLeft(System.UInt16)">
\details
    Removes all whitespace from the left side of this String object.
   
   \param whiteChar [in]  Whitespace character.
   
    \returns
    Returns a reference to this String object.  
    \remarks
    A space (' ') is used if no other whitespace characters are specfied.  

</member>
        <member name="M:OdString.trimRight(System.Char!System.Runtime.CompilerServices.IsConst*)">
\details
    Removes all whitespace from the right side of this String object.
   
    \param whiteChars [in]  Whitespace characters.
   
    \returns
    Returns a reference to this String object.
    \remarks
    A space (' ') is used if no whitespace characters are specfied.  

</member>
        <member name="M:OdString.trimRight(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Removes all whitespace from the right side of this String object.
   
    \param whiteChars [in]  Whitespace characters.
   
    \returns
    Returns a reference to this String object.
    \remarks
    A space (' ') is used if no whitespace characters are specfied.  

</member>
        <member name="M:OdString.trimRight(System.UInt16!System.Runtime.CompilerServices.IsConst*)">
\details
    Removes all whitespace from the right side of this String object.
   
    \param whiteChars [in]  Whitespace characters.
   
    \returns
    Returns a reference to this String object.
    \remarks
    A space (' ') is used if no whitespace characters are specfied.  

</member>
        <member name="M:OdString.trimRight(System.UInt16)">
\details
    Removes all whitespace from the right side of this String object.
   
    \param whiteChar [in]  Whitespace character.
   
    \returns
    Returns a reference to this String object.
    \remarks
    A space (' ') is used if no whitespace characters are specfied.  

</member>
        <member name="M:OdString.trimLeft">
\details
    Removes all whitespace from the left side of this String object.
   
    \returns
    Returns a reference to this String object.  
    \remarks
    A space (' ') is used if no other whitespace characters are specfied.  

</member>
        <member name="M:OdString.trimRight">
\details
    Removes all whitespace from the right side of this String object.
   
    \returns
    Returns a reference to this String object.
    \remarks
    A space (' ') is used if no whitespace characters are specfied.  

</member>
        <member name="M:OdString.makeReverse">
\details
    Reverses this String object.

    \returns
    Returns a reference to this String object.  

</member>
        <member name="M:OdString.makeLower">
\details
    Converts this String object to lower case.

    \returns
    Returns a reference to this String object.  

</member>
        <member name="M:OdString.makeUpper">
\details
    Converts this String object to upper case.

    \returns
    Returns a reference to this String object.  

</member>
        <member name="M:OdString.spanExcluding(System.Char!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the longest leftmost substring of this String object 
    that consists solely of characters that are
    not contained in the specified character set.

    \param charSet [in]  Character set.
    
    \remarks
    If the first character in this String object in the specified character set,
    an empty string is returned.

</member>
        <member name="M:OdString.spanExcluding(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the longest leftmost substring of this String object 
    that consists solely of characters that are
    not contained in the specified character set.

    \param charSet [in]  Character set.
    
    \remarks
    If the first character in this String object in the specified character set,
    an empty string is returned.

</member>
        <member name="M:OdString.spanExcluding(System.UInt16!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the longest leftmost substring of this String object 
    that consists solely of characters that are
    not contained in the specified character set.

    \param charSet [in]  Character set.
    
    \remarks
    If the first character in this String object in the specified character set,
    an empty string is returned.

</member>
        <member name="M:OdString.spanIncluding(System.Char!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the longest leftmost substring of this String object 
    that consists solely of characters that are
    contained in the specified character set.

    \param charSet [in]  Character set.
    
    \remarks
    If the first character in this String object is not in the specified character set,
    an empty string is returned.

</member>
        <member name="M:OdString.spanIncluding(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Returns the longest leftmost substring of this String object 
    that consists solely of characters that are
    contained in the specified character set.

    \param charSet [in]  Character set.
    
    \remarks
    If the first character in this String object is not in the specified character set,
    an empty string is returned.

</member>
        <member name="M:OdString.spanIncluding(System.UInt16!System.Runtime.CompilerServices.IsConst*)">
\details
    Returns the longest leftmost substring of this String object 
    that consists solely of characters that are
    contained in the specified character set.

    \param charSet [in]  Character set.
    
    \remarks
    If the first character in this String object is not in the specified character set,
    an empty string is returned.

</member>
        <member name="M:OdString.right(System.Int32)">
\details
    Returns the rightmost substring of the specified length from this String object.
    \param length [in]  Length of substring. 

</member>
        <member name="M:OdString.left(System.Int32)">
\details
    Returns the leftmost substring of the specified length from this String object.
    \param length [in]  Length of substring. 

</member>
        <member name="M:OdString.mid(System.Int32)">
\details
    Returns the substring specified by a start index from this String object.
    \param startIndex [in]  Starting index.


</member>
        <member name="M:OdString.mid(System.Int32,System.Int32)">
\details
    Returns the substring specified by a start index and a length from this String object.
    \param startIndex [in]  Starting index.
    \param length [in]  Length of substring. 
    

</member>
        <member name="M:op_Addition(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Concatenation Operator.
    \returns
    Returns the concatenation of this object on the left with the object on the right.

</member>
        <member name="M:OdString.op_AdditionAssignment(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
    Concatenation-Equals Operator.
	
	\param string [in] Input value for concatenation
    \remarks
    Sets this object to the concatenation of this String object with the 
    value on the right, and returns a reference to this String object.

</member>
        <member name="M:OdString.op_AdditionAssignment(System.Char!System.Runtime.CompilerServices.IsConst*)">
\details
    Concatenation-Equals Operator.
	
	\param string [in] Input value for concatenation
    \remarks
    Sets this object to the concatenation of this String object with the 
    value on the right, and returns a reference to this String object.

</member>
        <member name="M:OdString.op_AdditionAssignment(System.UInt16!System.Runtime.CompilerServices.IsConst*)">
\details
    Concatenation-Equals Operator.
	
	\param string [in] Input value for concatenation
    \remarks
    Sets this object to the concatenation of this String object with the 
    value on the right, and returns a reference to this String object.

</member>
        <member name="M:OdString.op_AdditionAssignment(System.UInt16)">
\details
    Concatenation-Equals Operator.
	
	\param ch [in] Input value for concatenation
    \remarks
    Sets this object to the concatenation of this String object with the 
    value on the right, and returns a reference to this String object.

</member>
        <member name="M:OdString.op_AdditionAssignment(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Concatenation-Equals Operator.
	
	\param string [in] Input value for concatenation
    \remarks
    Sets this object to the concatenation of this String object with the 
    value on the right, and returns a reference to this String object.

</member>
        <member name="M:OdString.op_Implicit~System.UInt16!System.Runtime.CompilerServices.IsConst*">
\details
    Returns the underlying character array (buffer) of this String object.

</member>
        <member name="M:OdString.c_str">
\details
    Returns the underlying OdChar array (buffer) of this String object.

</member>
        <member name="M:OdString.setAt(System.Int32,System.UInt16)">
\details
    Sets the single character of this String object at the specified position.
    \param charIndex [in]  Character index.
    \param ch [in]  Character.
    \remarks
    No range checking is performed.

</member>
        <member name="M:OdString.op_Subscript(System.Int32)">
\details
    Indexing Operator
    
    \returns
    Returns the single character of this String object at the specified position.
    \param charIndex [in]  Character index. 

</member>
        <member name="M:OdString.getAt(System.Int32)">
\details
    Returns the single character of this String object at the specified position.
    \param charIndex [in]  Character index. 

</member>
        <member name="M:OdString.empty">
\details
    Sets this String object to the empty string.

</member>
        <member name="M:OdString.isEmpty">
\details
    Returns true and only if this String object is empty.

</member>
        <member name="M:OdString.getLength">
\details
    Returns the number of characters in this String object.

</member>
        <member name="M:OdString.#ctor(System.UInt16,System.Int32)">
\param ch [in]  Character to repeat.
    \param length [in]  Number of characters.

</member>
        <member name="M:OdString.#ctor(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\param source [in]  Source.

</member>
        <member name="F:OdStringData.ansiString">
\details
    Underlying char array (buffer) of this StringData object.

</member>
        <member name="F:OdStringData.unicodeBuffer">
\details
    Underlying OdChar array (buffer) of this StringData object.

</member>
        <member name="F:OdStringData.nAllocLength">
\details
    String allocation length in characters, omitting the 0 terminator. 

</member>
        <member name="F:OdStringData.nDataLength">
\details
    String length in characters, omitting the 0 terminator.

</member>
        <member name="F:OdStringData.nRefs">
\details
    Number of references to this string.

</member>
        <member name="M:OdAnsiString.freeData(OdStringDataA*)">
\details
  Frees the specified StringData object.
  \param pStringData [in]  Pointer to the StringData object.

</member>
        <member name="M:OdAnsiString.safeStrlen(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
  Returns the length of the specified string.
  \param string [in]  0 terminated string or NULL.
  \remarks
  Returns 0 if string == NULL.

</member>
        <member name="M:OdAnsiString.release">
\details
  Releases the reference to the specified StringData object.

  \param pStringData [in]  Pointer to the StringData object.

  \remarks
  If pStringData is not specified, the StringData associated with
  this String object is released.

  Decrements the reference count of the StringData object.

  When its reference count reaches zero, the StringData object is freed.

</member>
        <member name="M:OdAnsiString.copyBeforeWrite">
\details
  Assures there are no multiple references to the StringData associated with this String object. 

  \remarks
  If there is more than one reference to the StringData object, it is released, and
  replaced with a copy thereof 

</member>
        <member name="M:OdAnsiString.allocBuffer(System.Int32)">
\details
  Allocates the specified number of characters for the character buffer of this String object.
  \param length [in]  buffer length.

</member>
        <member name="M:OdAnsiString.allocCopy(OdAnsiString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32,System.Int32,System.Int32)">
\details
  Copies the specified number of characters from this String object to the destination String object.
  \param destString [out]  Destination string.
  \param copyLength [in]  Number of characters to copy.
  \param copyIndex [in]  First byte to copy.
  \param extraLength [in]  Extra characters to allocate.

  \remarks
  This function calls allocBuffer(copyLength + extraLength)

</member>
        <member name="M:OdAnsiString.init">
\details
  Initializes this String object to an empty string.

</member>
        <member name="M:OdAnsiString.getData">
\details
  Returns the StringData for this String object.

</member>
        <member name="F:OdAnsiString.m_pchData">
\details
  Pointer to the underlying char array (buffer). 

</member>
        <member name="M:OdAnsiString.getAllocLength">
\details
  Returns the number of characters allocated for the underlying char array (buffer) in this String object.

</member>
        <member name="M:OdAnsiString.unlockBuffer">
\details
  Disables reference counting for this String object.

</member>
        <member name="M:OdAnsiString.lockBuffer">
\details
  Enables reference counting for this String object.

</member>
        <member name="M:OdAnsiString.freeExtra">
\details
  Releases any unused memory allocated by this String object.

</member>
        <member name="M:OdAnsiString.getBufferSetLength(System.Int32)">
\details
  Returns a modifiable C style char array (buffer) of of the specified length for this String object.
  \param length [in]  buffer length.

  \remarks
  releaseBuffer() should be called before using any other OdAnsiString methods.

  The pointer returned by this function is not valid after releaseBuffer() is called.

</member>
        <member name="M:OdAnsiString.releaseBuffer(System.Int32)">
\details
  Releases a buffer obtained by getBuffer() or getBufferSetLength(), and sets its length.
  \param newLength [in]  New buffer length.
  \remarks
  If newLength == -1, the buffer is treated as 0 terminated.  

</member>
        <member name="M:OdAnsiString.getBuffer(System.Int32)">
\details
  Returns a modifiable C style char array (buffer) of the specified minimum length for this String object.
  \param minBufferLength [in]  Minimum buffer length.

  \remarks
  releaseBuffer() should be called before using any other OdAnsiString methods.

  The pointer returned by this function is not valid after releaseBuffer() is called.

</member>
        <member name="M:OdAnsiString.formatV(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
\details
  Assigns a value to this String object using a vsprintf-style format string and 
  argument list.
  \param formatString [in]  Format string.
  \param argList [in]  Argument list.   
  \returns
  Returns a reference to this String Object.

</member>
        <member name="M:OdAnsiString.format(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
\details
  Assigns a value to this String object using a printf-style format string and 
  arguments.
  \param formatString [in]  Format string.
  \returns
  Returns a reference to this String Object.

</member>
        <member name="M:OdAnsiString.find(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32)">
\details
  Returns the first occurrence of the specified character or string in this String object.

  \param searchString [in]  Search string.
  \param startIndex [in]  Start index.

  \remarks
  Returns -1 if not found.

</member>
        <member name="M:OdAnsiString.find(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
  Returns the first occurrence of the specified string in this String object.

  \param searchString [in]  Search string.

  \remarks
  Returns -1 if not found.

</member>
        <member name="M:OdAnsiString.findOneOf(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
  Returns the first occurrence in this String object of any member of the specified character set. 

  \param charSet [in]  Character set.

  \remarks
  Returns -1 if not found.

</member>
        <member name="M:OdAnsiString.find(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,System.Int32)">

\details
  Returns the first occurrence of the specified character in this String object.

  \param searchChar [in]  Search character.
  \param startIndex [in]  Start index.
  
  \remarks
  Returns -1 if not found.

</member>
        <member name="M:OdAnsiString.reverseFind(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
\details
  Returns the last occurrence of the specified character in this String object.

  \param searchChar [in]  Search character.

  \remarks
  Returns -1 if not found.

</member>
        <member name="M:OdAnsiString.find(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
\details
  Returns the first occurrence of the specified character in this String object.

  \param searchChar [in]  Search character.

  \remarks
  Returns -1 if not found.

</member>
        <member name="M:OdAnsiString.deleteChars(System.Int32,System.Int32)">
\details
  Deletes the specified number characters from this String object.

  \param deleteIndex [in]  Deletion index.
  \param count [in]  Number of characters to delete.
  \returns
  Returns the new length of this String object.

</member>
        <member name="M:OdAnsiString.insert(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
  Inserts the specified string into this String object.
  
  \param insertIndex [in]  Insertion index.
  \param insertString [in]  String to insert.

  \returns
  Returns the new length of this String object.
  \remarks
  If insertIndex exceeds the length of this String object, 
  this String object is lengthened as necessary to accommodate the insertion.

</member>
        <member name="M:OdAnsiString.insert(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
\details
  Inserts the specified character into this String object.
  
  \param insertIndex [in]  Insertion index.
  \param insertChar [in]  Character to insert.

  \returns
  Returns the new length of this String object.
  \remarks
  If insertIndex exceeds the length of this String object, 
  this String object is lengthened as necessary to accommodate the insertion.

</member>
        <member name="M:OdAnsiString.remove(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
\details
  Removes all occurrences of the specified character from this String object.

  \param removeChar [in]  Character to remove.

  \returns
  Returns the number of characters removed.

</member>
        <member name="M:OdAnsiString.replace(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
  Replaces all occurrences of the specified string in this String object.

  \param oldString [in]  Old string.
  \param newString [in]  New string.

  \returns
  Returns the number of characters or strings replaced.

</member>
        <member name="M:OdAnsiString.replace(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
\details
  Replaces all occurrences of the specified character in this String object.

  \param oldChar [in]  Old character.
  \param newChar [in]  New character.

  \returns
  Returns the number of characters or strings replaced.

</member>
        <member name="M:OdAnsiString.trimLeft(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
  Removes all whitespace from the left side of this String object.

  \param whiteChars [in]  Whitespace characters.
  
  \returns
  Returns a reference to this String object.  
  \remarks
  A space (' ') is used if no other whitespace characters are specfied.  

</member>
        <member name="M:OdAnsiString.trimLeft(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
\details
  Removes all whitespace from the left side of this String object.

  \param whiteChar [in]  Whitespace character.
  
  \returns
  Returns a reference to this String object.  
  \remarks
  A space (' ') is used if no other whitespace characters are specfied.  

</member>
        <member name="M:OdAnsiString.trimRight(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
  Removes all whitespace from the right side of this String object.

  \param whiteChars [in]  Whitespace characters.
  
  \returns
  Returns a reference to this String object.
  \remarks
  A space (' ') is used if no whitespace characters are specfied.  

</member>
        <member name="M:OdAnsiString.trimRight(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
\param whiteChar [in]  Whitespace character.

\details
  Removes all whitespace from the right side of this String object.

  \param whiteChar [in]  Whitespace character.
  
  \returns
  Returns a reference to this String object.
  \remarks
  A space (' ') is used if no whitespace characters are specfied.  

</member>
        <member name="M:OdAnsiString.trimLeft">
\details
  Removes all whitespace from the left side of this String object.

  \returns
  Returns a reference to this String object.  
  \remarks
  A space (' ') is used if no other whitespace characters are specfied.  

</member>
        <member name="M:OdAnsiString.trimRight">
\details
  Removes all whitespace from the right side of this String object.

  \returns
  Returns a reference to this String object.
  \remarks
  A space (' ') is used if no whitespace characters are specfied.  

</member>
        <member name="M:OdAnsiString.makeReverse">
\details
  Reverses this String object.

  \returns
  Returns a reference to this String object.  

</member>
        <member name="M:OdAnsiString.makeLower">
\details
  Converts this String object to lower case.

  \returns
  Returns a reference to this String object.  

</member>
        <member name="M:OdAnsiString.makeUpper">
\details
  Converts this String object to upper case.

  \returns
  Returns a reference to this String object.  

</member>
        <member name="M:OdAnsiString.spanExcluding(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
  Returns the longest leftmost substring of this String object 
  that consists solely of characters that are
  not contained in the specified character set.

  \param charSet [in]  Character set.

  \remarks
  If the first character in this String object in the specified character set,
  an empty string is returned.

</member>
        <member name="M:OdAnsiString.spanIncluding(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
  Returns the longest leftmost substring of this String object 
  that consists solely of characters that are
  contained in the specified character set.

  \param charSet [in]  Character set.

  \remarks
  If the first character in this String object is not in the specified character set,
  an empty string is returned.

</member>
        <member name="M:OdAnsiString.right(System.Int32)">
\details
  Returns the rightmost substring of the specified length from this String object.
  \param length [in]  Length of substring. 

</member>
        <member name="M:OdAnsiString.left(System.Int32)">
\details
  Returns the leftmost substring of the specified length from this String object.
  \param length [in]  Length of substring. 

</member>
        <member name="M:OdAnsiString.mid(System.Int32)">
\details
  Returns the substring specified by a start indexfrom this String object.
  \param startIndex [in]  Starting index.


</member>
        <member name="M:OdAnsiString.mid(System.Int32,System.Int32)">
\details
  Returns the substring specified by a start index and a length from this String object.
  \param startIndex [in]  Starting index.
  \param length [in]  Length of substring. 

  \remarks
  If length is not specified, the remainder of this String object is returned.

</member>
        <member name="M:op_Addition(OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Concatenation Operator.
  \returns
  Returns the concatenation of this object on the left with the object on the right.

</member>
        <member name="M:OdAnsiString.op_AdditionAssignment(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
\details
  Concatenation-Equals Operator.
  \remarks
  Sets this object to the concatenation of this String object with the 
  value on the right, and returns a reference to this String object.

</member>
        <member name="M:OdAnsiString.op_AdditionAssignment(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
\details
  Concatenation-Equals Operator.
  \remarks
  Sets this object to the concatenation of this String object with the 
  value on the right, and returns a reference to this String object.

</member>
        <member name="M:OdAnsiString.op_AdditionAssignment(OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
  Concatenation-Equals Operator.
  \remarks
  Sets this object to the concatenation of this String object with the 
  value on the right, and returns a reference to this String object.

</member>
        <member name="M:OdAnsiString.op_Implicit~System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*">
\details
  Returns the underlying char array (buffer) of this String object.

</member>
        <member name="M:OdAnsiString.c_str">
\details
  Returns the underlying char array (buffer) of this String object.

</member>
        <member name="M:OdAnsiString.setAt(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte)">
\details
  Sets the single character of this String object at the specified position.
  \param charIndex [in]  Character index.
  \param ch [in]  Character.
  \remarks
  No range checking is performed.

</member>
        <member name="M:OdAnsiString.op_Subscript(System.Int32)">
\details
  Indexing Operator

  \returns
  Returns the single character of this String object at the specified position.
  \param charIndex [in]  Character index. 

</member>
        <member name="M:OdAnsiString.getAt(System.Int32)">
\details
  Returns the single character of this String object at the specified position.
  \param charIndex [in]  Character index. 

</member>
        <member name="M:OdAnsiString.empty">
\details
  Sets this String object to the empty string.

</member>
        <member name="M:OdAnsiString.isEmpty">
\details
  Returns true and only if this String object is empty.

</member>
        <member name="M:OdAnsiString.getLength">
\details
  Returns the number of characters in this String object.

</member>
        <member name="M:OdAnsiString.#ctor(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,System.Int32)">
\param ch [in]  Character to repeat.
  \param length [in]  Number of characters.

</member>
        <member name="M:OdAnsiString.#ctor(OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\param source [in]  Source.

</member>
        <member name="M:OdStringDataA.data">
\details
  Returns the underlying char array (buffer) of this StringData object.

</member>
        <member name="F:OdStringDataA.nAllocLength">
\details
  String allocation length in characters, omitting the 0 terminator. 

</member>
        <member name="F:OdStringDataA.nDataLength">
\details
  String length in characters, omitting the 0 terminator.

</member>
        <member name="F:OdStringDataA.nRefs">
\details
  Number of references to this string.

</member>
        <member name="M:OdMutexAutoLock.#ctor(OdMutex*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\param mutex [in]  Mutex to be Autolocked.

</member>
        <member name="M:OdMutex.unlock">
\details
  Unlocks this Mutex object.

</member>
        <member name="M:OdMutex.lock">
\details
  Locks this Mutex object.

</member>
        <member name="M:GetMemoryUsageInternalInfo(System.UInt32!System.Runtime.CompilerServices.IsLong)">
\details
      For internal use only.  

</member>
        <member name="M:odrxFree(System.Void*)">
\details
    Frees a block of memory.
    \param pMemBlock [in]  Pointer to the previously allocated memory block.
    \sa
    Memory Management

</member>
        <member name="M:odrxRealloc(System.Void*,System.UInt64,System.UInt64)">
\details
    Reallocates a block of memory.
    \param pMemBlock [in]  Pointer to the previously allocated memory block.
    \param newSize [in]  New size in bytes.
    \param oldSize [in]  Old size in bytes.
    \returns
    Returns a pointer to the newly allocated memory block.
    \sa
    Memory Management

</member>
        <member name="M:odrxAlloc(System.UInt64)">
\details
    Defines the interface for ODA Platform memory management.

\details
    Allocates a block of memory.
    \param nBytes [in]  Number of bytes to allocate.
    \returns
    Returns a pointer to the newly allocated memory block.
    \sa
    Memory Management

</member>
        <member name="M:isValidNonZeroIEEEDouble(System.Byte!System.Runtime.CompilerServices.IsConst*)">
\details
  Checks if 8 bytes buffer represents a valid non-zero IEEE double value.
  (In this format doubles are stored in .dwg files.)

</member>
        <member name="M:OdGUID.setGUIDdata(System.UInt32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,System.UInt16!System.Runtime.CompilerServices.IsConst,System.UInt16!System.Runtime.CompilerServices.IsConst,System.Byte!System.Runtime.CompilerServices.IsConst(*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)[N8])">
\details
    Sets the GUID data.

</member>
        <member name="M:OdGUID.toString(OdGUID.StringFormat.Enum!System.Runtime.CompilerServices.IsConst)">
\details
    Returns string representation for this OdGUID.

    \param format [in]  A single format specifier that indicates how to format the value of this OdGUID.
                        Default value is OdGUID::StringFormat::Hyphenses.

    \remarks
    The following table shows the accepted format specifiers for the format parameter.
    "0" represents a digit; hyphens ("-"), braces ("{", "}"), and parentheses ("(", ")") appear as shown.

    OdGUID::StringFormat::Digits:      00000000000000000000000000000000
    OdGUID::StringFormat::Hyphenses:   00000000-0000-0000-0000-000000000000
    OdGUID::StringFormat::Braces:      {00000000-0000-0000-0000-000000000000}
    OdGUID::StringFormat::Parentheses: (00000000-0000-0000-0000-000000000000)
    OdGUID::StringFormat::Extended:    {0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}

</member>
        <member name="M:OdGUID.#ctor(OdGUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\details
    Creates a new instance of a OdGUID object with copied data from other object.
    
    \param other [in] Object to copy from.

</member>
        <member name="T:OdDb.UnitsValue">
\details
    This enum is used in OdUtilAdds / Units formatter.

</member>
        <member name="T:OdDb.MeasurementValue">
\details
    Represents the measurement systems.
    !When changing the enum is necessary to change value tags definitions in DbValueTypes.cpp

</member>
        <member name="M:ServerPath.#ctor">
            <summary>
A path to a Revit model stored on a Revit server.
</summary>
        </member>
        <member name="M:FilePath.#ctor">
            <summary>
A path to a Revit model stored on disk.
</summary>
        </member>
        <member name="T:CentralModelIncompatibleException">
            <summary>
Base exceptions for incomptibility errors in Worksharing scenarios
</summary>
        </member>
        <!-- Discarding badly formed XML document comment for member 'T:OdGUID'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdNonCopyable'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdMutex'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdMutexAutoLock'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRefCounter'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdVolatile'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdStringDataA'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdEmptyStringDataA'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdAnsiString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.compare(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.iCompare(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.assignCopy(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.concatCopy(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.concatInPlace(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.allocBeforeWrite(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdStringData'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.compare(System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.compare(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.compare(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.compare(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.iCompare(System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.iCompare(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.iCompare(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.assignCopy(System.Int32,System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.concatCopy(System.Int32,System.UInt16!System.Runtime.CompilerServices.IsConst*,System.Int32,System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.concatInPlace(System.Int32,System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.allocBeforeWrite(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdString.lessnocase'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdConstString'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdBaseObjectPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxObjMod'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxObjectPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.attach(OdRxObject!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.release'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.detach'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.op_Assign(OdRxObjectPtr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.get'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.op_MemberSelection'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.queryX(OdRxClass!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.x(OdRxClass!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.desc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.isA'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.addRef'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.release'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.numRefs'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.isKindOf(OdRxClass!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.comparedTo(OdRxObject!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.isEqualTo(OdRxObject!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_NotThatKindOfClass'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxClass'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.create'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.appName'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.appNameCallbackPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.dxfName'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.name'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.getClassVersion(OdDb.MaintReleaseVer*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.proxyFlags'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.isDerivedFrom(OdRxClass!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.myParent'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.module'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.constructor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.setConstructor(=FUNC:OdRxObjectPtr)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.customFlags'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdRxClassPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:newOdRxClass(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxClass*,=FUNC:OdRxObjectPtr,System.Int32,System.Int32,System.Int32,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,=FUNC:System.Void(OdRxClass!System.Runtime.CompilerServices.IsConst*,OdString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32),System.Int32,=FUNC:System.Void(OdRxMemberCollectionBuilder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void*),System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDictionaryIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionaryIterator.getKey'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionaryIterator.id'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.reserve(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.getAt(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.getAt(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.putAt(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxObject*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.putAt(System.UInt32!System.Runtime.CompilerServices.IsLong,OdRxObject*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.resetKey(System.UInt32!System.Runtime.CompilerServices.IsLong,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.remove(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.remove(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.has(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.has(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.idAt(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.keyAt(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.numEntries'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.newIterator(OdRx.DictIterType)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.isCaseSensitive'. -->
        <!-- Discarding badly formed XML document comment for member 'M:odrxSysRegistry'. -->
        <!-- Discarding badly formed XML document comment for member 'M:odrxClassDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDrawable'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiDrawablePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDrawableOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:IOdRxNonBlittableType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:IOdRxEnumeration'. -->
        <!-- Discarding badly formed XML document comment for member 'T:IOdRxReferenceType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:IOdRxObjectValue'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxValueType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdStreamBuf'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_FileException'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_FileNotFound'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_CantOpenFile'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_FileWriteError'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_InvalidIndex'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_InvalidKey'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxSystemServices'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdArrayBuffer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMember'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxEnumTag'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberCollection'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberCollectionBuilder'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberQueryContext'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxFacetProvider'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberReactor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberQueryEngine'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiLayerOverrides'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiLayerOverridesPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiAuxiliaryData'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiAuxiliaryDataPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDrawableTraits'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiSubEntityTraits'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setLayer(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setLineWeight(OdDb.LineWeight)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setMaterial(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setMapper(OdGiMapper!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setVisualStyle(OdDbStub!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setSelectionGeom(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setShadowFlags(OdGiSubEntityTraits.ShadowFlags)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setSectionable(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.layer'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.lineWeight'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.material'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.mapper'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.visualStyle'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.selectionGeom'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.shadowFlags'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.sectionable'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.addLight(OdDbStub!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiSubEntityTraitsPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCmEntityColor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCmColorBase'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCmTransparency'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxValue'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxValue.#ctor(OdRxValueType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxBoxedValue'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxBoxedValueOnStack'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdDAIObjectSDAI.isInstanceOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdDAIObjectSDAI.isKindOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdDAIObjectSDAI.getInstanceType'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.OdDAIObjectSDAIPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDAI.OdSDAIInstance'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdSDAIInstance.isInstanceOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdSDAIInstance.isKindOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdSDAIInstance.getInstanceType'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.DictionaryInstancePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.ApplicationInstance.isInstanceOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.ApplicationInstance.isKindOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.ApplicationInstancePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIObjectId.openObject(OdDAI.OpenMode,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIObjectId.getNested'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAIObjectIds'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Select.nullify'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.NamedTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.NamedTypeDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxPropertyBase'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxPropertyOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxPromotingQueryContext'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxValueIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCollectionProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCollectionPropertyOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxIndexedProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDictionaryProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxSubProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxSubPropertyOfIndexedProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxIndexedSubProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxSpecifiedValueType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAttributeImpl'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdRxAttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAttributeCollection'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxResourceLoader'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxLocalizedNameAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAlternateLocalizedNameAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUiPlacementAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDescriptionAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxRefersToAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCOMAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxFilePathAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxFlagsAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUnitTypeAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUseDialogForReferredCollectionAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUiCascadingContextMenuAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCumulativeAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAffinityAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxTypePromotionAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUnionTypeAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDefaultValueAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxHierarchyLevelAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDisplayAsAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCategory'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Attribute.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Attribute.entityDef'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.AttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.AttributeSet'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.OdSimpleTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.SimpleTypeDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.AggregationTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.AggregationTypeDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.DerivedAttribute.createObject(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,OdDAI.Entity*,OdDAI.DictionaryInstance*,OdDAI.ExplicitOrDerived*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.DerivedAttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.ExplicitAttribute.createObject(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,OdDAI.Entity*,OdDAI.DictionaryInstance*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.ExplicitAttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.InverseAttribute.createObject(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,OdDAI.Entity*,OdDAI.Entity!System.Runtime.CompilerServices.IsConst*,OdDAI.ExplicitAttribute!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.InverseAttribute.invertedAttr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.InverseAttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Entity.createObject(OdDAI.Schema*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean,OdDAI.Entity**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.EntityPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.EntitySet'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.EntityList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.EnumerationType.createObject(OdSharedPtr<OdTypeCode>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.list<OdAnsiString,std.allocator<OdAnsiString>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.EnumerationTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.SelectType.createObject(OdSharedPtr<OdTypeCode>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set<OdDAI.NamedType!System.Runtime.CompilerServices.IsConst**,std.less<OdDAI.NamedType!System.Runtime.CompilerServices.IsConst**>,std.allocator<OdDAI.NamedType!System.Runtime.CompilerServices.IsConst**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.SelectTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.NamedTypeSet'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.ConstructedTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.UnderlyingTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.DefinedType.createObject(OdDAI.Schema*,OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdSharedPtr<OdTypeCode>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdSmartPtr<OdDAI.UnderlyingType>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.DefinedType.#ctor(OdDAI.Schema*,OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdSharedPtr<OdTypeCode>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdSmartPtr<OdDAI.UnderlyingType>)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.DefinedTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.DefinedTypeSet'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.SchemaPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RxSystemServicesImpl'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ExSystemServices'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.SessionInstancePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:sdaiGetAttrs(Sdai_instS*,System.Int32,Sdai_instS*,SdaiPrimitiveType,System.Void*,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:sdaiGetAttrsBN(Sdai_instS*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,SdaiPrimitiveType,System.Void*,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Repository.getHeaderSection'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Repository.readHeaderSection(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Repository.readHeaderSection(OdSmartPtr<OdStreamBuf>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Repository.attachTo(OdDAIHostAppServicesBase*,OdRxObject*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxModule'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxModule.initApp'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxModule.uninitApp'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdRxModulePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDynamicLinker'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCharMapper'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdCharMapper.addBigFonts(OdStreamBuf*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCharacterProperties'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdTextProperties'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdFont'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdBaseTextIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiSectionGeometryManagerPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiContext'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiContext.textQuality'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiContext.lineWeightConfiguration(OdGiContext.LineWeightStyle)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiContext.ttfPolyDraw'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiCommonDraw'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDrawFlagsHelper'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDefaultContext'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeTol'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeLibVersion'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGe'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeContext'. -->
        <!-- Discarding badly formed XML document comment for member 'F:OdGeContext.gOrthoVector'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeLoopCtx'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_GeNotImplemted'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeVector2d'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.normal(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.normalize(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.normalize(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.normalizeGetLength(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.isParallelTo(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.isCodirectionalTo(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGePoint2d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsDCPoint'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsDCRect'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsDCRectDouble'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiContextualColors'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiContextualColorsImpl'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiContextualColorsRedir'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsView'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.device'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.lineweightToDcScale'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setLineweightToDcScale(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setLineweightEnum(System.Int32,System.Byte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.beginInteractivity(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.isInInteractivity'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.interactivityFrameRate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.endInteractivity'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.freezeLayer(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.thawLayer(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.clearFrozenLayers'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.select(OdGsDCPoint!System.Runtime.CompilerServices.IsConst*,System.Int32,OdGsSelectionReactor*,OdGsView.SelectionMode)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setBackground(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.background'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setVisualStyle(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.visualStyle'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setVisualStyle(OdGiVisualStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.visualStyle(OdGiVisualStyle*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.enableDefaultLighting(System.Boolean,OdGsView.DefaultLightingType)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.collide(OdGiPathNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,OdGsCollisionDetectionReactor*,OdGiPathNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,OdGsCollisionDetectionContext!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsClientViewInfo'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsCollisionDetectionReactor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsCollisionDetectionContext'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsDevice'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsDevice.properties'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsReactor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsModule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiLinetypeDash'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiLinetype'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeEntity2d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeInterval'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeCurve2d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGePoint3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeVector3d'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.angleTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.normal(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.normalize(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.normalize(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.normalizeGetLength(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.isParallelTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.isCodirectionalTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.isPerpendicularTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeEntity3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeMatrix2d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeMatrix3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeExtents3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeBoundBlock3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdTimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdUnitsFormatter'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdUnitsFormatterTool'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseDatabasePE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseLayerPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseVisualStylePE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseAnnotationScalePE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseLayoutPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbSetBasePlotSettingsPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseBlockPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseBlockRefPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseSortEntsPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseLongTransactionPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseHatchPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseMaterialPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbHostAppProgressMeter'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeCurve3d'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeCurve3d.appendSamplePoints(System.Double,System.Double,System.Double,OdArray<OdGePoint3d,OdMemoryAllocator<OdGePoint3d>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdArray<System.Double,OdMemoryAllocator<System.Double>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:BrepType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:BrepBuilderErrorsHolder'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdBrepBuilder'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseHostAppServices'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIHostAppServicesBase.databaseClass'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIHostAppServicesBase.modelClass'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIHostAppServicesBase.getHeaderSection(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.OdSDAIModulePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdIfcCoreModulePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:getDrawableShapeRepresentation(OdSmartPtr<OdGiDrawable>,OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdDAI.Model*,OdDAIObjectId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:getDrawableShapeRepresentation(OdArray<OdSmartPtr<OdGiDrawable>,OdObjectsAllocator<OdSmartPtr<OdGiDrawable>>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdDAI.Model*,OdDAIObjectId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.InstanceIteratorPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDAI.Model'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Model.getEntityInstance(OdDbHandle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Model.appendEntityInstance(OdSmartPtr<OdDAI.ApplicationInstance>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Model.getEntityExtent(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdIfc.OdIfcCompoundPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.isInstanceOf(OdIfc.OdIfcEntityType)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.type'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.getAttr(OdIfc.OdIfcAttribute!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.testAttr(OdIfc.OdIfcAttribute!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.unsetAttr(OdIfc.OdIfcAttribute!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.putAttr(OdIfc.OdIfcAttribute!System.Runtime.CompilerServices.IsConst,OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.resolved'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asPoint3d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asPoint2d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asVector3d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asVector2d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asMatrix2d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asMatrix3d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asCompound(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asRgbColor(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdIfc.OdIfcEntity'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcModelContext.getDeviationParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:STATIC_MODULE_DESC'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdIfc.OdIfcGeomModulePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getAppServices'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.setAppServices(OdIfcHostAppServices*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getHeaderSection'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getModel(SdaiAccessMode)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getContext'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getEntityId(OdIfcGUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.setContext(OdIfcModelContext!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.composeEntities'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.setContextSelection(OdArray<OdDAIObjectId,OdObjectsAllocator<OdDAIObjectId>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getUnitConverter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.get(OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.get(OdArray<OdDAIObjectId,OdObjectsAllocator<OdDAIObjectId>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdIfcFilePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.databaseClass'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.createDatabase(InitialSchema)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.getFontMapFileName'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.readFile(OdStreamBuf*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.readFile(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGUID'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdNonCopyable'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdMutex'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdMutexAutoLock'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRefCounter'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdVolatile'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdStringDataA'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdEmptyStringDataA'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdAnsiString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.compare(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.iCompare(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.assignCopy(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.concatCopy(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.concatInPlace(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.allocBeforeWrite(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdStringData'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.compare(System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.compare(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.compare(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.compare(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.iCompare(System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.iCompare(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.iCompare(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.assignCopy(System.Int32,System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.concatCopy(System.Int32,System.UInt16!System.Runtime.CompilerServices.IsConst*,System.Int32,System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.concatInPlace(System.Int32,System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.allocBeforeWrite(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdString.lessnocase'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdConstString'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdBaseObjectPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxObjMod'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxObjectPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.attach(OdRxObject!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.release'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.detach'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.op_Assign(OdRxObjectPtr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.get'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.op_MemberSelection'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.queryX(OdRxClass!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.x(OdRxClass!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.desc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.isA'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.addRef'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.release'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.numRefs'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.isKindOf(OdRxClass!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.comparedTo(OdRxObject!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.isEqualTo(OdRxObject!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_NotThatKindOfClass'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxClass'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.create'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.appName'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.appNameCallbackPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.dxfName'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.name'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.getClassVersion(OdDb.MaintReleaseVer*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.proxyFlags'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.isDerivedFrom(OdRxClass!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.myParent'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.module'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.constructor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.setConstructor(=FUNC:OdRxObjectPtr)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.customFlags'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdRxClassPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:newOdRxClass(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxClass*,=FUNC:OdRxObjectPtr,System.Int32,System.Int32,System.Int32,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,=FUNC:System.Void(OdRxClass!System.Runtime.CompilerServices.IsConst*,OdString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32),System.Int32,=FUNC:System.Void(OdRxMemberCollectionBuilder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void*),System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDictionaryIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionaryIterator.getKey'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionaryIterator.id'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.reserve(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.getAt(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.getAt(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.putAt(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxObject*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.putAt(System.UInt32!System.Runtime.CompilerServices.IsLong,OdRxObject*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.resetKey(System.UInt32!System.Runtime.CompilerServices.IsLong,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.remove(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.remove(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.has(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.has(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.idAt(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.keyAt(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.numEntries'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.newIterator(OdRx.DictIterType)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.isCaseSensitive'. -->
        <!-- Discarding badly formed XML document comment for member 'M:odrxSysRegistry'. -->
        <!-- Discarding badly formed XML document comment for member 'M:odrxClassDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDrawable'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiDrawablePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDrawableOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:IOdRxNonBlittableType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:IOdRxEnumeration'. -->
        <!-- Discarding badly formed XML document comment for member 'T:IOdRxReferenceType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:IOdRxObjectValue'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxValueType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdStreamBuf'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_FileException'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_FileNotFound'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_CantOpenFile'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_FileWriteError'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_InvalidIndex'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_InvalidKey'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxSystemServices'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdArrayBuffer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMember'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxEnumTag'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberCollection'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberCollectionBuilder'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberQueryContext'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxFacetProvider'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberReactor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberQueryEngine'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiLayerOverrides'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiLayerOverridesPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiAuxiliaryData'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiAuxiliaryDataPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDrawableTraits'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiSubEntityTraits'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setLayer(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setLineWeight(OdDb.LineWeight)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setMaterial(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setMapper(OdGiMapper!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setVisualStyle(OdDbStub!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setSelectionGeom(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setShadowFlags(OdGiSubEntityTraits.ShadowFlags)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setSectionable(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.layer'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.lineWeight'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.material'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.mapper'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.visualStyle'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.selectionGeom'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.shadowFlags'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.sectionable'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.addLight(OdDbStub!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiSubEntityTraitsPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCmEntityColor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCmColorBase'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCmTransparency'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxValue'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxValue.#ctor(OdRxValueType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxBoxedValue'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxBoxedValueOnStack'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdDAIObjectSDAI.isInstanceOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdDAIObjectSDAI.isKindOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdDAIObjectSDAI.getInstanceType'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.OdDAIObjectSDAIPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDAI.OdSDAIInstance'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdSDAIInstance.isInstanceOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdSDAIInstance.isKindOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdSDAIInstance.getInstanceType'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.DictionaryInstancePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.ApplicationInstance.isInstanceOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.ApplicationInstance.isKindOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.ApplicationInstancePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIObjectId.openObject(OdDAI.OpenMode,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIObjectId.getNested'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAIObjectIds'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Select.nullify'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.NamedTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.NamedTypeDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxPropertyBase'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxPropertyOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxPromotingQueryContext'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxValueIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCollectionProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCollectionPropertyOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxIndexedProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDictionaryProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxSubProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxSubPropertyOfIndexedProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxIndexedSubProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxSpecifiedValueType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAttributeImpl'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdRxAttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAttributeCollection'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxResourceLoader'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxLocalizedNameAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAlternateLocalizedNameAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUiPlacementAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDescriptionAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxRefersToAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCOMAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxFilePathAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxFlagsAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUnitTypeAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUseDialogForReferredCollectionAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUiCascadingContextMenuAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCumulativeAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAffinityAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxTypePromotionAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUnionTypeAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDefaultValueAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxHierarchyLevelAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDisplayAsAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCategory'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Attribute.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Attribute.entityDef'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.AttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.AttributeSet'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.OdSimpleTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.SimpleTypeDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.AggregationTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.AggregationTypeDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.DerivedAttribute.createObject(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,OdDAI.Entity*,OdDAI.DictionaryInstance*,OdDAI.ExplicitOrDerived*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.DerivedAttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.ExplicitAttribute.createObject(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,OdDAI.Entity*,OdDAI.DictionaryInstance*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.ExplicitAttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.InverseAttribute.createObject(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,OdDAI.Entity*,OdDAI.Entity!System.Runtime.CompilerServices.IsConst*,OdDAI.ExplicitAttribute!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.InverseAttribute.invertedAttr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.InverseAttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Entity.createObject(OdDAI.Schema*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean,OdDAI.Entity**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.EntityPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.EntitySet'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.EntityList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.EnumerationType.createObject(OdSharedPtr<OdTypeCode>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.list<OdAnsiString,std.allocator<OdAnsiString>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.EnumerationTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.SelectType.createObject(OdSharedPtr<OdTypeCode>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set<OdDAI.NamedType!System.Runtime.CompilerServices.IsConst**,std.less<OdDAI.NamedType!System.Runtime.CompilerServices.IsConst**>,std.allocator<OdDAI.NamedType!System.Runtime.CompilerServices.IsConst**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.SelectTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.NamedTypeSet'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.ConstructedTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.UnderlyingTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.DefinedType.createObject(OdDAI.Schema*,OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdSharedPtr<OdTypeCode>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdSmartPtr<OdDAI.UnderlyingType>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.DefinedType.#ctor(OdDAI.Schema*,OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdSharedPtr<OdTypeCode>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdSmartPtr<OdDAI.UnderlyingType>)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.DefinedTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.DefinedTypeSet'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.SchemaPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RxSystemServicesImpl'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ExSystemServices'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.SessionInstancePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:sdaiGetAttrs(Sdai_instS*,System.Int32,Sdai_instS*,SdaiPrimitiveType,System.Void*,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:sdaiGetAttrsBN(Sdai_instS*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,SdaiPrimitiveType,System.Void*,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Repository.getHeaderSection'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Repository.readHeaderSection(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Repository.readHeaderSection(OdSmartPtr<OdStreamBuf>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Repository.attachTo(OdDAIHostAppServicesBase*,OdRxObject*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxModule'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxModule.initApp'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxModule.uninitApp'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdRxModulePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDynamicLinker'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCharMapper'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdCharMapper.addBigFonts(OdStreamBuf*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCharacterProperties'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdTextProperties'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdFont'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdBaseTextIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiSectionGeometryManagerPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiContext'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiContext.textQuality'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiContext.lineWeightConfiguration(OdGiContext.LineWeightStyle)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiContext.ttfPolyDraw'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiCommonDraw'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDrawFlagsHelper'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDefaultContext'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeTol'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeLibVersion'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGe'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeContext'. -->
        <!-- Discarding badly formed XML document comment for member 'F:OdGeContext.gOrthoVector'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeLoopCtx'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_GeNotImplemted'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeVector2d'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.normal(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.normalize(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.normalize(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.normalizeGetLength(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.isParallelTo(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.isCodirectionalTo(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGePoint2d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsDCPoint'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsDCRect'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsDCRectDouble'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiContextualColors'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiContextualColorsImpl'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiContextualColorsRedir'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsView'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.device'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.lineweightToDcScale'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setLineweightToDcScale(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setLineweightEnum(System.Int32,System.Byte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.beginInteractivity(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.isInInteractivity'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.interactivityFrameRate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.endInteractivity'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.freezeLayer(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.thawLayer(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.clearFrozenLayers'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.select(OdGsDCPoint!System.Runtime.CompilerServices.IsConst*,System.Int32,OdGsSelectionReactor*,OdGsView.SelectionMode)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setBackground(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.background'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setVisualStyle(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.visualStyle'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setVisualStyle(OdGiVisualStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.visualStyle(OdGiVisualStyle*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.enableDefaultLighting(System.Boolean,OdGsView.DefaultLightingType)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.collide(OdGiPathNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,OdGsCollisionDetectionReactor*,OdGiPathNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,OdGsCollisionDetectionContext!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsClientViewInfo'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsCollisionDetectionReactor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsCollisionDetectionContext'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsDevice'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsDevice.properties'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsReactor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsModule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiLinetypeDash'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiLinetype'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeEntity2d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeInterval'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeCurve2d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGePoint3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeVector3d'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.angleTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.normal(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.normalize(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.normalize(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.normalizeGetLength(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.isParallelTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.isCodirectionalTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.isPerpendicularTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeEntity3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeMatrix2d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeMatrix3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeExtents3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeBoundBlock3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdTimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdUnitsFormatter'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdUnitsFormatterTool'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseDatabasePE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseLayerPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseVisualStylePE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseAnnotationScalePE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseLayoutPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbSetBasePlotSettingsPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseBlockPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseBlockRefPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseSortEntsPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseLongTransactionPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseHatchPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseMaterialPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbHostAppProgressMeter'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeCurve3d'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeCurve3d.appendSamplePoints(System.Double,System.Double,System.Double,OdArray<OdGePoint3d,OdMemoryAllocator<OdGePoint3d>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdArray<System.Double,OdMemoryAllocator<System.Double>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:BrepType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:BrepBuilderErrorsHolder'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdBrepBuilder'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseHostAppServices'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIHostAppServicesBase.databaseClass'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIHostAppServicesBase.modelClass'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIHostAppServicesBase.getHeaderSection(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.OdSDAIModulePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdIfcCoreModulePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:getDrawableShapeRepresentation(OdSmartPtr<OdGiDrawable>,OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdDAI.Model*,OdDAIObjectId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:getDrawableShapeRepresentation(OdArray<OdSmartPtr<OdGiDrawable>,OdObjectsAllocator<OdSmartPtr<OdGiDrawable>>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdDAI.Model*,OdDAIObjectId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.InstanceIteratorPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDAI.Model'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Model.getEntityInstance(OdDbHandle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Model.appendEntityInstance(OdSmartPtr<OdDAI.ApplicationInstance>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Model.getEntityExtent(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdIfc.OdIfcCompoundPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.isInstanceOf(OdIfc.OdIfcEntityType)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.type'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.getAttr(OdIfc.OdIfcAttribute!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.testAttr(OdIfc.OdIfcAttribute!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.unsetAttr(OdIfc.OdIfcAttribute!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.putAttr(OdIfc.OdIfcAttribute!System.Runtime.CompilerServices.IsConst,OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.resolved'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asPoint3d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asPoint2d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asVector3d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asVector2d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asMatrix2d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asMatrix3d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asCompound(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asRgbColor(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdIfc.OdIfcEntity'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcModelContext.getDeviationParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:STATIC_MODULE_DESC'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdIfc.OdIfcGeomModulePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getAppServices'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.setAppServices(OdIfcHostAppServices*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getHeaderSection'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getModel(SdaiAccessMode)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getContext'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getEntityId(OdIfcGUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.setContext(OdIfcModelContext!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.composeEntities'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.setContextSelection(OdArray<OdDAIObjectId,OdObjectsAllocator<OdDAIObjectId>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getUnitConverter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.get(OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.get(OdArray<OdDAIObjectId,OdObjectsAllocator<OdDAIObjectId>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdIfcFilePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.databaseClass'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.createDatabase(InitialSchema)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.getFontMapFileName'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.readFile(OdStreamBuf*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.readFile(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGUID'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdNonCopyable'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdMutex'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdMutexAutoLock'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRefCounter'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdVolatile'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdStringDataA'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdEmptyStringDataA'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdAnsiString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.compare(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.iCompare(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.assignCopy(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.concatCopy(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.concatInPlace(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.allocBeforeWrite(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdStringData'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.compare(System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.compare(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.compare(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.compare(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.iCompare(System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.iCompare(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.iCompare(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.assignCopy(System.Int32,System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.concatCopy(System.Int32,System.UInt16!System.Runtime.CompilerServices.IsConst*,System.Int32,System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.concatInPlace(System.Int32,System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.allocBeforeWrite(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdString.lessnocase'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdConstString'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdBaseObjectPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxObjMod'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxObjectPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.attach(OdRxObject!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.release'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.detach'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.op_Assign(OdRxObjectPtr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.get'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.op_MemberSelection'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.queryX(OdRxClass!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.x(OdRxClass!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.desc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.isA'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.addRef'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.release'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.numRefs'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.isKindOf(OdRxClass!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.comparedTo(OdRxObject!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.isEqualTo(OdRxObject!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_NotThatKindOfClass'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxClass'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.create'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.appName'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.appNameCallbackPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.dxfName'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.name'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.getClassVersion(OdDb.MaintReleaseVer*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.proxyFlags'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.isDerivedFrom(OdRxClass!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.myParent'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.module'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.constructor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.setConstructor(=FUNC:OdRxObjectPtr)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.customFlags'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdRxClassPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:newOdRxClass(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxClass*,=FUNC:OdRxObjectPtr,System.Int32,System.Int32,System.Int32,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,=FUNC:System.Void(OdRxClass!System.Runtime.CompilerServices.IsConst*,OdString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32),System.Int32,=FUNC:System.Void(OdRxMemberCollectionBuilder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void*),System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDictionaryIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionaryIterator.getKey'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionaryIterator.id'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.reserve(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.getAt(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.getAt(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.putAt(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxObject*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.putAt(System.UInt32!System.Runtime.CompilerServices.IsLong,OdRxObject*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.resetKey(System.UInt32!System.Runtime.CompilerServices.IsLong,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.remove(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.remove(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.has(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.has(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.idAt(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.keyAt(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.numEntries'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.newIterator(OdRx.DictIterType)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.isCaseSensitive'. -->
        <!-- Discarding badly formed XML document comment for member 'M:odrxSysRegistry'. -->
        <!-- Discarding badly formed XML document comment for member 'M:odrxClassDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDrawable'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiDrawablePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDrawableOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:IOdRxNonBlittableType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:IOdRxEnumeration'. -->
        <!-- Discarding badly formed XML document comment for member 'T:IOdRxReferenceType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:IOdRxObjectValue'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxValueType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdStreamBuf'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_FileException'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_FileNotFound'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_CantOpenFile'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_FileWriteError'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_InvalidIndex'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_InvalidKey'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxSystemServices'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdArrayBuffer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMember'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxEnumTag'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberCollection'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberCollectionBuilder'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberQueryContext'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxFacetProvider'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberReactor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberQueryEngine'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiLayerOverrides'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiLayerOverridesPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiAuxiliaryData'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiAuxiliaryDataPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDrawableTraits'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiSubEntityTraits'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setLayer(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setLineWeight(OdDb.LineWeight)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setMaterial(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setMapper(OdGiMapper!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setVisualStyle(OdDbStub!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setSelectionGeom(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setShadowFlags(OdGiSubEntityTraits.ShadowFlags)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setSectionable(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.layer'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.lineWeight'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.material'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.mapper'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.visualStyle'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.selectionGeom'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.shadowFlags'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.sectionable'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.addLight(OdDbStub!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiSubEntityTraitsPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCmEntityColor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCmColorBase'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCmTransparency'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxValue'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxValue.#ctor(OdRxValueType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxBoxedValue'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxBoxedValueOnStack'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdDAIObjectSDAI.isInstanceOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdDAIObjectSDAI.isKindOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdDAIObjectSDAI.getInstanceType'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.OdDAIObjectSDAIPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDAI.OdSDAIInstance'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdSDAIInstance.isInstanceOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdSDAIInstance.isKindOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdSDAIInstance.getInstanceType'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.DictionaryInstancePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.ApplicationInstance.isInstanceOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.ApplicationInstance.isKindOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.ApplicationInstancePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIObjectId.openObject(OdDAI.OpenMode,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIObjectId.getNested'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAIObjectIds'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Select.nullify'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.NamedTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.NamedTypeDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxPropertyBase'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxPropertyOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxPromotingQueryContext'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxValueIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCollectionProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCollectionPropertyOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxIndexedProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDictionaryProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxSubProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxSubPropertyOfIndexedProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxIndexedSubProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxSpecifiedValueType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAttributeImpl'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdRxAttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAttributeCollection'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxResourceLoader'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxLocalizedNameAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAlternateLocalizedNameAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUiPlacementAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDescriptionAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxRefersToAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCOMAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxFilePathAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxFlagsAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUnitTypeAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUseDialogForReferredCollectionAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUiCascadingContextMenuAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCumulativeAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAffinityAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxTypePromotionAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUnionTypeAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDefaultValueAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxHierarchyLevelAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDisplayAsAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCategory'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Attribute.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Attribute.entityDef'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.AttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.AttributeSet'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.OdSimpleTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.SimpleTypeDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.AggregationTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.AggregationTypeDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.DerivedAttribute.createObject(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,OdDAI.Entity*,OdDAI.DictionaryInstance*,OdDAI.ExplicitOrDerived*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.DerivedAttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.ExplicitAttribute.createObject(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,OdDAI.Entity*,OdDAI.DictionaryInstance*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.ExplicitAttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.InverseAttribute.createObject(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,OdDAI.Entity*,OdDAI.Entity!System.Runtime.CompilerServices.IsConst*,OdDAI.ExplicitAttribute!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.InverseAttribute.invertedAttr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.InverseAttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Entity.createObject(OdDAI.Schema*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean,OdDAI.Entity**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.EntityPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.EntitySet'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.EntityList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.EnumerationType.createObject(OdSharedPtr<OdTypeCode>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.list<OdAnsiString,std.allocator<OdAnsiString>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.EnumerationTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.SelectType.createObject(OdSharedPtr<OdTypeCode>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set<OdDAI.NamedType!System.Runtime.CompilerServices.IsConst**,std.less<OdDAI.NamedType!System.Runtime.CompilerServices.IsConst**>,std.allocator<OdDAI.NamedType!System.Runtime.CompilerServices.IsConst**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.SelectTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.NamedTypeSet'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.ConstructedTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.UnderlyingTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.DefinedType.createObject(OdDAI.Schema*,OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdSharedPtr<OdTypeCode>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdSmartPtr<OdDAI.UnderlyingType>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.DefinedType.#ctor(OdDAI.Schema*,OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdSharedPtr<OdTypeCode>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdSmartPtr<OdDAI.UnderlyingType>)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.DefinedTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.DefinedTypeSet'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.SchemaPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RxSystemServicesImpl'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ExSystemServices'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.SessionInstancePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:sdaiGetAttrs(Sdai_instS*,System.Int32,Sdai_instS*,SdaiPrimitiveType,System.Void*,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:sdaiGetAttrsBN(Sdai_instS*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,SdaiPrimitiveType,System.Void*,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Repository.getHeaderSection'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Repository.readHeaderSection(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Repository.readHeaderSection(OdSmartPtr<OdStreamBuf>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Repository.attachTo(OdDAIHostAppServicesBase*,OdRxObject*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxModule'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxModule.initApp'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxModule.uninitApp'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdRxModulePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDynamicLinker'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCharMapper'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdCharMapper.addBigFonts(OdStreamBuf*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCharacterProperties'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdTextProperties'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdFont'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdBaseTextIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiSectionGeometryManagerPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiContext'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiContext.textQuality'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiContext.lineWeightConfiguration(OdGiContext.LineWeightStyle)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiContext.ttfPolyDraw'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiCommonDraw'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDrawFlagsHelper'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDefaultContext'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeTol'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeLibVersion'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGe'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeContext'. -->
        <!-- Discarding badly formed XML document comment for member 'F:OdGeContext.gOrthoVector'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeLoopCtx'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_GeNotImplemted'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeVector2d'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.normal(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.normalize(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.normalize(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.normalizeGetLength(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.isParallelTo(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.isCodirectionalTo(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGePoint2d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsDCPoint'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsDCRect'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsDCRectDouble'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiContextualColors'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiContextualColorsImpl'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiContextualColorsRedir'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsView'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.device'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.lineweightToDcScale'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setLineweightToDcScale(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setLineweightEnum(System.Int32,System.Byte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.beginInteractivity(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.isInInteractivity'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.interactivityFrameRate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.endInteractivity'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.freezeLayer(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.thawLayer(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.clearFrozenLayers'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.select(OdGsDCPoint!System.Runtime.CompilerServices.IsConst*,System.Int32,OdGsSelectionReactor*,OdGsView.SelectionMode)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setBackground(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.background'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setVisualStyle(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.visualStyle'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setVisualStyle(OdGiVisualStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.visualStyle(OdGiVisualStyle*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.enableDefaultLighting(System.Boolean,OdGsView.DefaultLightingType)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.collide(OdGiPathNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,OdGsCollisionDetectionReactor*,OdGiPathNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,OdGsCollisionDetectionContext!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsClientViewInfo'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsCollisionDetectionReactor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsCollisionDetectionContext'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsDevice'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsDevice.properties'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsReactor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsModule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiLinetypeDash'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiLinetype'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeEntity2d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeInterval'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeCurve2d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGePoint3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeVector3d'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.angleTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.normal(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.normalize(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.normalize(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.normalizeGetLength(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.isParallelTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.isCodirectionalTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.isPerpendicularTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeEntity3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeMatrix2d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeMatrix3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeExtents3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeBoundBlock3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdTimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdUnitsFormatter'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdUnitsFormatterTool'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseDatabasePE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseLayerPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseVisualStylePE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseAnnotationScalePE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseLayoutPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbSetBasePlotSettingsPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseBlockPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseBlockRefPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseSortEntsPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseLongTransactionPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseHatchPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseMaterialPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbHostAppProgressMeter'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeCurve3d'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeCurve3d.appendSamplePoints(System.Double,System.Double,System.Double,OdArray<OdGePoint3d,OdMemoryAllocator<OdGePoint3d>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdArray<System.Double,OdMemoryAllocator<System.Double>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:BrepType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:BrepBuilderErrorsHolder'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdBrepBuilder'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseHostAppServices'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIHostAppServicesBase.databaseClass'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIHostAppServicesBase.modelClass'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIHostAppServicesBase.getHeaderSection(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.OdSDAIModulePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdIfcCoreModulePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:getDrawableShapeRepresentation(OdSmartPtr<OdGiDrawable>,OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdDAI.Model*,OdDAIObjectId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:getDrawableShapeRepresentation(OdArray<OdSmartPtr<OdGiDrawable>,OdObjectsAllocator<OdSmartPtr<OdGiDrawable>>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdDAI.Model*,OdDAIObjectId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.InstanceIteratorPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDAI.Model'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Model.getEntityInstance(OdDbHandle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Model.appendEntityInstance(OdSmartPtr<OdDAI.ApplicationInstance>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Model.getEntityExtent(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdIfc.OdIfcCompoundPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.isInstanceOf(OdIfc.OdIfcEntityType)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.type'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.getAttr(OdIfc.OdIfcAttribute!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.testAttr(OdIfc.OdIfcAttribute!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.unsetAttr(OdIfc.OdIfcAttribute!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.putAttr(OdIfc.OdIfcAttribute!System.Runtime.CompilerServices.IsConst,OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.resolved'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asPoint3d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asPoint2d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asVector3d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asVector2d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asMatrix2d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asMatrix3d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asCompound(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asRgbColor(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdIfc.OdIfcEntity'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcModelContext.getDeviationParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:STATIC_MODULE_DESC'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdIfc.OdIfcGeomModulePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getAppServices'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.setAppServices(OdIfcHostAppServices*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getHeaderSection'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getModel(SdaiAccessMode)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getContext'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getEntityId(OdIfcGUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.setContext(OdIfcModelContext!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.composeEntities'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.setContextSelection(OdArray<OdDAIObjectId,OdObjectsAllocator<OdDAIObjectId>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getUnitConverter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.get(OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.get(OdArray<OdDAIObjectId,OdObjectsAllocator<OdDAIObjectId>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdIfcFilePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.databaseClass'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.createDatabase(InitialSchema)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.getFontMapFileName'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.readFile(OdStreamBuf*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.readFile(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGUID'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdNonCopyable'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdMutex'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdMutexAutoLock'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRefCounter'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdVolatile'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdStringDataA'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdEmptyStringDataA'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdAnsiString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.compare(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.iCompare(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.assignCopy(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.concatCopy(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.concatInPlace(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.allocBeforeWrite(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdStringData'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.compare(System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.compare(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.compare(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.compare(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.iCompare(System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.iCompare(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.iCompare(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.assignCopy(System.Int32,System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.concatCopy(System.Int32,System.UInt16!System.Runtime.CompilerServices.IsConst*,System.Int32,System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.concatInPlace(System.Int32,System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.allocBeforeWrite(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdString.lessnocase'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdConstString'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdBaseObjectPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxObjMod'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxObjectPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.attach(OdRxObject!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.release'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.detach'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.op_Assign(OdRxObjectPtr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.get'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.op_MemberSelection'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.queryX(OdRxClass!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.x(OdRxClass!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.desc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.isA'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.addRef'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.release'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.numRefs'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.isKindOf(OdRxClass!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.comparedTo(OdRxObject!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.isEqualTo(OdRxObject!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_NotThatKindOfClass'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxClass'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.create'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.appName'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.appNameCallbackPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.dxfName'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.name'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.getClassVersion(OdDb.MaintReleaseVer*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.proxyFlags'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.isDerivedFrom(OdRxClass!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.myParent'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.module'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.constructor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.setConstructor(=FUNC:OdRxObjectPtr)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.customFlags'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdRxClassPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:newOdRxClass(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxClass*,=FUNC:OdRxObjectPtr,System.Int32,System.Int32,System.Int32,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,=FUNC:System.Void(OdRxClass!System.Runtime.CompilerServices.IsConst*,OdString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32),System.Int32,=FUNC:System.Void(OdRxMemberCollectionBuilder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void*),System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDictionaryIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionaryIterator.getKey'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionaryIterator.id'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.reserve(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.getAt(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.getAt(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.putAt(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxObject*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.putAt(System.UInt32!System.Runtime.CompilerServices.IsLong,OdRxObject*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.resetKey(System.UInt32!System.Runtime.CompilerServices.IsLong,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.remove(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.remove(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.has(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.has(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.idAt(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.keyAt(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.numEntries'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.newIterator(OdRx.DictIterType)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.isCaseSensitive'. -->
        <!-- Discarding badly formed XML document comment for member 'M:odrxSysRegistry'. -->
        <!-- Discarding badly formed XML document comment for member 'M:odrxClassDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDrawable'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiDrawablePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDrawableOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:IOdRxNonBlittableType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:IOdRxEnumeration'. -->
        <!-- Discarding badly formed XML document comment for member 'T:IOdRxReferenceType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:IOdRxObjectValue'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxValueType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdStreamBuf'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_FileException'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_FileNotFound'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_CantOpenFile'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_FileWriteError'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_InvalidIndex'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_InvalidKey'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxSystemServices'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdArrayBuffer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMember'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxEnumTag'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberCollection'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberCollectionBuilder'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberQueryContext'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxFacetProvider'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberReactor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberQueryEngine'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiLayerOverrides'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiLayerOverridesPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiAuxiliaryData'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiAuxiliaryDataPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDrawableTraits'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiSubEntityTraits'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setLayer(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setLineWeight(OdDb.LineWeight)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setMaterial(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setMapper(OdGiMapper!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setVisualStyle(OdDbStub!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setSelectionGeom(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setShadowFlags(OdGiSubEntityTraits.ShadowFlags)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setSectionable(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.layer'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.lineWeight'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.material'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.mapper'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.visualStyle'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.selectionGeom'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.shadowFlags'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.sectionable'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.addLight(OdDbStub!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiSubEntityTraitsPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCmEntityColor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCmColorBase'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCmTransparency'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxValue'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxValue.#ctor(OdRxValueType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxBoxedValue'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxBoxedValueOnStack'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdDAIObjectSDAI.isInstanceOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdDAIObjectSDAI.isKindOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdDAIObjectSDAI.getInstanceType'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.OdDAIObjectSDAIPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDAI.OdSDAIInstance'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdSDAIInstance.isInstanceOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdSDAIInstance.isKindOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdSDAIInstance.getInstanceType'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.DictionaryInstancePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.ApplicationInstance.isInstanceOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.ApplicationInstance.isKindOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.ApplicationInstancePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIObjectId.openObject(OdDAI.OpenMode,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIObjectId.getNested'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAIObjectIds'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Select.nullify'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.NamedTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.NamedTypeDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxPropertyBase'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxPropertyOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxPromotingQueryContext'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxValueIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCollectionProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCollectionPropertyOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxIndexedProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDictionaryProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxSubProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxSubPropertyOfIndexedProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxIndexedSubProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxSpecifiedValueType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAttributeImpl'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdRxAttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAttributeCollection'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxResourceLoader'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxLocalizedNameAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAlternateLocalizedNameAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUiPlacementAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDescriptionAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxRefersToAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCOMAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxFilePathAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxFlagsAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUnitTypeAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUseDialogForReferredCollectionAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUiCascadingContextMenuAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCumulativeAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAffinityAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxTypePromotionAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUnionTypeAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDefaultValueAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxHierarchyLevelAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDisplayAsAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCategory'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Attribute.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Attribute.entityDef'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.AttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.AttributeSet'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.OdSimpleTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.SimpleTypeDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.AggregationTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.AggregationTypeDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.DerivedAttribute.createObject(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,OdDAI.Entity*,OdDAI.DictionaryInstance*,OdDAI.ExplicitOrDerived*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.DerivedAttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.ExplicitAttribute.createObject(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,OdDAI.Entity*,OdDAI.DictionaryInstance*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.ExplicitAttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.InverseAttribute.createObject(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,OdDAI.Entity*,OdDAI.Entity!System.Runtime.CompilerServices.IsConst*,OdDAI.ExplicitAttribute!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.InverseAttribute.invertedAttr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.InverseAttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Entity.createObject(OdDAI.Schema*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean,OdDAI.Entity**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.EntityPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.EntitySet'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.EntityList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.EnumerationType.createObject(OdSharedPtr<OdTypeCode>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.list<OdAnsiString,std.allocator<OdAnsiString>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.EnumerationTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.SelectType.createObject(OdSharedPtr<OdTypeCode>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set<OdDAI.NamedType!System.Runtime.CompilerServices.IsConst**,std.less<OdDAI.NamedType!System.Runtime.CompilerServices.IsConst**>,std.allocator<OdDAI.NamedType!System.Runtime.CompilerServices.IsConst**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.SelectTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.NamedTypeSet'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.ConstructedTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.UnderlyingTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.DefinedType.createObject(OdDAI.Schema*,OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdSharedPtr<OdTypeCode>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdSmartPtr<OdDAI.UnderlyingType>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.DefinedType.#ctor(OdDAI.Schema*,OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdSharedPtr<OdTypeCode>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdSmartPtr<OdDAI.UnderlyingType>)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.DefinedTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.DefinedTypeSet'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.SchemaPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RxSystemServicesImpl'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ExSystemServices'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.SessionInstancePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:sdaiGetAttrs(Sdai_instS*,System.Int32,Sdai_instS*,SdaiPrimitiveType,System.Void*,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:sdaiGetAttrsBN(Sdai_instS*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,SdaiPrimitiveType,System.Void*,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Repository.getHeaderSection'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Repository.readHeaderSection(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Repository.readHeaderSection(OdSmartPtr<OdStreamBuf>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Repository.attachTo(OdDAIHostAppServicesBase*,OdRxObject*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxModule'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxModule.initApp'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxModule.uninitApp'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdRxModulePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDynamicLinker'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCharMapper'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdCharMapper.addBigFonts(OdStreamBuf*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCharacterProperties'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdTextProperties'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdFont'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdBaseTextIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiSectionGeometryManagerPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiContext'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiContext.textQuality'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiContext.lineWeightConfiguration(OdGiContext.LineWeightStyle)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiContext.ttfPolyDraw'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiCommonDraw'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDrawFlagsHelper'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDefaultContext'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeTol'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeLibVersion'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGe'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeContext'. -->
        <!-- Discarding badly formed XML document comment for member 'F:OdGeContext.gOrthoVector'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeLoopCtx'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_GeNotImplemted'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeVector2d'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.normal(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.normalize(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.normalize(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.normalizeGetLength(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.isParallelTo(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.isCodirectionalTo(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGePoint2d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsDCPoint'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsDCRect'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsDCRectDouble'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiContextualColors'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiContextualColorsImpl'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiContextualColorsRedir'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsView'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.device'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.lineweightToDcScale'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setLineweightToDcScale(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setLineweightEnum(System.Int32,System.Byte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.beginInteractivity(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.isInInteractivity'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.interactivityFrameRate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.endInteractivity'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.freezeLayer(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.thawLayer(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.clearFrozenLayers'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.select(OdGsDCPoint!System.Runtime.CompilerServices.IsConst*,System.Int32,OdGsSelectionReactor*,OdGsView.SelectionMode)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setBackground(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.background'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setVisualStyle(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.visualStyle'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setVisualStyle(OdGiVisualStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.visualStyle(OdGiVisualStyle*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.enableDefaultLighting(System.Boolean,OdGsView.DefaultLightingType)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.collide(OdGiPathNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,OdGsCollisionDetectionReactor*,OdGiPathNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,OdGsCollisionDetectionContext!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsClientViewInfo'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsCollisionDetectionReactor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsCollisionDetectionContext'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsDevice'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsDevice.properties'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsReactor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsModule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiLinetypeDash'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiLinetype'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeEntity2d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeInterval'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeCurve2d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGePoint3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeVector3d'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.angleTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.normal(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.normalize(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.normalize(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.normalizeGetLength(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.isParallelTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.isCodirectionalTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.isPerpendicularTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeEntity3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeMatrix2d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeMatrix3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeExtents3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeBoundBlock3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdTimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdUnitsFormatter'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdUnitsFormatterTool'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseDatabasePE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseLayerPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseVisualStylePE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseAnnotationScalePE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseLayoutPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbSetBasePlotSettingsPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseBlockPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseBlockRefPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseSortEntsPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseLongTransactionPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseHatchPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseMaterialPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbHostAppProgressMeter'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeCurve3d'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeCurve3d.appendSamplePoints(System.Double,System.Double,System.Double,OdArray<OdGePoint3d,OdMemoryAllocator<OdGePoint3d>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdArray<System.Double,OdMemoryAllocator<System.Double>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:BrepType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:BrepBuilderErrorsHolder'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdBrepBuilder'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseHostAppServices'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIHostAppServicesBase.databaseClass'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIHostAppServicesBase.modelClass'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIHostAppServicesBase.getHeaderSection(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.OdSDAIModulePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdIfcCoreModulePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:getDrawableShapeRepresentation(OdSmartPtr<OdGiDrawable>,OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdDAI.Model*,OdDAIObjectId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:getDrawableShapeRepresentation(OdArray<OdSmartPtr<OdGiDrawable>,OdObjectsAllocator<OdSmartPtr<OdGiDrawable>>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdDAI.Model*,OdDAIObjectId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.InstanceIteratorPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDAI.Model'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Model.getEntityInstance(OdDbHandle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Model.appendEntityInstance(OdSmartPtr<OdDAI.ApplicationInstance>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Model.getEntityExtent(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdIfc.OdIfcCompoundPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.isInstanceOf(OdIfc.OdIfcEntityType)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.type'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.getAttr(OdIfc.OdIfcAttribute!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.testAttr(OdIfc.OdIfcAttribute!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.unsetAttr(OdIfc.OdIfcAttribute!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.putAttr(OdIfc.OdIfcAttribute!System.Runtime.CompilerServices.IsConst,OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.resolved'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asPoint3d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asPoint2d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asVector3d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asVector2d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asMatrix2d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asMatrix3d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asCompound(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asRgbColor(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdIfc.OdIfcEntity'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcModelContext.getDeviationParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:STATIC_MODULE_DESC'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdIfc.OdIfcGeomModulePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getAppServices'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.setAppServices(OdIfcHostAppServices*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getHeaderSection'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getModel(SdaiAccessMode)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getContext'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getEntityId(OdIfcGUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.setContext(OdIfcModelContext!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.composeEntities'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.setContextSelection(OdArray<OdDAIObjectId,OdObjectsAllocator<OdDAIObjectId>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getUnitConverter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.get(OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.get(OdArray<OdDAIObjectId,OdObjectsAllocator<OdDAIObjectId>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdIfcFilePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.databaseClass'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.createDatabase(InitialSchema)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.getFontMapFileName'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.readFile(OdStreamBuf*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.readFile(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGUID'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdNonCopyable'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdMutex'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdMutexAutoLock'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRefCounter'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdVolatile'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdStringDataA'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdEmptyStringDataA'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdAnsiString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.compare(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.iCompare(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.assignCopy(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.concatCopy(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.concatInPlace(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdAnsiString.allocBeforeWrite(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdStringData'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdString'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.compare(System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.compare(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.compare(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.compare(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.iCompare(System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.iCompare(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.iCompare(System.Char!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.assignCopy(System.Int32,System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.concatCopy(System.Int32,System.UInt16!System.Runtime.CompilerServices.IsConst*,System.Int32,System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.concatInPlace(System.Int32,System.UInt16!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdString.allocBeforeWrite(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdString.lessnocase'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdConstString'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdBaseObjectPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxObjMod'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxObjectPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.attach(OdRxObject!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.release'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.detach'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.op_Assign(OdRxObjectPtr!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.get'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObjectPtr.op_MemberSelection'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxObject'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.queryX(OdRxClass!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.x(OdRxClass!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.desc'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.isA'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.addRef'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.release'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.numRefs'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.isKindOf(OdRxClass!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.comparedTo(OdRxObject!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxObject.isEqualTo(OdRxObject!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_NotThatKindOfClass'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxClass'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.create'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.appName'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.appNameCallbackPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.dxfName'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.name'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.getClassVersion(OdDb.MaintReleaseVer*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.proxyFlags'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.isDerivedFrom(OdRxClass!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.myParent'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.module'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.constructor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.setConstructor(=FUNC:OdRxObjectPtr)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxClass.customFlags'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdRxClassPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:newOdRxClass(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxClass*,=FUNC:OdRxObjectPtr,System.Int32,System.Int32,System.Int32,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,=FUNC:System.Void(OdRxClass!System.Runtime.CompilerServices.IsConst*,OdString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32),System.Int32,=FUNC:System.Void(OdRxMemberCollectionBuilder*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void*),System.Void*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDictionaryIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionaryIterator.getKey'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionaryIterator.id'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.reserve(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.getAt(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.getAt(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.putAt(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxObject*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.putAt(System.UInt32!System.Runtime.CompilerServices.IsLong,OdRxObject*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.resetKey(System.UInt32!System.Runtime.CompilerServices.IsLong,OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.remove(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.remove(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.has(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.has(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.idAt(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.keyAt(System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.numEntries'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.newIterator(OdRx.DictIterType)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxDictionary.isCaseSensitive'. -->
        <!-- Discarding badly formed XML document comment for member 'M:odrxSysRegistry'. -->
        <!-- Discarding badly formed XML document comment for member 'M:odrxClassDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDrawable'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiDrawablePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDrawableOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:IOdRxNonBlittableType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:IOdRxEnumeration'. -->
        <!-- Discarding badly formed XML document comment for member 'T:IOdRxReferenceType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:IOdRxObjectValue'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxValueType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdStreamBuf'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_FileException'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_FileNotFound'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_CantOpenFile'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_FileWriteError'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_InvalidIndex'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_InvalidKey'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxSystemServices'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdArrayBuffer'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMember'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxEnumTag'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberCollection'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberCollectionBuilder'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberQueryContext'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxFacetProvider'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberReactor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberQueryEngine'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxMemberOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiLayerOverrides'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiLayerOverridesPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiAuxiliaryData'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiAuxiliaryDataPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDrawableTraits'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiSubEntityTraits'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setLayer(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setLineWeight(OdDb.LineWeight)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setMaterial(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setMapper(OdGiMapper!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setVisualStyle(OdDbStub!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setSelectionGeom(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setShadowFlags(OdGiSubEntityTraits.ShadowFlags)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.setSectionable(System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.layer'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.lineWeight'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.material'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.mapper'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.visualStyle'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.selectionGeom'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.shadowFlags'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.sectionable'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiSubEntityTraits.addLight(OdDbStub!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiSubEntityTraitsPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCmEntityColor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCmColorBase'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCmTransparency'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbHandle'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxValue'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxValue.#ctor(OdRxValueType!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxBoxedValue'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxBoxedValueOnStack'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdDAIObjectSDAI.isInstanceOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdDAIObjectSDAI.isKindOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdDAIObjectSDAI.getInstanceType'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.OdDAIObjectSDAIPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDAI.OdSDAIInstance'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdSDAIInstance.isInstanceOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdSDAIInstance.isKindOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.OdSDAIInstance.getInstanceType'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.DictionaryInstancePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.ApplicationInstance.isInstanceOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.ApplicationInstance.isKindOf(OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.ApplicationInstancePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIObjectId.openObject(OdDAI.OpenMode,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIObjectId.getNested'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAIObjectIds'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Select.nullify'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.NamedTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.NamedTypeDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxPropertyBase'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxPropertyOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxPromotingQueryContext'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxValueIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCollectionProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCollectionPropertyOverrule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxIndexedProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDictionaryProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxSubProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxSubPropertyOfIndexedProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxIndexedSubProperty'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxSpecifiedValueType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAttributeImpl'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdRxAttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAttributeCollection'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxResourceLoader'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxLocalizedNameAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAlternateLocalizedNameAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUiPlacementAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDescriptionAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxRefersToAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCOMAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxFilePathAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxFlagsAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUnitTypeAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUseDialogForReferredCollectionAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUiCascadingContextMenuAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCumulativeAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxAffinityAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxTypePromotionAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxUnionTypeAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDefaultValueAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxHierarchyLevelAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDisplayAsAttribute'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxCategory'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Attribute.#ctor'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Attribute.entityDef'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.AttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.AttributeSet'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.OdSimpleTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.SimpleTypeDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.AggregationTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.AggregationTypeDictionary'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.DerivedAttribute.createObject(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,OdDAI.Entity*,OdDAI.DictionaryInstance*,OdDAI.ExplicitOrDerived*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.DerivedAttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.ExplicitAttribute.createObject(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,OdDAI.Entity*,OdDAI.DictionaryInstance*,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.ExplicitAttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.InverseAttribute.createObject(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,OdDAI.Entity*,OdDAI.Entity!System.Runtime.CompilerServices.IsConst*,OdDAI.ExplicitAttribute!System.Runtime.CompilerServices.IsConst*,System.Int32,System.Int32,System.Boolean)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.InverseAttribute.invertedAttr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.InverseAttributePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Entity.createObject(OdDAI.Schema*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.Boolean,OdDAI.Entity**!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdDAI.Entity!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.EntityPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.EntitySet'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.EntityList'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.EnumerationType.createObject(OdSharedPtr<OdTypeCode>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.list<OdAnsiString,std.allocator<OdAnsiString>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.EnumerationTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.SelectType.createObject(OdSharedPtr<OdTypeCode>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.set<OdDAI.NamedType!System.Runtime.CompilerServices.IsConst**,std.less<OdDAI.NamedType!System.Runtime.CompilerServices.IsConst**>,std.allocator<OdDAI.NamedType!System.Runtime.CompilerServices.IsConst**>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.SelectTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.NamedTypeSet'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.ConstructedTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.UnderlyingTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.DefinedType.createObject(OdDAI.Schema*,OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdSharedPtr<OdTypeCode>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdSmartPtr<OdDAI.UnderlyingType>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.DefinedType.#ctor(OdDAI.Schema*,OdAnsiString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdSharedPtr<OdTypeCode>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdSmartPtr<OdDAI.UnderlyingType>)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.DefinedTypePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.DefinedTypeSet'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.SchemaPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:RxSystemServicesImpl'. -->
        <!-- Discarding badly formed XML document comment for member 'T:ExSystemServices'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.SessionInstancePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:sdaiGetAttrs(Sdai_instS*,System.Int32,Sdai_instS*,SdaiPrimitiveType,System.Void*,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:sdaiGetAttrsBN(Sdai_instS*,System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,SdaiPrimitiveType,System.Void*,BTEllipsis)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Repository.getHeaderSection'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Repository.readHeaderSection(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Repository.readHeaderSection(OdSmartPtr<OdStreamBuf>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Repository.attachTo(OdDAIHostAppServicesBase*,OdRxObject*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxModule'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxModule.initApp'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdRxModule.uninitApp'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdRxModulePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdRxDynamicLinker'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCharMapper'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdCharMapper.addBigFonts(OdStreamBuf*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdCharacterProperties'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdTextProperties'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdFont'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdBaseTextIterator'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdGiSectionGeometryManagerPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiContext'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiContext.textQuality'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiContext.lineWeightConfiguration(OdGiContext.LineWeightStyle)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGiContext.ttfPolyDraw'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiCommonDraw'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDrawFlagsHelper'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiDefaultContext'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeTol'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeLibVersion'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGe'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeContext'. -->
        <!-- Discarding badly formed XML document comment for member 'F:OdGeContext.gOrthoVector'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeLoopCtx'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdError_GeNotImplemted'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeVector2d'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.normal(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.normalize(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.normalize(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.normalizeGetLength(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.isParallelTo(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector2d.isCodirectionalTo(OdGeVector2d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGePoint2d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsDCPoint'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsDCRect'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsDCRectDouble'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiContextualColors'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiContextualColorsImpl'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiContextualColorsRedir'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsView'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.device'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.lineweightToDcScale'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setLineweightToDcScale(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setLineweightEnum(System.Int32,System.Byte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.beginInteractivity(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.isInInteractivity'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.interactivityFrameRate'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.endInteractivity'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.freezeLayer(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.thawLayer(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.clearFrozenLayers'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.select(OdGsDCPoint!System.Runtime.CompilerServices.IsConst*,System.Int32,OdGsSelectionReactor*,OdGsView.SelectionMode)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setBackground(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.background'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setVisualStyle(OdDbStub*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.visualStyle'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.setVisualStyle(OdGiVisualStyle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.visualStyle(OdGiVisualStyle*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.enableDefaultLighting(System.Boolean,OdGsView.DefaultLightingType)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsView.collide(OdGiPathNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,OdGsCollisionDetectionReactor*,OdGiPathNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,OdGsCollisionDetectionContext!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsClientViewInfo'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsCollisionDetectionReactor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsCollisionDetectionContext'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsDevice'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGsDevice.properties'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsReactor'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGsModule'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiLinetypeDash'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGiLinetype'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeEntity2d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeInterval'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeCurve2d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGePoint3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeVector3d'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.angleTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.normal(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.normalize(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.normalize(OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.normalizeGetLength(System.Double)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.isParallelTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.isCodirectionalTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeVector3d.isPerpendicularTo(OdGeVector3d!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGeTol!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdGe.ErrorCondition*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeEntity3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeMatrix2d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeMatrix3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeExtents3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeBoundBlock3d'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdTimeStamp'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdUnitsFormatter'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdUnitsFormatterTool'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseDatabasePE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseLayerPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseVisualStylePE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseAnnotationScalePE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseLayoutPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbSetBasePlotSettingsPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseBlockPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseBlockRefPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseSortEntsPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseLongTransactionPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseHatchPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseMaterialPE'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbHostAppProgressMeter'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdGeCurve3d'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdGeCurve3d.appendSamplePoints(System.Double,System.Double,System.Double,OdArray<OdGePoint3d,OdMemoryAllocator<OdGePoint3d>>*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdArray<System.Double,OdMemoryAllocator<System.Double>>*)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:BrepType'. -->
        <!-- Discarding badly formed XML document comment for member 'T:BrepBuilderErrorsHolder'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdBrepBuilder'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDbBaseHostAppServices'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIHostAppServicesBase.databaseClass'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIHostAppServicesBase.modelClass'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAIHostAppServicesBase.getHeaderSection(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.OdSDAIModulePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdIfcCoreModulePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:getDrawableShapeRepresentation(OdSmartPtr<OdGiDrawable>,OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdDAI.Model*,OdDAIObjectId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:getDrawableShapeRepresentation(OdArray<OdSmartPtr<OdGiDrawable>,OdObjectsAllocator<OdSmartPtr<OdGiDrawable>>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,OdDAI.Model*,OdDAIObjectId*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdDAI.InstanceIteratorPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdDAI.Model'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Model.getEntityInstance(OdDbHandle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Model.appendEntityInstance(OdSmartPtr<OdDAI.ApplicationInstance>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdDAI.Model.getEntityExtent(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdIfc.OdIfcCompoundPtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.isInstanceOf(OdIfc.OdIfcEntityType)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.type'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.getAttr(OdIfc.OdIfcAttribute!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.testAttr(OdIfc.OdIfcAttribute!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.unsetAttr(OdIfc.OdIfcAttribute!System.Runtime.CompilerServices.IsConst)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.putAttr(OdIfc.OdIfcAttribute!System.Runtime.CompilerServices.IsConst,OdRxValue!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.resolved'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asPoint3d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asPoint2d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asVector3d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asVector2d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asMatrix2d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asMatrix3d(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asCompound(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfc.OdIfcEntity.asRgbColor(OdSmartPtr<OdIfc.OdIfcEntity>)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:OdIfc.OdIfcEntity'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcModelContext.getDeviationParams'. -->
        <!-- Discarding badly formed XML document comment for member 'T:STATIC_MODULE_DESC'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdIfc.OdIfcGeomModulePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getAppServices'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.setAppServices(OdIfcHostAppServices*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getHeaderSection'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getModel(SdaiAccessMode)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getContext'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getEntityId(OdIfcGUID!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.setContext(OdIfcModelContext!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.composeEntities'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.setContextSelection(OdArray<OdDAIObjectId,OdObjectsAllocator<OdDAIObjectId>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.getUnitConverter'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.get(OdDAIObjectId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcFile.get(OdArray<OdDAIObjectId,OdObjectsAllocator<OdDAIObjectId>>!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OdIfcFilePtr'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.databaseClass'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.createDatabase(InitialSchema)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.getFontMapFileName'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.readFile(OdStreamBuf*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OdIfcHostAppServices.readFile(OdString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
    </members>
</doc>